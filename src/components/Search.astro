<form id="searchForm" class="w-full">
  <label for="search" class="sr-only">Search</label>
  <div class="relative w-full">
    <svg
      class="absolute top-1/2 left-4 h-5 w-5 -translate-y-1/2 text-gray-400"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
    </svg>
    <input
      type="text"
      id="search"
      class="w-full rounded-full border-2 border-gray-200 bg-white py-2 pr-6 pl-12 text-lg transition-all duration-200 placeholder:text-gray-400 focus:border-[var(--link-color)] focus:ring-0 focus:outline-none dark:border-gray-700 dark:bg-gray-900 dark:text-white dark:placeholder:text-gray-500 dark:focus:border-[var(--link-color)]"
      placeholder="Search articles..."
      required
    />
  </div>
</form>

<script>
  import Fuse from 'fuse.js';

  const content = await fetch(`/all-content.json`);
  const { posts } = await content.json();

  const fuse = new Fuse(posts, {
    threshold: 0.3,
    keys: [
      { name: 'title', weight: 1.0 },
      { name: 'shortDescription', weight: 0.7 },
      { name: 'tags', weight: 0.5 },
    ],
  });

  const form = document.getElementById('searchForm');
  const search = document.getElementById('search');
  const searchResults = document.getElementById('search-results');
  const searchResultsList = document.getElementById('search-results-list');
  const initialPosts = document.getElementById('initial-posts');
  const latestHeading = document.getElementById('latest-heading');

  function createArticleHTML(post) {
    const color = {
      TIL: 'text-purple-600',
      Article: 'text-blue-700',
      Snippet: 'text-yellow-500',
    }[post.type];

    const formatDate = (date) => {
      return new Date(date).toLocaleString('en-US', {
        month: 'long',
        day: 'numeric',
        year: 'numeric',
      });
    };

    const tagsHTML =
      post.tags && post.tags.length > 0
        ? `<div class="mt-2 flex gap-2">
          <span class="text-xs text-text-light">Tags:</span>
          ${post.tags.map((tag) => `<span class="text-xs font-semibold text-[color:var(--color-text)]">${tag}</span>`).join('')}
        </div>`
        : '';

    return `
      <article class="post relative">
        <header>
          <h3 class="mb-2">
            <a href="${post.url}" class="">
              <span class="absolute inset-0"></span>
              ${post.title}
            </a>
          </h3>
          <div class="mb-1 flex items-baseline gap-2">
            <span class="font-serif italic font-semibold text-sm ${color}">${post.type}</span>
            <span class="text-xs italic">
              ${
                post.updatedDate
                  ? `updated on ${formatDate(post.updatedDate)}`
                  : `posted on ${formatDate(post.pubDate)}`
              }
            </span>
          </div>
        </header>
        <div>
          ${post.shortDescription}
        </div>
        <footer>
          ${tagsHTML}
        </footer>
      </article>
    `;
  }

  form?.addEventListener('input', async (e) => {
    const query = search.value.trim();

    if (query.length === 0) {
      // Show initial posts, hide search results
      searchResults.classList.add('hidden');
      initialPosts.classList.remove('hidden');
      latestHeading.classList.remove('hidden');
    } else {
      // Hide initial posts, show search results
      initialPosts.classList.add('hidden');
      latestHeading.classList.add('hidden');
      searchResults.classList.remove('hidden');

      const results = fuse.search(query);
      const searchPosts = results.map((result) => result.item);

      // Generate HTML for search results
      searchResultsList.innerHTML = searchPosts
        .map((post) => createArticleHTML(post))
        .join('');
    }
  });
</script>
