---
export interface Props {
  pubDate: Date;
  updatedDate?: Date;
  tags?: string[];
  keywords?: string[];
}

const { pubDate, updatedDate, tags, keywords } = Astro.props;

function formatDate(date: Date): string {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}
---

<div class="article-meta my-6 border-l-4 border-blue-500 bg-gray-50 p-4">
  <div class="space-y-2 text-sm text-gray-600">
    <div class="flex items-center space-x-2">
      <span class="font-semibold">Posted:</span>
      <time datetime={pubDate.toISOString()}>{formatDate(pubDate)}</time>
    </div>

    {
      updatedDate && (
        <div class="flex items-center space-x-2">
          <span class="font-semibold">Updated:</span>
          <time datetime={updatedDate.toISOString()}>
            {formatDate(updatedDate)}
          </time>
        </div>
      )
    }

    {
      tags && tags.length > 0 && (
        <div class="flex flex-wrap items-center space-x-2">
          <span class="font-semibold">Tags:</span>
          <div class="flex flex-wrap gap-1">
            {tags.map((tag) => (
              <span class="inline-block rounded-full bg-blue-100 px-2 py-1 text-xs text-blue-800">
                {tag}
              </span>
            ))}
          </div>
        </div>
      )
    }

    {
      keywords && keywords.length > 0 && (
        <div class="space-y-2">
          <span class="font-semibold">Keywords:</span>

          {/* Desktop: show all keywords */}
          <div class="hidden md:flex flex-wrap gap-1">
            {keywords.map((keyword) => (
              <span class="inline-block rounded-full bg-green-100 px-2 py-1 text-xs text-green-800">
                {keyword}
              </span>
            ))}
          </div>

          {/* Mobile: collapsible keywords */}
          <div class="md:hidden">
            <details class="group">
              <summary class="cursor-pointer list-none [&::-webkit-details-marker]:hidden">
                <div class="flex flex-wrap gap-1">
                  {keywords.slice(0, 3).map((keyword) => (
                    <span class="inline-block rounded-full bg-green-100 px-2 py-1 text-xs text-green-800">
                      {keyword}
                    </span>
                  ))}
                  {keywords.length > 3 && (
                    <span class="inline-block rounded-full bg-gray-100 px-2 py-1 text-xs text-gray-600 group-open:hidden">
                      +{keywords.length - 3} more
                    </span>
                  )}
                </div>
              </summary>
              {keywords.length > 3 && (
                <div class="flex flex-wrap gap-1 mt-2">
                  {keywords.slice(3).map((keyword) => (
                    <span class="inline-block rounded-full bg-green-100 px-2 py-1 text-xs text-green-800">
                      {keyword}
                    </span>
                  ))}
                </div>
              )}
            </details>
          </div>
        </div>
      )
    }
  </div>
</div>
