var store=[
    {
        "title": "Set up a VirtualBox VM",
        "excerpt": "Having a virtual machine (VM) locally is extremely useful to test provisioning your remote host.This can be really useful when you plan to host your application on an external provider like DigitalOcean.Together with ansible it will help you learn how to automate your deployment. Setup VirtualBox   Download a Ubuntu iso image and use it to set up a VM.  Install VirtualBox.          Create a virtual machine. It is important to select “Bridged Adapter” in the Network options. This will allow your host to communicate with the VM via TCP/IP. Configure other options (memory, disk size, etc.) as desired.      Optionally, I would suggest to install the Guest Additions. This allows you to resize the screen to the window size. First, select from the menu “Insert Guest Additions CD”, then after mounting it you need to execute autorun.sh. After reboot you can activate from the menu “View &gt; Autoresize Guest Display”      Optionally, I would also activate the bidirectional Drag and Drop from the menu.        Next, you need to add your user to the sudoers group, which is not done by default on installation. For this, you need to follow these instructions:    su -sudo adduser &lt;username&gt; sudo        The root password is the same password as the one you selected for your user in the installation step.     Next, you need to allow the VM user to execute sudo without being prompted for a password. This will allow the execution of the ansible tasks that require superuser privilges, without being prompted for a password.For this, on your VM, create a new file /etc/sudoers.d/&lt;username&gt; inside the /etc/sudoers.d directory with following content:    &lt;username&gt; ALL=(ALL) NOPASSWD:ALL        This is not really safe, and you could be more specific with the permissions (e.g. ALL = NOPASSWD: /bin/apt, /bin/apt-get …), but we don’t want to mess around with security at this point.     Next, you want to install an ssh server on your machine, so you can access it from your client via ssh. For this, execute the following commands:    sudo apt-get install openssh-serversudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bckegrep -v \"^$|^#\" /etc/ssh/sshd_config | sudo tee /etc/ssh/sshd_configecho \"Port 22\" | sudo tee -a /etc/ssh/sshd_configsudo systemctl enable ssh --now        Explanation:           The first line installs the ssh server      The second one copies the default configuration of the ssh server to a separate file as a backup and for later reference      The third line only extracts the lines in the original file that are not blank lines or comments, so we can only see the configured variables at one glance      The fourth line opens port 22 for ssh connections. For security reasons you could change this to any other port between 1024 and 65536, so attackers have a harder time to guess the correct port      The last line finally starts the ssh server and enables it to launch on startup        Next, you need to generate an ssh key on your host, and copy it to the VM with    ssh-copy-id -i ~/.ssh/id_ed25519.pub &lt;username&gt;@&lt;VM IP Address&gt; -p 22      Setup Ansible First things first, you need to install Ansible on your local machine. I would recommend to install globally, using pip, but the one provided by your local pyenv installation.You could also install it with your package manager, but it might not be the latest version and would be harder to upgrade. Let’s take a look at following two files: our inventory development and our playbook playbook.yml: The inventory specifies a hostname that is addressed in the playbook as hosts: vbox. This tells Ansible which hosts to run this playbook on.There are three other parameters specified for the host:   ansible_host: this is the IP address of the node that ansible will ssh to to execute the playbook  ansible_port: this is the port for the ssh connection  ansible_become: this instructs ansible to become a specific user on the remote host during playbook execution. By default this is root. Since most of the commands require superuser privileges, I would rather specify it here than for each task repeatedly, and only in case I need less privileges to perform an action, I specify it per task level.The playbook goes through the installation process of pyenv step by step   It uptates the apt packages list (for debian/ubuntu obviously)  It installs the packages required by pyenv for building  It installs pyenv via an install script  It updates the .profile of the user to initialize pyenv correctly.There is a required environment variable ``, that can be specified with the flag -e on playbook execution, which controls for which user pyenv should be installed. Here is how you would execute the playbook: ansible-playbook -i development -e user=victor playbook.ymlThis command will install pyenv for the specified user on the VM and you can check it by logging in as the user on the VM and typing pyenv into the terminal, which should output all pyenv actions available. Further reading:   Resize the Virtual Drive of a VM: By default, the VM might not have enough hard disk space. So this command might be pretty helpful to resize it to the desired size:  VBoxManage modifyhd &lt;absolute path including the name and extension&gt; --resize 20480  Sample Ansible setup: Suggestions how to organize your inventories, playbooks and roles. ",
        "summary": "How to run a virtual host locally to test your automatic provisioning",
        "categories": [
            "Production deployment"
        ],
        "tags": [
            "VirtualBox",
            "ansible"
        ],
        "url": "https://minimalistdjango.com/production%20deployment/2023/06/10/virtualbox.html",
        // "meta": {"title":"Set up a VirtualBox VM","content":"<p>Having a virtual machine (VM) locally is extremely useful to test provisioning your remote host.\nThis can be really useful when you plan to host your application on an external provider like <a href=\"https://m.do.co/c/c40e38c3b079\" rel=\"sponsored\" target=\"_blank\">DigitalOcean</a>.\nTogether with ansible it will help you learn how to automate your deployment.</p>\n\n<h2 id=\"setup-virtualbox\">Setup VirtualBox</h2>\n\n<ol>\n  <li>Download a Ubuntu iso image and use it to set up a VM.</li>\n  <li>Install <a href=\"https://www.virtualbox.org/\">VirtualBox</a>.\n    <ul>\n      <li><strong>Create a virtual machine</strong>. It is important to <strong>select “Bridged Adapter” in the Network options</strong>. This will allow your host to communicate with the VM via TCP/IP. Configure other options (memory, disk size, etc.) as desired.</li>\n      <li>Optionally, I would suggest to <strong>install the Guest Additions</strong>. This allows you to resize the screen to the window size. First, select from the menu “Insert Guest Additions CD”, then after mounting it you need to execute <code class=\"language-plaintext highlighter-rouge\">autorun.sh</code>. After reboot you can activate from the menu “View &gt; Autoresize Guest Display”</li>\n      <li>Optionally, I would also activate the <strong>bidirectional Drag and Drop</strong> from the menu.</li>\n    </ul>\n  </li>\n  <li>Next, you need to <strong>add your user to the sudoers group</strong>, which is not done by default on installation. For this, you need to follow <a href=\"https://superuser.com/questions/1623376/how-can-i-make-my-own-account-a-sudoers-on-virtualbox/1755286#1755286\">these instructions</a>:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>su -\nsudo adduser &lt;username&gt; sudo\n</code></pre></div>    </div>\n    <p>The root password is the same password as the one you selected for your user in the installation step.</p>\n  </li>\n  <li>Next, you need to allow the VM user to execute <code class=\"language-plaintext highlighter-rouge\">sudo</code> without being prompted for a password. \nThis will allow the execution of the <strong>ansible</strong> tasks that require superuser privilges, without being prompted for a password.\nFor this, on your VM, create a new file <code class=\"language-plaintext highlighter-rouge\">/etc/sudoers.d/&lt;username&gt;</code> inside the <code class=\"language-plaintext highlighter-rouge\">/etc/sudoers.d</code> directory with following content:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;username&gt; ALL=(ALL) NOPASSWD:ALL\n</code></pre></div>    </div>\n    <p>This is not really safe, and you could be more specific with the permissions (e.g. <code class=\"language-plaintext highlighter-rouge\">ALL = NOPASSWD: /bin/apt, /bin/apt-get</code> …), but we don’t want to mess around with security at this point.</p>\n  </li>\n  <li>Next, you want to install an ssh server on your machine, so you can access it from your client via ssh. \nFor this, execute the following commands:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo apt-get install openssh-server\nsudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bck\negrep -v \"^$|^#\" /etc/ssh/sshd_config | sudo tee /etc/ssh/sshd_config\necho \"Port 22\" | sudo tee -a /etc/ssh/sshd_config\nsudo systemctl enable ssh --now\n</code></pre></div>    </div>\n    <p>Explanation:</p>\n    <ul>\n      <li>The first line installs the ssh server</li>\n      <li>The second one copies the default configuration of the ssh server to a separate file as a backup and for later reference</li>\n      <li>The third line only extracts the lines in the original file that are not blank lines or comments, so we can only see the configured variables at one glance</li>\n      <li>The fourth line opens port 22 for ssh connections. For security reasons you could change this to any other port between 1024 and 65536, so attackers have a harder time to guess the correct port</li>\n      <li>The last line finally starts the ssh server and enables it to launch on startup</li>\n    </ul>\n  </li>\n  <li>Next, you need to generate an ssh key on your host, and copy it to the VM with\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ssh-copy-id -i ~/.ssh/id_ed25519.pub &lt;username&gt;@&lt;VM IP Address&gt; -p 22\n</code></pre></div>    </div>\n  </li>\n</ol>\n\n<h2 id=\"setup-ansible\">Setup Ansible</h2>\n\n<p>First things first, you need to install <em>Ansible</em> on your local machine. \nI would recommend to install globally, using <em>pip</em>, but the one provided by your local <em>pyenv</em> installation.\nYou could also install it with your package manager, but it might not be the latest version and would be harder to upgrade.</p>\n\n<p>Let’s take a look at following two files: our inventory <strong>development</strong> and our playbook <strong>playbook.yml</strong>:</p>\n\n<script src=\"https://gist.github.com/movileanuv/835a2c5e287dd1ce5b192da7f503dd3b.js\"></script>\n\n<p>The inventory specifies a hostname that is addressed in the playbook as <code class=\"language-plaintext highlighter-rouge\">hosts: vbox</code>. This tells Ansible which hosts to run this playbook on.\nThere are three other parameters specified for the host:</p>\n<ul>\n  <li><strong>ansible_host</strong>: this is the IP address of the node that ansible will ssh to to execute the playbook</li>\n  <li><strong>ansible_port</strong>: this is the port for the ssh connection</li>\n  <li><strong>ansible_become</strong>: this instructs ansible to become a specific user on the remote host during playbook execution. By default this is <strong>root</strong>. Since most of the commands require superuser privileges, I would rather specify it here than for each task repeatedly, and only in case I need less privileges to perform an action, I specify it per task level.</li>\n</ul>\n\n<p>The playbook goes through the installation process of pyenv step by step</p>\n<ol>\n  <li>It uptates the apt packages list (for debian/ubuntu obviously)</li>\n  <li>It installs the packages required by <em>pyenv</em> for building</li>\n  <li>It installs <em>pyenv</em> via an install script</li>\n  <li>It updates the <code class=\"language-plaintext highlighter-rouge\">.profile</code> of the user to initialize <em>pyenv</em> correctly.</li>\n</ol>\n\n<p>There is a required environment variable ``, that can be specified with the flag <code class=\"language-plaintext highlighter-rouge\">-e</code> on playbook execution, which controls for which user <em>pyenv</em> should be installed. Here is how you would execute the playbook:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook <span class=\"nt\">-i</span> development <span class=\"nt\">-e</span> <span class=\"nv\">user</span><span class=\"o\">=</span>victor playbook.yml\n</code></pre></div></div>\n\n<p>This command will install <em>pyenv</em> for the specified user on the VM and you can check it by logging in as the user on the VM and typing <code class=\"language-plaintext highlighter-rouge\">pyenv</code> into the terminal, which should output all <em>pyenv</em> actions available.</p>\n\n<h2 id=\"further-reading\">Further reading:</h2>\n\n<ul>\n  <li><a href=\"https://forums.virtualbox.org/viewtopic.php?f=35&amp;t=50661\" target=\"_blank\">Resize the Virtual Drive of a VM</a>: By default, the VM might not have enough hard disk space. So this command might be pretty helpful to resize it to the desired size:\n  <code class=\"language-plaintext highlighter-rouge\">VBoxManage modifyhd &lt;absolute path including the name and extension&gt; --resize 20480</code></li>\n  <li><a href=\"https://docs.ansible.com/ansible/latest/tips_tricks/sample_setup.html#sample-setup\" target=\"_blank\">Sample Ansible setup</a>: Suggestions how to organize your inventories, playbooks and roles.</li>\n</ul>\n\n<p><a href=\"https://www.digitalocean.com/?refcode=c40e38c3b079&amp;utm_campaign=Referral_Invite&amp;utm_medium=Referral_Program&amp;utm_source=badge\" rel=\"sponsored\" target=\"_blank\"><img src=\"https://web-platforms.sfo2.cdn.digitaloceanspaces.com/WWW/Badge%201.svg\" alt=\"DigitalOcean Referral Badge\" /></a></p>\n","tags":["VirtualBox","ansible"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/10/virtualbox.html","previous":null,"collection":"posts","next":{"title":"How to set up a Django project","content":"<p><img src=\"/images/xkcd-startling.png\" alt=\"xkcd meme on regular repetitive tasks\" />\n<a href=\"https://xkcd.com/354/\" target=\"_blank\">https://xkcd.com/354/</a></p>\n\n<h2 id=\"install-pyenv\">Choose your Python version with <em>pyenv</em></h2>\n\n<p><a href=\"https://github.com/pyenv/pyenv#installation\" target=\"_blank\"><em>Pyenv</em></a> allows you to easily manage multiple Python versions on your system, which is particularly useful when working with different Django projects that require specific versions of Python.</p>\n\n<p>You can easily install pyenv with curl:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl https://pyenv.run | bash\n</code></pre></div></div>\n\n<p>Then add the following lines to your <code class=\"language-plaintext highlighter-rouge\">.bashrc</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">export </span><span class=\"nv\">PYENV_ROOT</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$HOME</span><span class=\"s2\">/.pyenv\"</span>\n<span class=\"nb\">command</span> <span class=\"nt\">-v</span> pyenv <span class=\"o\">&gt;</span>/dev/null <span class=\"o\">||</span> <span class=\"nb\">export </span><span class=\"nv\">PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$PYENV_ROOT</span><span class=\"s2\">/bin:</span><span class=\"nv\">$PATH</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv virtualenv-init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n</code></pre></div></div>\n\n<p>To use a specific python version for your project, execute</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pyenv <span class=\"nb\">install </span>3.11.3\npyenv <span class=\"nb\">local </span>3.11.3\n</code></pre></div></div>\n\n<p>This will create a <code class=\"language-plaintext highlighter-rouge\">.python-version</code> file in your project’s director, that specifies the currently used python version.\nYou can verify by executing <code class=\"language-plaintext highlighter-rouge\">python --version</code>.</p>\n\n<h2 id=\"manage-your-dependencies-with-poetry\">Manage your dependencies with <em>poetry</em></h2>\n\n<p>Dependency management is important because external libraries can change over time, and upgrading them without proper management can potentially crash your application.\n<a href=\"https://python-poetry.org/docs/#installation\" target=\"_blank\"><em>Poetry</em></a> incorporates everything you need to isolate your project and manage your dependencies.</p>\n\n<p>You can install poetry outside your project’s directory with</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-sSL</span> https://install.python-poetry.org | python3 -\n</code></pre></div></div>\n\n<p>Here are some useful commands that you will always come across:</p>\n\n<ol>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#init\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry init</code></a> you can easily generate a new <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file inside the current directory, that keeps track of the project dependencies</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#add\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry add &lt;package-name&gt;</code></a> you can add a new package to your <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file and immediately install it in your virtual environment</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#shell\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry shell</code></a> you activate your virtual environment and run it isolated from other projects</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#export\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry export</code></a> you can write your dependencies in a format that can be easily installed with <a href=\"https://pip.pypa.io/en/stable/installation/\">pip</a></li>\n</ol>\n\n<blockquote class=\"tip-content\">\n  <h2 id=\"-tip\">🤫 Tip</h2>\n  <p>Create a <code class=\"language-plaintext highlighter-rouge\">requirements/</code> directory to separate development, test and production requirements.</p>\n</blockquote>\n\n<h2 id=\"tldr\">TL;DR</h2>\n\n<p>Here is a quick run-through on how to set up a new Django project after having successfully installed <em>pyenv</em> and <em>poetry</em>:</p>\n\n<script src=\"https://gist.github.com/movileanuv/56fcce4d2351ab096cbd10e97211782f.js\"></script>\n\n<h2 id=\"further-reading\">Further Reading</h2>\n\n<ul>\n  <li><a href=\"https://realpython.com/dependency-management-python-poetry/\" target=\"_blank\">RealPython</a>: More details on how to work with poetry</li>\n  <li><a href=\"https://www.b-list.org/weblog/2022/may/13/boring-python-dependencies/\" target=\"_blank\">Boring Python: dependency management</a>: Great article that describes how to work with tools like “pip” and “venv” and what you have to look out for</li>\n  <li><a href=\"https://www.youtube.com/watch?v=-YEUFGFHWgQ\">Youtube: Bootstrapping Your Local Python Environment</a>:\nJust a regular video discussing python environments, but I like this one: <strong>Don’t use <code class=\"language-plaintext highlighter-rouge\">sudo</code> when you set up your python envrionment</strong></li>\n</ul>\n\n","tags":["pyenv","poetry"],"categories":["Development"],"url":"/development/2023/06/14/set-up-a-django-project.html","previous":{"title":"Set up a VirtualBox VM","content":"<p>Having a virtual machine (VM) locally is extremely useful to test provisioning your remote host.\nThis can be really useful when you plan to host your application on an external provider like <a href=\"https://m.do.co/c/c40e38c3b079\" rel=\"sponsored\" target=\"_blank\">DigitalOcean</a>.\nTogether with ansible it will help you learn how to automate your deployment.</p>\n\n<h2 id=\"setup-virtualbox\">Setup VirtualBox</h2>\n\n<ol>\n  <li>Download a Ubuntu iso image and use it to set up a VM.</li>\n  <li>Install <a href=\"https://www.virtualbox.org/\">VirtualBox</a>.\n    <ul>\n      <li><strong>Create a virtual machine</strong>. It is important to <strong>select “Bridged Adapter” in the Network options</strong>. This will allow your host to communicate with the VM via TCP/IP. Configure other options (memory, disk size, etc.) as desired.</li>\n      <li>Optionally, I would suggest to <strong>install the Guest Additions</strong>. This allows you to resize the screen to the window size. First, select from the menu “Insert Guest Additions CD”, then after mounting it you need to execute <code class=\"language-plaintext highlighter-rouge\">autorun.sh</code>. After reboot you can activate from the menu “View &gt; Autoresize Guest Display”</li>\n      <li>Optionally, I would also activate the <strong>bidirectional Drag and Drop</strong> from the menu.</li>\n    </ul>\n  </li>\n  <li>Next, you need to <strong>add your user to the sudoers group</strong>, which is not done by default on installation. For this, you need to follow <a href=\"https://superuser.com/questions/1623376/how-can-i-make-my-own-account-a-sudoers-on-virtualbox/1755286#1755286\">these instructions</a>:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>su -\nsudo adduser &lt;username&gt; sudo\n</code></pre></div>    </div>\n    <p>The root password is the same password as the one you selected for your user in the installation step.</p>\n  </li>\n  <li>Next, you need to allow the VM user to execute <code class=\"language-plaintext highlighter-rouge\">sudo</code> without being prompted for a password. \nThis will allow the execution of the <strong>ansible</strong> tasks that require superuser privilges, without being prompted for a password.\nFor this, on your VM, create a new file <code class=\"language-plaintext highlighter-rouge\">/etc/sudoers.d/&lt;username&gt;</code> inside the <code class=\"language-plaintext highlighter-rouge\">/etc/sudoers.d</code> directory with following content:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;username&gt; ALL=(ALL) NOPASSWD:ALL\n</code></pre></div>    </div>\n    <p>This is not really safe, and you could be more specific with the permissions (e.g. <code class=\"language-plaintext highlighter-rouge\">ALL = NOPASSWD: /bin/apt, /bin/apt-get</code> …), but we don’t want to mess around with security at this point.</p>\n  </li>\n  <li>Next, you want to install an ssh server on your machine, so you can access it from your client via ssh. \nFor this, execute the following commands:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo apt-get install openssh-server\nsudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bck\negrep -v \"^$|^#\" /etc/ssh/sshd_config | sudo tee /etc/ssh/sshd_config\necho \"Port 22\" | sudo tee -a /etc/ssh/sshd_config\nsudo systemctl enable ssh --now\n</code></pre></div>    </div>\n    <p>Explanation:</p>\n    <ul>\n      <li>The first line installs the ssh server</li>\n      <li>The second one copies the default configuration of the ssh server to a separate file as a backup and for later reference</li>\n      <li>The third line only extracts the lines in the original file that are not blank lines or comments, so we can only see the configured variables at one glance</li>\n      <li>The fourth line opens port 22 for ssh connections. For security reasons you could change this to any other port between 1024 and 65536, so attackers have a harder time to guess the correct port</li>\n      <li>The last line finally starts the ssh server and enables it to launch on startup</li>\n    </ul>\n  </li>\n  <li>Next, you need to generate an ssh key on your host, and copy it to the VM with\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ssh-copy-id -i ~/.ssh/id_ed25519.pub &lt;username&gt;@&lt;VM IP Address&gt; -p 22\n</code></pre></div>    </div>\n  </li>\n</ol>\n\n<h2 id=\"setup-ansible\">Setup Ansible</h2>\n\n<p>First things first, you need to install <em>Ansible</em> on your local machine. \nI would recommend to install globally, using <em>pip</em>, but the one provided by your local <em>pyenv</em> installation.\nYou could also install it with your package manager, but it might not be the latest version and would be harder to upgrade.</p>\n\n<p>Let’s take a look at following two files: our inventory <strong>development</strong> and our playbook <strong>playbook.yml</strong>:</p>\n\n<script src=\"https://gist.github.com/movileanuv/835a2c5e287dd1ce5b192da7f503dd3b.js\"></script>\n\n<p>The inventory specifies a hostname that is addressed in the playbook as <code class=\"language-plaintext highlighter-rouge\">hosts: vbox</code>. This tells Ansible which hosts to run this playbook on.\nThere are three other parameters specified for the host:</p>\n<ul>\n  <li><strong>ansible_host</strong>: this is the IP address of the node that ansible will ssh to to execute the playbook</li>\n  <li><strong>ansible_port</strong>: this is the port for the ssh connection</li>\n  <li><strong>ansible_become</strong>: this instructs ansible to become a specific user on the remote host during playbook execution. By default this is <strong>root</strong>. Since most of the commands require superuser privileges, I would rather specify it here than for each task repeatedly, and only in case I need less privileges to perform an action, I specify it per task level.</li>\n</ul>\n\n<p>The playbook goes through the installation process of pyenv step by step</p>\n<ol>\n  <li>It uptates the apt packages list (for debian/ubuntu obviously)</li>\n  <li>It installs the packages required by <em>pyenv</em> for building</li>\n  <li>It installs <em>pyenv</em> via an install script</li>\n  <li>It updates the <code class=\"language-plaintext highlighter-rouge\">.profile</code> of the user to initialize <em>pyenv</em> correctly.</li>\n</ol>\n\n<p>There is a required environment variable ``, that can be specified with the flag <code class=\"language-plaintext highlighter-rouge\">-e</code> on playbook execution, which controls for which user <em>pyenv</em> should be installed. Here is how you would execute the playbook:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook <span class=\"nt\">-i</span> development <span class=\"nt\">-e</span> <span class=\"nv\">user</span><span class=\"o\">=</span>victor playbook.yml\n</code></pre></div></div>\n\n<p>This command will install <em>pyenv</em> for the specified user on the VM and you can check it by logging in as the user on the VM and typing <code class=\"language-plaintext highlighter-rouge\">pyenv</code> into the terminal, which should output all <em>pyenv</em> actions available.</p>\n\n<h2 id=\"further-reading\">Further reading:</h2>\n\n<ul>\n  <li><a href=\"https://forums.virtualbox.org/viewtopic.php?f=35&amp;t=50661\" target=\"_blank\">Resize the Virtual Drive of a VM</a>: By default, the VM might not have enough hard disk space. So this command might be pretty helpful to resize it to the desired size:\n  <code class=\"language-plaintext highlighter-rouge\">VBoxManage modifyhd &lt;absolute path including the name and extension&gt; --resize 20480</code></li>\n  <li><a href=\"https://docs.ansible.com/ansible/latest/tips_tricks/sample_setup.html#sample-setup\" target=\"_blank\">Sample Ansible setup</a>: Suggestions how to organize your inventories, playbooks and roles.</li>\n</ul>\n\n<p><a href=\"https://www.digitalocean.com/?refcode=c40e38c3b079&amp;utm_campaign=Referral_Invite&amp;utm_medium=Referral_Program&amp;utm_source=badge\" rel=\"sponsored\" target=\"_blank\"><img src=\"https://web-platforms.sfo2.cdn.digitaloceanspaces.com/WWW/Badge%201.svg\" alt=\"DigitalOcean Referral Badge\" /></a></p>\n","tags":["VirtualBox","ansible"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/10/virtualbox.html","previous":null,"collection":"posts","next":{"title":"How to set up a Django project","tags":["pyenv","poetry"],"categories":["Development"],"url":"/development/2023/06/14/set-up-a-django-project.html","collection":"posts","path":"_posts/2023-06-14-set-up-a-django-project.md","relative_path":"_posts/2023-06-14-set-up-a-django-project.md","date":"2023-06-14 10:00:00 +0000","id":"/development/2023/06/14/set-up-a-django-project","draft":false,"layout":"post","published":true,"author":"victor","slug":"set-up-a-django-project","ext":".md"},"path":"_posts/2023-06-10-virtualbox.md","output":"<!DOCTYPE html>\n<!--\n    So Simple Jekyll Theme 3.2.0\n    Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes\n    Free for personal and commercial use under the MIT license\n    https://github.com/mmistakes/so-simple-theme/blob/master/LICENSE\n-->\n<html lang=\"en-US\" class=\"no-js\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  \n  \n\n  \n    \n    <!-- Begin Jekyll SEO tag v2.8.0 -->\n<title>Set up a VirtualBox VM | Minimalist Django</title>\n<meta name=\"generator\" content=\"Jekyll v4.2.2\" />\n<meta property=\"og:title\" content=\"Set up a VirtualBox VM\" />\n<meta name=\"author\" content=\"Victor Movileanu\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta name=\"description\" content=\"How to run a virtual host locally to test your automatic provisioning\" />\n<meta property=\"og:description\" content=\"How to run a virtual host locally to test your automatic provisioning\" />\n<link rel=\"canonical\" href=\"https://minimalistdjango.com/production%20deployment/2023/06/10/virtualbox.html\" />\n<meta property=\"og:url\" content=\"https://minimalistdjango.com/production%20deployment/2023/06/10/virtualbox.html\" />\n<meta property=\"og:site_name\" content=\"Minimalist Django\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-06-10T00:00:00+00:00\" />\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta property=\"twitter:title\" content=\"Set up a VirtualBox VM\" />\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"author\":{\"@type\":\"Person\",\"name\":\"Victor Movileanu\"},\"dateModified\":\"2023-06-10T00:00:00+00:00\",\"datePublished\":\"2023-06-10T00:00:00+00:00\",\"description\":\"How to run a virtual host locally to test your automatic provisioning\",\"headline\":\"Set up a VirtualBox VM\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://minimalistdjango.com/production%20deployment/2023/06/10/virtualbox.html\"},\"publisher\":{\"@type\":\"Organization\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://minimalistdjango.com/images/django-rocket.svg\"},\"name\":\"Victor Movileanu\"},\"url\":\"https://minimalistdjango.com/production%20deployment/2023/06/10/virtualbox.html\"}</script>\n<!-- End Jekyll SEO tag -->\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-PP61HM8LXR\"></script>\n<script>\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-PP61HM8LXR');\n</script>\n\n  \n\n  <script>\n    /* Cut the mustard */\n    if ( 'querySelector' in document && 'addEventListener' in window ) {\n      document.documentElement.className = document.documentElement.className.replace(/\\bno-js\\b/g, '') + 'js';\n    }\n  </script>\n\n  <link rel=\"stylesheet\" href=\"/assets/css/main.css\">\n  <link rel=\"stylesheet\" href=\"/assets/css/skins/default.css\">\n  <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Minimalist Django\" href=\"/feed.xml\">\n<!-- start custom head snippets -->\n\n<!-- insert favicons. use http://realfavicongenerator.net/ -->\n\n<!-- end custom head snippets -->\n\n</head>\n\n\n  <body class=\"layout--post  set-up-a-virtualbox-vm\">\n    <nav class=\"skip-links\">\n  <h2 class=\"screen-reader-text\">Skip links</h2>\n  <ul>\n    <li><a href=\"#primary-nav\" class=\"screen-reader-shortcut\">Skip to primary navigation</a></li>\n    <li><a href=\"#main\" class=\"screen-reader-shortcut\">Skip to content</a></li>\n    <li><a href=\"#footer\" class=\"screen-reader-shortcut\">Skip to footer</a></li>\n  </ul>\n</nav>\n\n    \n  <div class=\"navigation-wrapper\">\n    <a href=\"#menu-toggle\" id=\"menu-toggle\">Menu</a>\n    <nav id=\"primary-nav\" class=\"site-nav animated drop\">\n      <ul><li><a href=\"/\">Home</a></li><li><a href=\"/categories/\">Categories</a></li><li><a href=\"/tags/\">Tags</a></li><li><a href=\"/about/\">About</a></li></ul>\n    </nav>\n  </div><!-- /.navigation-wrapper -->\n\n\n    <header class=\"masthead\">\n  <div class=\"wrap\">\n    \n      <a href=\"/\" class=\"site-logo\" rel=\"home\" title=\"Minimalist Django\">\n        <img src=\"/images/django-rocket.svg\" class=\"site-logo-img animated fadeInDown\" alt=\"Minimalist Django\">\n      </a>\n    \n    \n    \n      \n        <div class=\"site-title animated fadeIn\"><a href=\"/\">Minimalist Django</a></div>\n      \n      <p class=\"site-description animated fadeIn\" itemprop=\"description\">The minimalist way of web development</p>\n    \n  </div>\n</header><!-- /.masthead -->\n\n\n    <main id=\"main\" class=\"main-content\" aria-label=\"Content\">\n  <article class=\"h-entry\">\n    \n\n    <div class=\"page-wrapper\">\n      <header class=\"page-header\">\n        \n        \n          <h1 id=\"page-title\" class=\"page-title p-name\">Set up a VirtualBox VM\n</h1>\n        \n      </header>\n\n      <div class=\"page-sidebar\">\n        <div class=\"page-author h-card p-author\"><img src=\"/images/me.jpg\" class=\"author-avatar u-photo\" alt=\"Victor Movileanu\"><div class=\"author-info\"><div class=\"author-name\">\n        <span class=\"p-name\">Victor Movileanu</span>\n      </div><ul class=\"author-links\"><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://twitter.com/ViggieSmalls5\"><i class=\"fab fa-twitter-square fa-lg\" title=\"Twitter\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://instagram.com/vickym.rulez\"><i class=\"fab fa-instagram fa-lg\" title=\"Instagram\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://github.com/movileanuv\"><i class=\"fab fa-github-square fa-lg\" title=\"GitHub\"></i></a>\n          </li></ul>\n    <time class=\"page-date dt-published\" datetime=\"2023-06-10T00:00:00+00:00\"><a class=\"u-url\" href=\"\">June 10, 2023</a>\n</time>\n\n  </div>\n</div>\n\n        \n  <h3 class=\"page-taxonomies-title\">Categories</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">Production deployment</li>\n  </ul>\n\n\n        \n  <h3 class=\"page-taxonomies-title\">Tags</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">VirtualBox</li><li class=\"page-taxonomy\">ansible</li>\n  </ul>\n\n\n      </div>\n\n      <div class=\"page-content\">\n        <div class=\"e-content\">\n          <p>Having a virtual machine (VM) locally is extremely useful to test provisioning your remote host.\nThis can be really useful when you plan to host your application on an external provider like <a href=\"https://m.do.co/c/c40e38c3b079\" rel=\"sponsored\" target=\"_blank\">DigitalOcean</a>.\nTogether with ansible it will help you learn how to automate your deployment.</p>\n\n<h2 id=\"setup-virtualbox\">Setup VirtualBox</h2>\n\n<ol>\n  <li>Download a Ubuntu iso image and use it to set up a VM.</li>\n  <li>Install <a href=\"https://www.virtualbox.org/\">VirtualBox</a>.\n    <ul>\n      <li><strong>Create a virtual machine</strong>. It is important to <strong>select “Bridged Adapter” in the Network options</strong>. This will allow your host to communicate with the VM via TCP/IP. Configure other options (memory, disk size, etc.) as desired.</li>\n      <li>Optionally, I would suggest to <strong>install the Guest Additions</strong>. This allows you to resize the screen to the window size. First, select from the menu “Insert Guest Additions CD”, then after mounting it you need to execute <code class=\"language-plaintext highlighter-rouge\">autorun.sh</code>. After reboot you can activate from the menu “View &gt; Autoresize Guest Display”</li>\n      <li>Optionally, I would also activate the <strong>bidirectional Drag and Drop</strong> from the menu.</li>\n    </ul>\n  </li>\n  <li>Next, you need to <strong>add your user to the sudoers group</strong>, which is not done by default on installation. For this, you need to follow <a href=\"https://superuser.com/questions/1623376/how-can-i-make-my-own-account-a-sudoers-on-virtualbox/1755286#1755286\">these instructions</a>:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>su -\nsudo adduser &lt;username&gt; sudo\n</code></pre></div>    </div>\n    <p>The root password is the same password as the one you selected for your user in the installation step.</p>\n  </li>\n  <li>Next, you need to allow the VM user to execute <code class=\"language-plaintext highlighter-rouge\">sudo</code> without being prompted for a password. \nThis will allow the execution of the <strong>ansible</strong> tasks that require superuser privilges, without being prompted for a password.\nFor this, on your VM, create a new file <code class=\"language-plaintext highlighter-rouge\">/etc/sudoers.d/&lt;username&gt;</code> inside the <code class=\"language-plaintext highlighter-rouge\">/etc/sudoers.d</code> directory with following content:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;username&gt; ALL=(ALL) NOPASSWD:ALL\n</code></pre></div>    </div>\n    <p>This is not really safe, and you could be more specific with the permissions (e.g. <code class=\"language-plaintext highlighter-rouge\">ALL = NOPASSWD: /bin/apt, /bin/apt-get</code> …), but we don’t want to mess around with security at this point.</p>\n  </li>\n  <li>Next, you want to install an ssh server on your machine, so you can access it from your client via ssh. \nFor this, execute the following commands:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo apt-get install openssh-server\nsudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bck\negrep -v \"^$|^#\" /etc/ssh/sshd_config | sudo tee /etc/ssh/sshd_config\necho \"Port 22\" | sudo tee -a /etc/ssh/sshd_config\nsudo systemctl enable ssh --now\n</code></pre></div>    </div>\n    <p>Explanation:</p>\n    <ul>\n      <li>The first line installs the ssh server</li>\n      <li>The second one copies the default configuration of the ssh server to a separate file as a backup and for later reference</li>\n      <li>The third line only extracts the lines in the original file that are not blank lines or comments, so we can only see the configured variables at one glance</li>\n      <li>The fourth line opens port 22 for ssh connections. For security reasons you could change this to any other port between 1024 and 65536, so attackers have a harder time to guess the correct port</li>\n      <li>The last line finally starts the ssh server and enables it to launch on startup</li>\n    </ul>\n  </li>\n  <li>Next, you need to generate an ssh key on your host, and copy it to the VM with\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ssh-copy-id -i ~/.ssh/id_ed25519.pub &lt;username&gt;@&lt;VM IP Address&gt; -p 22\n</code></pre></div>    </div>\n  </li>\n</ol>\n\n<h2 id=\"setup-ansible\">Setup Ansible</h2>\n\n<p>First things first, you need to install <em>Ansible</em> on your local machine. \nI would recommend to install globally, using <em>pip</em>, but the one provided by your local <em>pyenv</em> installation.\nYou could also install it with your package manager, but it might not be the latest version and would be harder to upgrade.</p>\n\n<p>Let’s take a look at following two files: our inventory <strong>development</strong> and our playbook <strong>playbook.yml</strong>:</p>\n\n<script src=\"https://gist.github.com/movileanuv/835a2c5e287dd1ce5b192da7f503dd3b.js\"></script>\n\n<p>The inventory specifies a hostname that is addressed in the playbook as <code class=\"language-plaintext highlighter-rouge\">hosts: vbox</code>. This tells Ansible which hosts to run this playbook on.\nThere are three other parameters specified for the host:</p>\n<ul>\n  <li><strong>ansible_host</strong>: this is the IP address of the node that ansible will ssh to to execute the playbook</li>\n  <li><strong>ansible_port</strong>: this is the port for the ssh connection</li>\n  <li><strong>ansible_become</strong>: this instructs ansible to become a specific user on the remote host during playbook execution. By default this is <strong>root</strong>. Since most of the commands require superuser privileges, I would rather specify it here than for each task repeatedly, and only in case I need less privileges to perform an action, I specify it per task level.</li>\n</ul>\n\n<p>The playbook goes through the installation process of pyenv step by step</p>\n<ol>\n  <li>It uptates the apt packages list (for debian/ubuntu obviously)</li>\n  <li>It installs the packages required by <em>pyenv</em> for building</li>\n  <li>It installs <em>pyenv</em> via an install script</li>\n  <li>It updates the <code class=\"language-plaintext highlighter-rouge\">.profile</code> of the user to initialize <em>pyenv</em> correctly.</li>\n</ol>\n\n<p>There is a required environment variable ``, that can be specified with the flag <code class=\"language-plaintext highlighter-rouge\">-e</code> on playbook execution, which controls for which user <em>pyenv</em> should be installed. Here is how you would execute the playbook:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook <span class=\"nt\">-i</span> development <span class=\"nt\">-e</span> <span class=\"nv\">user</span><span class=\"o\">=</span>victor playbook.yml\n</code></pre></div></div>\n\n<p>This command will install <em>pyenv</em> for the specified user on the VM and you can check it by logging in as the user on the VM and typing <code class=\"language-plaintext highlighter-rouge\">pyenv</code> into the terminal, which should output all <em>pyenv</em> actions available.</p>\n\n<h2 id=\"further-reading\">Further reading:</h2>\n\n<ul>\n  <li><a href=\"https://forums.virtualbox.org/viewtopic.php?f=35&amp;t=50661\" target=\"_blank\">Resize the Virtual Drive of a VM</a>: By default, the VM might not have enough hard disk space. So this command might be pretty helpful to resize it to the desired size:\n  <code class=\"language-plaintext highlighter-rouge\">VBoxManage modifyhd &lt;absolute path including the name and extension&gt; --resize 20480</code></li>\n  <li><a href=\"https://docs.ansible.com/ansible/latest/tips_tricks/sample_setup.html#sample-setup\" target=\"_blank\">Sample Ansible setup</a>: Suggestions how to organize your inventories, playbooks and roles.</li>\n</ul>\n\n<p><a href=\"https://www.digitalocean.com/?refcode=c40e38c3b079&amp;utm_campaign=Referral_Invite&amp;utm_medium=Referral_Program&amp;utm_source=badge\" rel=\"sponsored\" target=\"_blank\"><img src=\"https://web-platforms.sfo2.cdn.digitaloceanspaces.com/WWW/Badge%201.svg\" alt=\"DigitalOcean Referral Badge\" /></a></p>\n\n        </div>\n\n        \n\n        \n\n        <nav class=\"page-pagination\" role=\"navigation\">\n  \n\n  \n    <a class=\"page-next\" href=\"/development/2023/06/14/set-up-a-django-project.html\">\n      <h4 class=\"page-pagination-label\">Next</h4>\n      <span class=\"page-pagination-title\">\n        How to set up a Django project\n <i class=\"fas fa-arrow-right\"></i>\n      </span>\n    </a>\n  \n</nav>\n\n      </div>\n    </div>\n  </article>\n</main>\n\n\n    <footer id=\"footer\" class=\"site-footer\">\n  <!-- start custom footer snippets -->\n\n<!-- end custom footer snippets -->\n<div class=\"copyright\">\n    \n      <p>&copy; 2023 Minimalist Django. Powered by <a href=\"https://jekyllrb.com\" rel=\"nofollow\">Jekyll</a> &amp; <a href=\"https://github.com/mmistakes/so-simple-theme\" rel=\"nofollow\">So Simple</a>.</p>\n    \n  </div>\n</footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n  <script src=\"/assets/js/main.min.js\"></script>\n  <script src=\"https://use.fontawesome.com/releases/v5.0.12/js/all.js\"></script>\n\n\n  </body>\n\n</html>\n","relative_path":"_posts/2023-06-10-virtualbox.md","date":"2023-06-10 00:00:00 +0000","id":"/production%20deployment/2023/06/10/virtualbox","excerpt":"How to run a virtual host locally to test your automatic provisioning","draft":false,"layout":"post","published":true,"author":"victor","slug":"virtualbox","ext":".md"},"collection":"posts","next":{"title":"SQLite in production","content":"<p>People say <em>SQLite</em> is a database that is unsuitable for production use because of low performance, inability to handle\nmultiple concurrent writes, and other misconceptions.\nThis article is inspired by a talk at <a href=\"https://youtu.be/yTicYJDT1zE\"><em>DjangoCon 2023</em></a>  and an episode of <a href=\"https://changelog.com/podcast/433\"><em>The Changelog</em></a>.</p>\n\n<iframe class=\"youtube-iframe\" src=\"https://www.youtube.com/embed/yTicYJDT1zE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n\n<h2 id=\"video-summary\">Video summary</h2>\n<ul>\n  <li>SQLite is already in production. You can already see how many applications use SQLite on your computer with this command:\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  find / <span class=\"se\">\\(</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.db\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite3\"</span> <span class=\"se\">\\)</span> <span class=\"nt\">-type</span> f <span class=\"nt\">-exec</span> file <span class=\"o\">{}</span> <span class=\"se\">\\;</span> 2&gt;/dev/null | <span class=\"nb\">grep </span>SQLite\n</code></pre></div>    </div>\n  </li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=682\">11:20</a> it is a serverless database, which means you don’t need to configure an extra host, manage access by your application server, etc.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=866\">14:25</a> No performance loss because of network latency</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=931\">15:31</a> No N + 1 Query problems</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1051\">17:31</a> Concurrent writes are not a problem if you turn <a href=\"https://www.sqlite.org/wal.html\">Write-Ahead Logging</a> for your SQLite database. For this, you can execute <code class=\"language-plaintext highlighter-rouge\">sqlite3 db.sqlite3 'PRAGMA journal_mode=wal;'</code> in your shell.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1142\">19:02</a> Speed up writes even more by reducing the <a href=\"https://www.sqlite.org/pragma.html#pragma_synchronous\">synchronous level</a></li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1253\">20:53</a> You can easily back up the SQLite database with <a href=\"https://litestream.io/\">Litestream</a></li>\n</ul>\n\n<h2 id=\"set-up-django-to-run-with-sqlite\">Set up Django to run with SQLite</h2>\n\n<p>When creating a new Django project, it comes with following default setting for <code class=\"language-plaintext highlighter-rouge\">DATABASES</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"ENGINE\"</span><span class=\"p\">:</span> <span class=\"s\">\"django.db.backends.sqlite3\"</span><span class=\"p\">,</span>\n        <span class=\"s\">\"NAME\"</span><span class=\"p\">:</span> <span class=\"n\">BASE_DIR</span> <span class=\"o\">/</span> <span class=\"s\">\"db.sqlite3\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You can also use <a href=\"https://github.com/jazzband/dj-database-url/\"><code class=\"language-plaintext highlighter-rouge\">dj-database-url</code></a> to configure your <code class=\"language-plaintext highlighter-rouge\">DATABASES</code> setting. In this case, the <code class=\"language-plaintext highlighter-rouge\">DATABASE_URL</code> might look like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>DATABASE_URL=sqlite:///path/to/your/database/file.sqlite3\n</code></pre></div></div>\n\n<p>Now, before you start your django project for the first time, which automatically creates a SQLite database for you, you should create it yourself first, by running:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlite3 db.sqlite3 <span class=\"s1\">'PRAGMA journal_mode=wal; PRAGMA busy_timeout = 5000;'</span>\n</code></pre></div></div>\n\n<p>The PRAGMA synchronous setting is a little bit more tricky, since it does not apply to the database, <a href=\"https://stackoverflow.com/questions/36308801/sqlite3-pragma-synchronous-not-persistent\">but to the database connection</a>.\nHence, you have to change this setting <a href=\"https://stackoverflow.com/a/6843199/5540654\">for all connections opened by the Django app</a>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.signals</span> <span class=\"kn\">import</span> <span class=\"n\">connection_created</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">activate_foreign_keys</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">vendor</span> <span class=\"o\">==</span> <span class=\"s\">'sqlite'</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n        <span class=\"n\">cursor</span><span class=\"p\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s\">'PRAGMA synchronous=1;'</span><span class=\"p\">)</span>\n\n<span class=\"n\">connection_created</span><span class=\"p\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">activate_foreign_keys</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"how-to-configure-litestream-to-back-up-your-database-to-s3\">How to configure Litestream to back up your Database to S3</h2>\n\n<ul>\n  <li><a href=\"https://litestream.io/install/\">Install</a></li>\n  <li><a href=\"https://litestream.io/guides/s3/\">Replicating to Amazon S3</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Running as a Systemd service</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Tips &amp; Caveats</a></li>\n</ul>\n\n<h2 id=\"further-reading\">Further reading</h2>\n<ul>\n  <li>https://tailscale.com/blog/database-for-2022/</li>\n  <li>https://blog.expensify.com/2018/01/08/scaling-sqlite-to-4m-qps-on-a-single-server/</li>\n  <li>https://simonwillison.net/2022/Oct/23/datasette-gunicorn/</li>\n  <li>https://github.com/tomdyson/django-sqlite-load-tests</li>\n</ul>\n\n","tags":["SQLite","databases","DjangoCon"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/18/sqlite.html","previous":{"title":"How to set up a Django project","tags":["pyenv","poetry"],"categories":["Development"],"url":"/development/2023/06/14/set-up-a-django-project.html","collection":"posts","path":"_posts/2023-06-14-set-up-a-django-project.md","relative_path":"_posts/2023-06-14-set-up-a-django-project.md","date":"2023-06-14 10:00:00 +0000","id":"/development/2023/06/14/set-up-a-django-project","draft":false,"layout":"post","published":true,"author":"victor","slug":"set-up-a-django-project","ext":".md"},"collection":"posts","next":{"title":"Gunicorn from scratch","tags":["gunicorn"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/23/gunicorn.html","collection":"posts","path":"_posts/2023-06-21-gunicorn.md","relative_path":"_posts/2023-06-21-gunicorn.md","date":"2023-06-23 00:00:00 +0000","id":"/production%20deployment/2023/06/23/gunicorn","draft":false,"layout":"post","published":true,"author":"victor","slug":"gunicorn","ext":".md"},"path":"_posts/2023-06-14-sqlite.md","output":"<!DOCTYPE html>\n<!--\n    So Simple Jekyll Theme 3.2.0\n    Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes\n    Free for personal and commercial use under the MIT license\n    https://github.com/mmistakes/so-simple-theme/blob/master/LICENSE\n-->\n<html lang=\"en-US\" class=\"no-js\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  \n  \n\n  \n    \n    <!-- Begin Jekyll SEO tag v2.8.0 -->\n<title>SQLite in production | Minimalist Django</title>\n<meta name=\"generator\" content=\"Jekyll v4.2.2\" />\n<meta property=\"og:title\" content=\"SQLite in production\" />\n<meta name=\"author\" content=\"Victor Movileanu\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta name=\"description\" content=\"How SQLite can be used in production\" />\n<meta property=\"og:description\" content=\"How SQLite can be used in production\" />\n<link rel=\"canonical\" href=\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\" />\n<meta property=\"og:url\" content=\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\" />\n<meta property=\"og:site_name\" content=\"Minimalist Django\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-06-18T00:00:00+00:00\" />\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta property=\"twitter:title\" content=\"SQLite in production\" />\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"author\":{\"@type\":\"Person\",\"name\":\"Victor Movileanu\"},\"dateModified\":\"2023-06-18T00:00:00+00:00\",\"datePublished\":\"2023-06-18T00:00:00+00:00\",\"description\":\"How SQLite can be used in production\",\"headline\":\"SQLite in production\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\"},\"publisher\":{\"@type\":\"Organization\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://minimalistdjango.com/images/django-rocket.svg\"},\"name\":\"Victor Movileanu\"},\"url\":\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\"}</script>\n<!-- End Jekyll SEO tag -->\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-PP61HM8LXR\"></script>\n<script>\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-PP61HM8LXR');\n</script>\n\n  \n\n  <script>\n    /* Cut the mustard */\n    if ( 'querySelector' in document && 'addEventListener' in window ) {\n      document.documentElement.className = document.documentElement.className.replace(/\\bno-js\\b/g, '') + 'js';\n    }\n  </script>\n\n  <link rel=\"stylesheet\" href=\"/assets/css/main.css\">\n  <link rel=\"stylesheet\" href=\"/assets/css/skins/default.css\">\n  <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Minimalist Django\" href=\"/feed.xml\">\n<!-- start custom head snippets -->\n\n<!-- insert favicons. use http://realfavicongenerator.net/ -->\n\n<!-- end custom head snippets -->\n\n</head>\n\n\n  <body class=\"layout--post  sqlite-in-production\">\n    <nav class=\"skip-links\">\n  <h2 class=\"screen-reader-text\">Skip links</h2>\n  <ul>\n    <li><a href=\"#primary-nav\" class=\"screen-reader-shortcut\">Skip to primary navigation</a></li>\n    <li><a href=\"#main\" class=\"screen-reader-shortcut\">Skip to content</a></li>\n    <li><a href=\"#footer\" class=\"screen-reader-shortcut\">Skip to footer</a></li>\n  </ul>\n</nav>\n\n    \n  <div class=\"navigation-wrapper\">\n    <a href=\"#menu-toggle\" id=\"menu-toggle\">Menu</a>\n    <nav id=\"primary-nav\" class=\"site-nav animated drop\">\n      <ul><li><a href=\"/\">Home</a></li><li><a href=\"/categories/\">Categories</a></li><li><a href=\"/tags/\">Tags</a></li><li><a href=\"/about/\">About</a></li></ul>\n    </nav>\n  </div><!-- /.navigation-wrapper -->\n\n\n    <header class=\"masthead\">\n  <div class=\"wrap\">\n    \n      <a href=\"/\" class=\"site-logo\" rel=\"home\" title=\"Minimalist Django\">\n        <img src=\"/images/django-rocket.svg\" class=\"site-logo-img animated fadeInDown\" alt=\"Minimalist Django\">\n      </a>\n    \n    \n    \n      \n        <div class=\"site-title animated fadeIn\"><a href=\"/\">Minimalist Django</a></div>\n      \n      <p class=\"site-description animated fadeIn\" itemprop=\"description\">The minimalist way of web development</p>\n    \n  </div>\n</header><!-- /.masthead -->\n\n\n    <main id=\"main\" class=\"main-content\" aria-label=\"Content\">\n  <article class=\"h-entry\">\n    \n\n    <div class=\"page-wrapper\">\n      <header class=\"page-header\">\n        \n        \n          <h1 id=\"page-title\" class=\"page-title p-name\">SQLite in production\n</h1>\n        \n      </header>\n\n      <div class=\"page-sidebar\">\n        <div class=\"page-author h-card p-author\"><img src=\"/images/me.jpg\" class=\"author-avatar u-photo\" alt=\"Victor Movileanu\"><div class=\"author-info\"><div class=\"author-name\">\n        <span class=\"p-name\">Victor Movileanu</span>\n      </div><ul class=\"author-links\"><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://twitter.com/ViggieSmalls5\"><i class=\"fab fa-twitter-square fa-lg\" title=\"Twitter\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://instagram.com/vickym.rulez\"><i class=\"fab fa-instagram fa-lg\" title=\"Instagram\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://github.com/movileanuv\"><i class=\"fab fa-github-square fa-lg\" title=\"GitHub\"></i></a>\n          </li></ul>\n    <time class=\"page-date dt-published\" datetime=\"2023-06-18T00:00:00+00:00\"><a class=\"u-url\" href=\"\">June 18, 2023</a>\n</time>\n\n  </div>\n</div>\n\n        \n  <h3 class=\"page-taxonomies-title\">Categories</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">Production deployment</li>\n  </ul>\n\n\n        \n  <h3 class=\"page-taxonomies-title\">Tags</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">SQLite</li><li class=\"page-taxonomy\">databases</li><li class=\"page-taxonomy\">DjangoCon</li>\n  </ul>\n\n\n      </div>\n\n      <div class=\"page-content\">\n        <div class=\"e-content\">\n          <p>People say <em>SQLite</em> is a database that is unsuitable for production use because of low performance, inability to handle\nmultiple concurrent writes, and other misconceptions.\nThis article is inspired by a talk at <a href=\"https://youtu.be/yTicYJDT1zE\"><em>DjangoCon 2023</em></a>  and an episode of <a href=\"https://changelog.com/podcast/433\"><em>The Changelog</em></a>.</p>\n\n<iframe class=\"youtube-iframe\" src=\"https://www.youtube.com/embed/yTicYJDT1zE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n\n<h2 id=\"video-summary\">Video summary</h2>\n<ul>\n  <li>SQLite is already in production. You can already see how many applications use SQLite on your computer with this command:\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  find / <span class=\"se\">\\(</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.db\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite3\"</span> <span class=\"se\">\\)</span> <span class=\"nt\">-type</span> f <span class=\"nt\">-exec</span> file <span class=\"o\">{}</span> <span class=\"se\">\\;</span> 2&gt;/dev/null | <span class=\"nb\">grep </span>SQLite\n</code></pre></div>    </div>\n  </li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=682\">11:20</a> it is a serverless database, which means you don’t need to configure an extra host, manage access by your application server, etc.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=866\">14:25</a> No performance loss because of network latency</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=931\">15:31</a> No N + 1 Query problems</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1051\">17:31</a> Concurrent writes are not a problem if you turn <a href=\"https://www.sqlite.org/wal.html\">Write-Ahead Logging</a> for your SQLite database. For this, you can execute <code class=\"language-plaintext highlighter-rouge\">sqlite3 db.sqlite3 'PRAGMA journal_mode=wal;'</code> in your shell.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1142\">19:02</a> Speed up writes even more by reducing the <a href=\"https://www.sqlite.org/pragma.html#pragma_synchronous\">synchronous level</a></li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1253\">20:53</a> You can easily back up the SQLite database with <a href=\"https://litestream.io/\">Litestream</a></li>\n</ul>\n\n<h2 id=\"set-up-django-to-run-with-sqlite\">Set up Django to run with SQLite</h2>\n\n<p>When creating a new Django project, it comes with following default setting for <code class=\"language-plaintext highlighter-rouge\">DATABASES</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"ENGINE\"</span><span class=\"p\">:</span> <span class=\"s\">\"django.db.backends.sqlite3\"</span><span class=\"p\">,</span>\n        <span class=\"s\">\"NAME\"</span><span class=\"p\">:</span> <span class=\"n\">BASE_DIR</span> <span class=\"o\">/</span> <span class=\"s\">\"db.sqlite3\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You can also use <a href=\"https://github.com/jazzband/dj-database-url/\"><code class=\"language-plaintext highlighter-rouge\">dj-database-url</code></a> to configure your <code class=\"language-plaintext highlighter-rouge\">DATABASES</code> setting. In this case, the <code class=\"language-plaintext highlighter-rouge\">DATABASE_URL</code> might look like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>DATABASE_URL=sqlite:///path/to/your/database/file.sqlite3\n</code></pre></div></div>\n\n<p>Now, before you start your django project for the first time, which automatically creates a SQLite database for you, you should create it yourself first, by running:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlite3 db.sqlite3 <span class=\"s1\">'PRAGMA journal_mode=wal; PRAGMA busy_timeout = 5000;'</span>\n</code></pre></div></div>\n\n<p>The PRAGMA synchronous setting is a little bit more tricky, since it does not apply to the database, <a href=\"https://stackoverflow.com/questions/36308801/sqlite3-pragma-synchronous-not-persistent\">but to the database connection</a>.\nHence, you have to change this setting <a href=\"https://stackoverflow.com/a/6843199/5540654\">for all connections opened by the Django app</a>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.signals</span> <span class=\"kn\">import</span> <span class=\"n\">connection_created</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">activate_foreign_keys</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">vendor</span> <span class=\"o\">==</span> <span class=\"s\">'sqlite'</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n        <span class=\"n\">cursor</span><span class=\"p\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s\">'PRAGMA synchronous=1;'</span><span class=\"p\">)</span>\n\n<span class=\"n\">connection_created</span><span class=\"p\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">activate_foreign_keys</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"how-to-configure-litestream-to-back-up-your-database-to-s3\">How to configure Litestream to back up your Database to S3</h2>\n\n<ul>\n  <li><a href=\"https://litestream.io/install/\">Install</a></li>\n  <li><a href=\"https://litestream.io/guides/s3/\">Replicating to Amazon S3</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Running as a Systemd service</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Tips &amp; Caveats</a></li>\n</ul>\n\n<h2 id=\"further-reading\">Further reading</h2>\n<ul>\n  <li>https://tailscale.com/blog/database-for-2022/</li>\n  <li>https://blog.expensify.com/2018/01/08/scaling-sqlite-to-4m-qps-on-a-single-server/</li>\n  <li>https://simonwillison.net/2022/Oct/23/datasette-gunicorn/</li>\n  <li>https://github.com/tomdyson/django-sqlite-load-tests</li>\n</ul>\n\n\n        </div>\n\n        \n\n        \n\n        <nav class=\"page-pagination\" role=\"navigation\">\n  \n    <a class=\"page-previous\" href=\"/development/2023/06/14/set-up-a-django-project.html\">\n      <h4 class=\"page-pagination-label\">Previous</h4>\n      <span class=\"page-pagination-title\">\n        <i class=\"fas fa-arrow-left\"></i> How to set up a Django project\n\n      </span>\n    </a>\n  \n\n  \n    <a class=\"page-next\" href=\"/production%20deployment/2023/06/23/gunicorn.html\">\n      <h4 class=\"page-pagination-label\">Next</h4>\n      <span class=\"page-pagination-title\">\n        Gunicorn from scratch\n <i class=\"fas fa-arrow-right\"></i>\n      </span>\n    </a>\n  \n</nav>\n\n      </div>\n    </div>\n  </article>\n</main>\n\n\n    <footer id=\"footer\" class=\"site-footer\">\n  <!-- start custom footer snippets -->\n\n<!-- end custom footer snippets -->\n<div class=\"copyright\">\n    \n      <p>&copy; 2023 Minimalist Django. Powered by <a href=\"https://jekyllrb.com\" rel=\"nofollow\">Jekyll</a> &amp; <a href=\"https://github.com/mmistakes/so-simple-theme\" rel=\"nofollow\">So Simple</a>.</p>\n    \n  </div>\n</footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n  <script src=\"/assets/js/main.min.js\"></script>\n  <script src=\"https://use.fontawesome.com/releases/v5.0.12/js/all.js\"></script>\n\n\n  </body>\n\n</html>\n","relative_path":"_posts/2023-06-14-sqlite.md","date":"2023-06-18 00:00:00 +0000","id":"/production%20deployment/2023/06/18/sqlite","excerpt":"How SQLite can be used in production","draft":false,"layout":"post","published":true,"author":"victor","slug":"sqlite","ext":".md"},"path":"_posts/2023-06-14-set-up-a-django-project.md","output":"<!DOCTYPE html>\n<!--\n    So Simple Jekyll Theme 3.2.0\n    Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes\n    Free for personal and commercial use under the MIT license\n    https://github.com/mmistakes/so-simple-theme/blob/master/LICENSE\n-->\n<html lang=\"en-US\" class=\"no-js\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  \n  \n\n  \n    \n    <!-- Begin Jekyll SEO tag v2.8.0 -->\n<title>How to set up a Django project | Minimalist Django</title>\n<meta name=\"generator\" content=\"Jekyll v4.2.2\" />\n<meta property=\"og:title\" content=\"How to set up a Django project\" />\n<meta name=\"author\" content=\"Victor Movileanu\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta name=\"description\" content=\"How to start a Django project the right way\" />\n<meta property=\"og:description\" content=\"How to start a Django project the right way\" />\n<link rel=\"canonical\" href=\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\" />\n<meta property=\"og:url\" content=\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\" />\n<meta property=\"og:site_name\" content=\"Minimalist Django\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-06-14T10:00:00+00:00\" />\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta property=\"twitter:title\" content=\"How to set up a Django project\" />\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"author\":{\"@type\":\"Person\",\"name\":\"Victor Movileanu\"},\"dateModified\":\"2023-06-14T10:00:00+00:00\",\"datePublished\":\"2023-06-14T10:00:00+00:00\",\"description\":\"How to start a Django project the right way\",\"headline\":\"How to set up a Django project\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\"},\"publisher\":{\"@type\":\"Organization\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://minimalistdjango.com/images/django-rocket.svg\"},\"name\":\"Victor Movileanu\"},\"url\":\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\"}</script>\n<!-- End Jekyll SEO tag -->\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-PP61HM8LXR\"></script>\n<script>\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-PP61HM8LXR');\n</script>\n\n  \n\n  <script>\n    /* Cut the mustard */\n    if ( 'querySelector' in document && 'addEventListener' in window ) {\n      document.documentElement.className = document.documentElement.className.replace(/\\bno-js\\b/g, '') + 'js';\n    }\n  </script>\n\n  <link rel=\"stylesheet\" href=\"/assets/css/main.css\">\n  <link rel=\"stylesheet\" href=\"/assets/css/skins/default.css\">\n  <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Minimalist Django\" href=\"/feed.xml\">\n<!-- start custom head snippets -->\n\n<!-- insert favicons. use http://realfavicongenerator.net/ -->\n\n<!-- end custom head snippets -->\n\n</head>\n\n\n  <body class=\"layout--post  how-to-set-up-a-django-project\">\n    <nav class=\"skip-links\">\n  <h2 class=\"screen-reader-text\">Skip links</h2>\n  <ul>\n    <li><a href=\"#primary-nav\" class=\"screen-reader-shortcut\">Skip to primary navigation</a></li>\n    <li><a href=\"#main\" class=\"screen-reader-shortcut\">Skip to content</a></li>\n    <li><a href=\"#footer\" class=\"screen-reader-shortcut\">Skip to footer</a></li>\n  </ul>\n</nav>\n\n    \n  <div class=\"navigation-wrapper\">\n    <a href=\"#menu-toggle\" id=\"menu-toggle\">Menu</a>\n    <nav id=\"primary-nav\" class=\"site-nav animated drop\">\n      <ul><li><a href=\"/\">Home</a></li><li><a href=\"/categories/\">Categories</a></li><li><a href=\"/tags/\">Tags</a></li><li><a href=\"/about/\">About</a></li></ul>\n    </nav>\n  </div><!-- /.navigation-wrapper -->\n\n\n    <header class=\"masthead\">\n  <div class=\"wrap\">\n    \n      <a href=\"/\" class=\"site-logo\" rel=\"home\" title=\"Minimalist Django\">\n        <img src=\"/images/django-rocket.svg\" class=\"site-logo-img animated fadeInDown\" alt=\"Minimalist Django\">\n      </a>\n    \n    \n    \n      \n        <div class=\"site-title animated fadeIn\"><a href=\"/\">Minimalist Django</a></div>\n      \n      <p class=\"site-description animated fadeIn\" itemprop=\"description\">The minimalist way of web development</p>\n    \n  </div>\n</header><!-- /.masthead -->\n\n\n    <main id=\"main\" class=\"main-content\" aria-label=\"Content\">\n  <article class=\"h-entry\">\n    \n\n    <div class=\"page-wrapper\">\n      <header class=\"page-header\">\n        \n        \n          <h1 id=\"page-title\" class=\"page-title p-name\">How to set up a Django project\n</h1>\n        \n      </header>\n\n      <div class=\"page-sidebar\">\n        <div class=\"page-author h-card p-author\"><img src=\"/images/me.jpg\" class=\"author-avatar u-photo\" alt=\"Victor Movileanu\"><div class=\"author-info\"><div class=\"author-name\">\n        <span class=\"p-name\">Victor Movileanu</span>\n      </div><ul class=\"author-links\"><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://twitter.com/ViggieSmalls5\"><i class=\"fab fa-twitter-square fa-lg\" title=\"Twitter\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://instagram.com/vickym.rulez\"><i class=\"fab fa-instagram fa-lg\" title=\"Instagram\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://github.com/movileanuv\"><i class=\"fab fa-github-square fa-lg\" title=\"GitHub\"></i></a>\n          </li></ul>\n    <time class=\"page-date dt-published\" datetime=\"2023-06-14T10:00:00+00:00\"><a class=\"u-url\" href=\"\">June 14, 2023</a>\n</time>\n\n  </div>\n</div>\n\n        \n  <h3 class=\"page-taxonomies-title\">Categories</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">Development</li>\n  </ul>\n\n\n        \n  <h3 class=\"page-taxonomies-title\">Tags</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">pyenv</li><li class=\"page-taxonomy\">poetry</li>\n  </ul>\n\n\n      </div>\n\n      <div class=\"page-content\">\n        <div class=\"e-content\">\n          <p><img src=\"/images/xkcd-startling.png\" alt=\"xkcd meme on regular repetitive tasks\" />\n<a href=\"https://xkcd.com/354/\" target=\"_blank\">https://xkcd.com/354/</a></p>\n\n<h2 id=\"install-pyenv\">Choose your Python version with <em>pyenv</em></h2>\n\n<p><a href=\"https://github.com/pyenv/pyenv#installation\" target=\"_blank\"><em>Pyenv</em></a> allows you to easily manage multiple Python versions on your system, which is particularly useful when working with different Django projects that require specific versions of Python.</p>\n\n<p>You can easily install pyenv with curl:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl https://pyenv.run | bash\n</code></pre></div></div>\n\n<p>Then add the following lines to your <code class=\"language-plaintext highlighter-rouge\">.bashrc</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">export </span><span class=\"nv\">PYENV_ROOT</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$HOME</span><span class=\"s2\">/.pyenv\"</span>\n<span class=\"nb\">command</span> <span class=\"nt\">-v</span> pyenv <span class=\"o\">&gt;</span>/dev/null <span class=\"o\">||</span> <span class=\"nb\">export </span><span class=\"nv\">PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$PYENV_ROOT</span><span class=\"s2\">/bin:</span><span class=\"nv\">$PATH</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv virtualenv-init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n</code></pre></div></div>\n\n<p>To use a specific python version for your project, execute</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pyenv <span class=\"nb\">install </span>3.11.3\npyenv <span class=\"nb\">local </span>3.11.3\n</code></pre></div></div>\n\n<p>This will create a <code class=\"language-plaintext highlighter-rouge\">.python-version</code> file in your project’s director, that specifies the currently used python version.\nYou can verify by executing <code class=\"language-plaintext highlighter-rouge\">python --version</code>.</p>\n\n<h2 id=\"manage-your-dependencies-with-poetry\">Manage your dependencies with <em>poetry</em></h2>\n\n<p>Dependency management is important because external libraries can change over time, and upgrading them without proper management can potentially crash your application.\n<a href=\"https://python-poetry.org/docs/#installation\" target=\"_blank\"><em>Poetry</em></a> incorporates everything you need to isolate your project and manage your dependencies.</p>\n\n<p>You can install poetry outside your project’s directory with</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-sSL</span> https://install.python-poetry.org | python3 -\n</code></pre></div></div>\n\n<p>Here are some useful commands that you will always come across:</p>\n\n<ol>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#init\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry init</code></a> you can easily generate a new <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file inside the current directory, that keeps track of the project dependencies</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#add\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry add &lt;package-name&gt;</code></a> you can add a new package to your <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file and immediately install it in your virtual environment</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#shell\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry shell</code></a> you activate your virtual environment and run it isolated from other projects</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#export\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry export</code></a> you can write your dependencies in a format that can be easily installed with <a href=\"https://pip.pypa.io/en/stable/installation/\">pip</a></li>\n</ol>\n\n<blockquote class=\"tip-content\">\n  <h2 id=\"-tip\">🤫 Tip</h2>\n  <p>Create a <code class=\"language-plaintext highlighter-rouge\">requirements/</code> directory to separate development, test and production requirements.</p>\n</blockquote>\n\n<h2 id=\"tldr\">TL;DR</h2>\n\n<p>Here is a quick run-through on how to set up a new Django project after having successfully installed <em>pyenv</em> and <em>poetry</em>:</p>\n\n<script src=\"https://gist.github.com/movileanuv/56fcce4d2351ab096cbd10e97211782f.js\"></script>\n\n<h2 id=\"further-reading\">Further Reading</h2>\n\n<ul>\n  <li><a href=\"https://realpython.com/dependency-management-python-poetry/\" target=\"_blank\">RealPython</a>: More details on how to work with poetry</li>\n  <li><a href=\"https://www.b-list.org/weblog/2022/may/13/boring-python-dependencies/\" target=\"_blank\">Boring Python: dependency management</a>: Great article that describes how to work with tools like “pip” and “venv” and what you have to look out for</li>\n  <li><a href=\"https://www.youtube.com/watch?v=-YEUFGFHWgQ\">Youtube: Bootstrapping Your Local Python Environment</a>:\nJust a regular video discussing python environments, but I like this one: <strong>Don’t use <code class=\"language-plaintext highlighter-rouge\">sudo</code> when you set up your python envrionment</strong></li>\n</ul>\n\n\n        </div>\n\n        \n\n        \n\n        <nav class=\"page-pagination\" role=\"navigation\">\n  \n    <a class=\"page-previous\" href=\"/production%20deployment/2023/06/10/virtualbox.html\">\n      <h4 class=\"page-pagination-label\">Previous</h4>\n      <span class=\"page-pagination-title\">\n        <i class=\"fas fa-arrow-left\"></i> Set up a VirtualBox VM\n\n      </span>\n    </a>\n  \n\n  \n    <a class=\"page-next\" href=\"/production%20deployment/2023/06/18/sqlite.html\">\n      <h4 class=\"page-pagination-label\">Next</h4>\n      <span class=\"page-pagination-title\">\n        SQLite in production\n <i class=\"fas fa-arrow-right\"></i>\n      </span>\n    </a>\n  \n</nav>\n\n      </div>\n    </div>\n  </article>\n</main>\n\n\n    <footer id=\"footer\" class=\"site-footer\">\n  <!-- start custom footer snippets -->\n\n<!-- end custom footer snippets -->\n<div class=\"copyright\">\n    \n      <p>&copy; 2023 Minimalist Django. Powered by <a href=\"https://jekyllrb.com\" rel=\"nofollow\">Jekyll</a> &amp; <a href=\"https://github.com/mmistakes/so-simple-theme\" rel=\"nofollow\">So Simple</a>.</p>\n    \n  </div>\n</footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n  <script src=\"/assets/js/main.min.js\"></script>\n  <script src=\"https://use.fontawesome.com/releases/v5.0.12/js/all.js\"></script>\n\n\n  </body>\n\n</html>\n","relative_path":"_posts/2023-06-14-set-up-a-django-project.md","date":"2023-06-14 10:00:00 +0000","id":"/development/2023/06/14/set-up-a-django-project","excerpt":"How to start a Django project the right way","draft":false,"layout":"post","published":true,"author":"victor","slug":"set-up-a-django-project","ext":".md"},"path":"_posts/2023-06-10-virtualbox.md","output":"<!DOCTYPE html>\n<!--\n    So Simple Jekyll Theme 3.2.0\n    Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes\n    Free for personal and commercial use under the MIT license\n    https://github.com/mmistakes/so-simple-theme/blob/master/LICENSE\n-->\n<html lang=\"en-US\" class=\"no-js\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  \n  \n\n  \n    \n    <!-- Begin Jekyll SEO tag v2.8.0 -->\n<title>Set up a VirtualBox VM | Minimalist Django</title>\n<meta name=\"generator\" content=\"Jekyll v4.2.2\" />\n<meta property=\"og:title\" content=\"Set up a VirtualBox VM\" />\n<meta name=\"author\" content=\"Victor Movileanu\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta name=\"description\" content=\"How to run a virtual host locally to test your automatic provisioning\" />\n<meta property=\"og:description\" content=\"How to run a virtual host locally to test your automatic provisioning\" />\n<link rel=\"canonical\" href=\"https://minimalistdjango.com/production%20deployment/2023/06/10/virtualbox.html\" />\n<meta property=\"og:url\" content=\"https://minimalistdjango.com/production%20deployment/2023/06/10/virtualbox.html\" />\n<meta property=\"og:site_name\" content=\"Minimalist Django\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-06-10T00:00:00+00:00\" />\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta property=\"twitter:title\" content=\"Set up a VirtualBox VM\" />\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"author\":{\"@type\":\"Person\",\"name\":\"Victor Movileanu\"},\"dateModified\":\"2023-06-10T00:00:00+00:00\",\"datePublished\":\"2023-06-10T00:00:00+00:00\",\"description\":\"How to run a virtual host locally to test your automatic provisioning\",\"headline\":\"Set up a VirtualBox VM\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://minimalistdjango.com/production%20deployment/2023/06/10/virtualbox.html\"},\"publisher\":{\"@type\":\"Organization\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://minimalistdjango.com/images/django-rocket.svg\"},\"name\":\"Victor Movileanu\"},\"url\":\"https://minimalistdjango.com/production%20deployment/2023/06/10/virtualbox.html\"}</script>\n<!-- End Jekyll SEO tag -->\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-PP61HM8LXR\"></script>\n<script>\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-PP61HM8LXR');\n</script>\n\n  \n\n  <script>\n    /* Cut the mustard */\n    if ( 'querySelector' in document && 'addEventListener' in window ) {\n      document.documentElement.className = document.documentElement.className.replace(/\\bno-js\\b/g, '') + 'js';\n    }\n  </script>\n\n  <link rel=\"stylesheet\" href=\"/assets/css/main.css\">\n  <link rel=\"stylesheet\" href=\"/assets/css/skins/default.css\">\n  <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Minimalist Django\" href=\"/feed.xml\">\n<!-- start custom head snippets -->\n\n<!-- insert favicons. use http://realfavicongenerator.net/ -->\n\n<!-- end custom head snippets -->\n\n</head>\n\n\n  <body class=\"layout--post  set-up-a-virtualbox-vm\">\n    <nav class=\"skip-links\">\n  <h2 class=\"screen-reader-text\">Skip links</h2>\n  <ul>\n    <li><a href=\"#primary-nav\" class=\"screen-reader-shortcut\">Skip to primary navigation</a></li>\n    <li><a href=\"#main\" class=\"screen-reader-shortcut\">Skip to content</a></li>\n    <li><a href=\"#footer\" class=\"screen-reader-shortcut\">Skip to footer</a></li>\n  </ul>\n</nav>\n\n    \n  <div class=\"navigation-wrapper\">\n    <a href=\"#menu-toggle\" id=\"menu-toggle\">Menu</a>\n    <nav id=\"primary-nav\" class=\"site-nav animated drop\">\n      <ul><li><a href=\"/\">Home</a></li><li><a href=\"/categories/\">Categories</a></li><li><a href=\"/tags/\">Tags</a></li><li><a href=\"/about/\">About</a></li></ul>\n    </nav>\n  </div><!-- /.navigation-wrapper -->\n\n\n    <header class=\"masthead\">\n  <div class=\"wrap\">\n    \n      <a href=\"/\" class=\"site-logo\" rel=\"home\" title=\"Minimalist Django\">\n        <img src=\"/images/django-rocket.svg\" class=\"site-logo-img animated fadeInDown\" alt=\"Minimalist Django\">\n      </a>\n    \n    \n    \n      \n        <div class=\"site-title animated fadeIn\"><a href=\"/\">Minimalist Django</a></div>\n      \n      <p class=\"site-description animated fadeIn\" itemprop=\"description\">The minimalist way of web development</p>\n    \n  </div>\n</header><!-- /.masthead -->\n\n\n    <main id=\"main\" class=\"main-content\" aria-label=\"Content\">\n  <article class=\"h-entry\">\n    \n\n    <div class=\"page-wrapper\">\n      <header class=\"page-header\">\n        \n        \n          <h1 id=\"page-title\" class=\"page-title p-name\">Set up a VirtualBox VM\n</h1>\n        \n      </header>\n\n      <div class=\"page-sidebar\">\n        <div class=\"page-author h-card p-author\"><img src=\"/images/me.jpg\" class=\"author-avatar u-photo\" alt=\"Victor Movileanu\"><div class=\"author-info\"><div class=\"author-name\">\n        <span class=\"p-name\">Victor Movileanu</span>\n      </div><ul class=\"author-links\"><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://twitter.com/ViggieSmalls5\"><i class=\"fab fa-twitter-square fa-lg\" title=\"Twitter\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://instagram.com/vickym.rulez\"><i class=\"fab fa-instagram fa-lg\" title=\"Instagram\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://github.com/movileanuv\"><i class=\"fab fa-github-square fa-lg\" title=\"GitHub\"></i></a>\n          </li></ul>\n    <time class=\"page-date dt-published\" datetime=\"2023-06-10T00:00:00+00:00\"><a class=\"u-url\" href=\"\">June 10, 2023</a>\n</time>\n\n  </div>\n</div>\n\n        \n  <h3 class=\"page-taxonomies-title\">Categories</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">Production deployment</li>\n  </ul>\n\n\n        \n  <h3 class=\"page-taxonomies-title\">Tags</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">VirtualBox</li><li class=\"page-taxonomy\">ansible</li>\n  </ul>\n\n\n      </div>\n\n      <div class=\"page-content\">\n        <div class=\"e-content\">\n          <p>Having a virtual machine (VM) locally is extremely useful to test provisioning your remote host.\nThis can be really useful when you plan to host your application on an external provider like <a href=\"https://m.do.co/c/c40e38c3b079\" rel=\"sponsored\" target=\"_blank\">DigitalOcean</a>.\nTogether with ansible it will help you learn how to automate your deployment.</p>\n\n<h2 id=\"setup-virtualbox\">Setup VirtualBox</h2>\n\n<ol>\n  <li>Download a Ubuntu iso image and use it to set up a VM.</li>\n  <li>Install <a href=\"https://www.virtualbox.org/\">VirtualBox</a>.\n    <ul>\n      <li><strong>Create a virtual machine</strong>. It is important to <strong>select “Bridged Adapter” in the Network options</strong>. This will allow your host to communicate with the VM via TCP/IP. Configure other options (memory, disk size, etc.) as desired.</li>\n      <li>Optionally, I would suggest to <strong>install the Guest Additions</strong>. This allows you to resize the screen to the window size. First, select from the menu “Insert Guest Additions CD”, then after mounting it you need to execute <code class=\"language-plaintext highlighter-rouge\">autorun.sh</code>. After reboot you can activate from the menu “View &gt; Autoresize Guest Display”</li>\n      <li>Optionally, I would also activate the <strong>bidirectional Drag and Drop</strong> from the menu.</li>\n    </ul>\n  </li>\n  <li>Next, you need to <strong>add your user to the sudoers group</strong>, which is not done by default on installation. For this, you need to follow <a href=\"https://superuser.com/questions/1623376/how-can-i-make-my-own-account-a-sudoers-on-virtualbox/1755286#1755286\">these instructions</a>:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>su -\nsudo adduser &lt;username&gt; sudo\n</code></pre></div>    </div>\n    <p>The root password is the same password as the one you selected for your user in the installation step.</p>\n  </li>\n  <li>Next, you need to allow the VM user to execute <code class=\"language-plaintext highlighter-rouge\">sudo</code> without being prompted for a password. \nThis will allow the execution of the <strong>ansible</strong> tasks that require superuser privilges, without being prompted for a password.\nFor this, on your VM, create a new file <code class=\"language-plaintext highlighter-rouge\">/etc/sudoers.d/&lt;username&gt;</code> inside the <code class=\"language-plaintext highlighter-rouge\">/etc/sudoers.d</code> directory with following content:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;username&gt; ALL=(ALL) NOPASSWD:ALL\n</code></pre></div>    </div>\n    <p>This is not really safe, and you could be more specific with the permissions (e.g. <code class=\"language-plaintext highlighter-rouge\">ALL = NOPASSWD: /bin/apt, /bin/apt-get</code> …), but we don’t want to mess around with security at this point.</p>\n  </li>\n  <li>Next, you want to install an ssh server on your machine, so you can access it from your client via ssh. \nFor this, execute the following commands:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo apt-get install openssh-server\nsudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bck\negrep -v \"^$|^#\" /etc/ssh/sshd_config | sudo tee /etc/ssh/sshd_config\necho \"Port 22\" | sudo tee -a /etc/ssh/sshd_config\nsudo systemctl enable ssh --now\n</code></pre></div>    </div>\n    <p>Explanation:</p>\n    <ul>\n      <li>The first line installs the ssh server</li>\n      <li>The second one copies the default configuration of the ssh server to a separate file as a backup and for later reference</li>\n      <li>The third line only extracts the lines in the original file that are not blank lines or comments, so we can only see the configured variables at one glance</li>\n      <li>The fourth line opens port 22 for ssh connections. For security reasons you could change this to any other port between 1024 and 65536, so attackers have a harder time to guess the correct port</li>\n      <li>The last line finally starts the ssh server and enables it to launch on startup</li>\n    </ul>\n  </li>\n  <li>Next, you need to generate an ssh key on your host, and copy it to the VM with\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ssh-copy-id -i ~/.ssh/id_ed25519.pub &lt;username&gt;@&lt;VM IP Address&gt; -p 22\n</code></pre></div>    </div>\n  </li>\n</ol>\n\n<h2 id=\"setup-ansible\">Setup Ansible</h2>\n\n<p>First things first, you need to install <em>Ansible</em> on your local machine. \nI would recommend to install globally, using <em>pip</em>, but the one provided by your local <em>pyenv</em> installation.\nYou could also install it with your package manager, but it might not be the latest version and would be harder to upgrade.</p>\n\n<p>Let’s take a look at following two files: our inventory <strong>development</strong> and our playbook <strong>playbook.yml</strong>:</p>\n\n<script src=\"https://gist.github.com/movileanuv/835a2c5e287dd1ce5b192da7f503dd3b.js\"></script>\n\n<p>The inventory specifies a hostname that is addressed in the playbook as <code class=\"language-plaintext highlighter-rouge\">hosts: vbox</code>. This tells Ansible which hosts to run this playbook on.\nThere are three other parameters specified for the host:</p>\n<ul>\n  <li><strong>ansible_host</strong>: this is the IP address of the node that ansible will ssh to to execute the playbook</li>\n  <li><strong>ansible_port</strong>: this is the port for the ssh connection</li>\n  <li><strong>ansible_become</strong>: this instructs ansible to become a specific user on the remote host during playbook execution. By default this is <strong>root</strong>. Since most of the commands require superuser privileges, I would rather specify it here than for each task repeatedly, and only in case I need less privileges to perform an action, I specify it per task level.</li>\n</ul>\n\n<p>The playbook goes through the installation process of pyenv step by step</p>\n<ol>\n  <li>It uptates the apt packages list (for debian/ubuntu obviously)</li>\n  <li>It installs the packages required by <em>pyenv</em> for building</li>\n  <li>It installs <em>pyenv</em> via an install script</li>\n  <li>It updates the <code class=\"language-plaintext highlighter-rouge\">.profile</code> of the user to initialize <em>pyenv</em> correctly.</li>\n</ol>\n\n<p>There is a required environment variable ``, that can be specified with the flag <code class=\"language-plaintext highlighter-rouge\">-e</code> on playbook execution, which controls for which user <em>pyenv</em> should be installed. Here is how you would execute the playbook:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook <span class=\"nt\">-i</span> development <span class=\"nt\">-e</span> <span class=\"nv\">user</span><span class=\"o\">=</span>victor playbook.yml\n</code></pre></div></div>\n\n<p>This command will install <em>pyenv</em> for the specified user on the VM and you can check it by logging in as the user on the VM and typing <code class=\"language-plaintext highlighter-rouge\">pyenv</code> into the terminal, which should output all <em>pyenv</em> actions available.</p>\n\n<h2 id=\"further-reading\">Further reading:</h2>\n\n<ul>\n  <li><a href=\"https://forums.virtualbox.org/viewtopic.php?f=35&amp;t=50661\" target=\"_blank\">Resize the Virtual Drive of a VM</a>: By default, the VM might not have enough hard disk space. So this command might be pretty helpful to resize it to the desired size:\n  <code class=\"language-plaintext highlighter-rouge\">VBoxManage modifyhd &lt;absolute path including the name and extension&gt; --resize 20480</code></li>\n  <li><a href=\"https://docs.ansible.com/ansible/latest/tips_tricks/sample_setup.html#sample-setup\" target=\"_blank\">Sample Ansible setup</a>: Suggestions how to organize your inventories, playbooks and roles.</li>\n</ul>\n\n<p><a href=\"https://www.digitalocean.com/?refcode=c40e38c3b079&amp;utm_campaign=Referral_Invite&amp;utm_medium=Referral_Program&amp;utm_source=badge\" rel=\"sponsored\" target=\"_blank\"><img src=\"https://web-platforms.sfo2.cdn.digitaloceanspaces.com/WWW/Badge%201.svg\" alt=\"DigitalOcean Referral Badge\" /></a></p>\n\n        </div>\n\n        \n\n        \n\n        <nav class=\"page-pagination\" role=\"navigation\">\n  \n\n  \n    <a class=\"page-next\" href=\"/development/2023/06/14/set-up-a-django-project.html\">\n      <h4 class=\"page-pagination-label\">Next</h4>\n      <span class=\"page-pagination-title\">\n        How to set up a Django project\n <i class=\"fas fa-arrow-right\"></i>\n      </span>\n    </a>\n  \n</nav>\n\n      </div>\n    </div>\n  </article>\n</main>\n\n\n    <footer id=\"footer\" class=\"site-footer\">\n  <!-- start custom footer snippets -->\n\n<!-- end custom footer snippets -->\n<div class=\"copyright\">\n    \n      <p>&copy; 2023 Minimalist Django. Powered by <a href=\"https://jekyllrb.com\" rel=\"nofollow\">Jekyll</a> &amp; <a href=\"https://github.com/mmistakes/so-simple-theme\" rel=\"nofollow\">So Simple</a>.</p>\n    \n  </div>\n</footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n  <script src=\"/assets/js/main.min.js\"></script>\n  <script src=\"https://use.fontawesome.com/releases/v5.0.12/js/all.js\"></script>\n\n\n  </body>\n\n</html>\n","relative_path":"_posts/2023-06-10-virtualbox.md","date":"2023-06-10 00:00:00 +0000","id":"/production%20deployment/2023/06/10/virtualbox","excerpt":"How to run a virtual host locally to test your automatic provisioning","draft":false,"layout":"post","published":true,"author":"victor","slug":"virtualbox","ext":".md"},
        "date": "2023-06-10 00:00:00 +0000",
        "date_humanized": "June 10, 2023"
      },{
        "title": "How to set up a Django project",
        "excerpt":"https://xkcd.com/354/ Choose your Python version with pyenv Pyenv allows you to easily manage multiple Python versions on your system, which is particularly useful when working with different Django projects that require specific versions of Python. You can easily install pyenv with curl: curl https://pyenv.run | bashThen add the following lines to your .bashrc: export PYENV_ROOT=\"$HOME/.pyenv\"command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"eval \"$(pyenv init -)\"eval \"$(pyenv virtualenv-init -)\"To use a specific python version for your project, execute pyenv install 3.11.3pyenv local 3.11.3This will create a .python-version file in your project’s director, that specifies the currently used python version.You can verify by executing python --version. Manage your dependencies with poetry Dependency management is important because external libraries can change over time, and upgrading them without proper management can potentially crash your application.Poetry incorporates everything you need to isolate your project and manage your dependencies. You can install poetry outside your project’s directory with curl -sSL https://install.python-poetry.org | python3 -Here are some useful commands that you will always come across:   With poetry init you can easily generate a new pyproject.toml file inside the current directory, that keeps track of the project dependencies  With poetry add &lt;package-name&gt; you can add a new package to your pyproject.toml file and immediately install it in your virtual environment  With poetry shell you activate your virtual environment and run it isolated from other projects  With poetry export you can write your dependencies in a format that can be easily installed with pip  🤫 Tip   Create a requirements/ directory to separate development, test and production requirements. TL;DR Here is a quick run-through on how to set up a new Django project after having successfully installed pyenv and poetry: Further Reading   RealPython: More details on how to work with poetry  Boring Python: dependency management: Great article that describes how to work with tools like “pip” and “venv” and what you have to look out for  Youtube: Bootstrapping Your Local Python Environment:Just a regular video discussing python environments, but I like this one: Don’t use sudo when you set up your python envrionment","summary": "How to start a Django project the right way",
        "categories": ["Development"],
        "tags": ["pyenv","poetry"],
        "url": "https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html",
        // "meta": {"title":"How to set up a Django project","content":"<p><img src=\"/images/xkcd-startling.png\" alt=\"xkcd meme on regular repetitive tasks\" />\n<a href=\"https://xkcd.com/354/\" target=\"_blank\">https://xkcd.com/354/</a></p>\n\n<h2 id=\"install-pyenv\">Choose your Python version with <em>pyenv</em></h2>\n\n<p><a href=\"https://github.com/pyenv/pyenv#installation\" target=\"_blank\"><em>Pyenv</em></a> allows you to easily manage multiple Python versions on your system, which is particularly useful when working with different Django projects that require specific versions of Python.</p>\n\n<p>You can easily install pyenv with curl:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl https://pyenv.run | bash\n</code></pre></div></div>\n\n<p>Then add the following lines to your <code class=\"language-plaintext highlighter-rouge\">.bashrc</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">export </span><span class=\"nv\">PYENV_ROOT</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$HOME</span><span class=\"s2\">/.pyenv\"</span>\n<span class=\"nb\">command</span> <span class=\"nt\">-v</span> pyenv <span class=\"o\">&gt;</span>/dev/null <span class=\"o\">||</span> <span class=\"nb\">export </span><span class=\"nv\">PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$PYENV_ROOT</span><span class=\"s2\">/bin:</span><span class=\"nv\">$PATH</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv virtualenv-init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n</code></pre></div></div>\n\n<p>To use a specific python version for your project, execute</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pyenv <span class=\"nb\">install </span>3.11.3\npyenv <span class=\"nb\">local </span>3.11.3\n</code></pre></div></div>\n\n<p>This will create a <code class=\"language-plaintext highlighter-rouge\">.python-version</code> file in your project’s director, that specifies the currently used python version.\nYou can verify by executing <code class=\"language-plaintext highlighter-rouge\">python --version</code>.</p>\n\n<h2 id=\"manage-your-dependencies-with-poetry\">Manage your dependencies with <em>poetry</em></h2>\n\n<p>Dependency management is important because external libraries can change over time, and upgrading them without proper management can potentially crash your application.\n<a href=\"https://python-poetry.org/docs/#installation\" target=\"_blank\"><em>Poetry</em></a> incorporates everything you need to isolate your project and manage your dependencies.</p>\n\n<p>You can install poetry outside your project’s directory with</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-sSL</span> https://install.python-poetry.org | python3 -\n</code></pre></div></div>\n\n<p>Here are some useful commands that you will always come across:</p>\n\n<ol>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#init\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry init</code></a> you can easily generate a new <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file inside the current directory, that keeps track of the project dependencies</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#add\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry add &lt;package-name&gt;</code></a> you can add a new package to your <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file and immediately install it in your virtual environment</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#shell\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry shell</code></a> you activate your virtual environment and run it isolated from other projects</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#export\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry export</code></a> you can write your dependencies in a format that can be easily installed with <a href=\"https://pip.pypa.io/en/stable/installation/\">pip</a></li>\n</ol>\n\n<blockquote class=\"tip-content\">\n  <h2 id=\"-tip\">🤫 Tip</h2>\n  <p>Create a <code class=\"language-plaintext highlighter-rouge\">requirements/</code> directory to separate development, test and production requirements.</p>\n</blockquote>\n\n<h2 id=\"tldr\">TL;DR</h2>\n\n<p>Here is a quick run-through on how to set up a new Django project after having successfully installed <em>pyenv</em> and <em>poetry</em>:</p>\n\n<script src=\"https://gist.github.com/movileanuv/56fcce4d2351ab096cbd10e97211782f.js\"></script>\n\n<h2 id=\"further-reading\">Further Reading</h2>\n\n<ul>\n  <li><a href=\"https://realpython.com/dependency-management-python-poetry/\" target=\"_blank\">RealPython</a>: More details on how to work with poetry</li>\n  <li><a href=\"https://www.b-list.org/weblog/2022/may/13/boring-python-dependencies/\" target=\"_blank\">Boring Python: dependency management</a>: Great article that describes how to work with tools like “pip” and “venv” and what you have to look out for</li>\n  <li><a href=\"https://www.youtube.com/watch?v=-YEUFGFHWgQ\">Youtube: Bootstrapping Your Local Python Environment</a>:\nJust a regular video discussing python environments, but I like this one: <strong>Don’t use <code class=\"language-plaintext highlighter-rouge\">sudo</code> when you set up your python envrionment</strong></li>\n</ul>\n\n","tags":["pyenv","poetry"],"categories":["Development"],"url":"/development/2023/06/14/set-up-a-django-project.html","previous":{"title":"Set up a VirtualBox VM","content":"<p>Having a virtual machine (VM) locally is extremely useful to test provisioning your remote host.\nThis can be really useful when you plan to host your application on an external provider like <a href=\"https://m.do.co/c/c40e38c3b079\" rel=\"sponsored\" target=\"_blank\">DigitalOcean</a>.\nTogether with ansible it will help you learn how to automate your deployment.</p>\n\n<h2 id=\"setup-virtualbox\">Setup VirtualBox</h2>\n\n<ol>\n  <li>Download a Ubuntu iso image and use it to set up a VM.</li>\n  <li>Install <a href=\"https://www.virtualbox.org/\">VirtualBox</a>.\n    <ul>\n      <li><strong>Create a virtual machine</strong>. It is important to <strong>select “Bridged Adapter” in the Network options</strong>. This will allow your host to communicate with the VM via TCP/IP. Configure other options (memory, disk size, etc.) as desired.</li>\n      <li>Optionally, I would suggest to <strong>install the Guest Additions</strong>. This allows you to resize the screen to the window size. First, select from the menu “Insert Guest Additions CD”, then after mounting it you need to execute <code class=\"language-plaintext highlighter-rouge\">autorun.sh</code>. After reboot you can activate from the menu “View &gt; Autoresize Guest Display”</li>\n      <li>Optionally, I would also activate the <strong>bidirectional Drag and Drop</strong> from the menu.</li>\n    </ul>\n  </li>\n  <li>Next, you need to <strong>add your user to the sudoers group</strong>, which is not done by default on installation. For this, you need to follow <a href=\"https://superuser.com/questions/1623376/how-can-i-make-my-own-account-a-sudoers-on-virtualbox/1755286#1755286\">these instructions</a>:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>su -\nsudo adduser &lt;username&gt; sudo\n</code></pre></div>    </div>\n    <p>The root password is the same password as the one you selected for your user in the installation step.</p>\n  </li>\n  <li>Next, you need to allow the VM user to execute <code class=\"language-plaintext highlighter-rouge\">sudo</code> without being prompted for a password. \nThis will allow the execution of the <strong>ansible</strong> tasks that require superuser privilges, without being prompted for a password.\nFor this, on your VM, create a new file <code class=\"language-plaintext highlighter-rouge\">/etc/sudoers.d/&lt;username&gt;</code> inside the <code class=\"language-plaintext highlighter-rouge\">/etc/sudoers.d</code> directory with following content:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;username&gt; ALL=(ALL) NOPASSWD:ALL\n</code></pre></div>    </div>\n    <p>This is not really safe, and you could be more specific with the permissions (e.g. <code class=\"language-plaintext highlighter-rouge\">ALL = NOPASSWD: /bin/apt, /bin/apt-get</code> …), but we don’t want to mess around with security at this point.</p>\n  </li>\n  <li>Next, you want to install an ssh server on your machine, so you can access it from your client via ssh. \nFor this, execute the following commands:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo apt-get install openssh-server\nsudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bck\negrep -v \"^$|^#\" /etc/ssh/sshd_config | sudo tee /etc/ssh/sshd_config\necho \"Port 22\" | sudo tee -a /etc/ssh/sshd_config\nsudo systemctl enable ssh --now\n</code></pre></div>    </div>\n    <p>Explanation:</p>\n    <ul>\n      <li>The first line installs the ssh server</li>\n      <li>The second one copies the default configuration of the ssh server to a separate file as a backup and for later reference</li>\n      <li>The third line only extracts the lines in the original file that are not blank lines or comments, so we can only see the configured variables at one glance</li>\n      <li>The fourth line opens port 22 for ssh connections. For security reasons you could change this to any other port between 1024 and 65536, so attackers have a harder time to guess the correct port</li>\n      <li>The last line finally starts the ssh server and enables it to launch on startup</li>\n    </ul>\n  </li>\n  <li>Next, you need to generate an ssh key on your host, and copy it to the VM with\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ssh-copy-id -i ~/.ssh/id_ed25519.pub &lt;username&gt;@&lt;VM IP Address&gt; -p 22\n</code></pre></div>    </div>\n  </li>\n</ol>\n\n<h2 id=\"setup-ansible\">Setup Ansible</h2>\n\n<p>First things first, you need to install <em>Ansible</em> on your local machine. \nI would recommend to install globally, using <em>pip</em>, but the one provided by your local <em>pyenv</em> installation.\nYou could also install it with your package manager, but it might not be the latest version and would be harder to upgrade.</p>\n\n<p>Let’s take a look at following two files: our inventory <strong>development</strong> and our playbook <strong>playbook.yml</strong>:</p>\n\n<script src=\"https://gist.github.com/movileanuv/835a2c5e287dd1ce5b192da7f503dd3b.js\"></script>\n\n<p>The inventory specifies a hostname that is addressed in the playbook as <code class=\"language-plaintext highlighter-rouge\">hosts: vbox</code>. This tells Ansible which hosts to run this playbook on.\nThere are three other parameters specified for the host:</p>\n<ul>\n  <li><strong>ansible_host</strong>: this is the IP address of the node that ansible will ssh to to execute the playbook</li>\n  <li><strong>ansible_port</strong>: this is the port for the ssh connection</li>\n  <li><strong>ansible_become</strong>: this instructs ansible to become a specific user on the remote host during playbook execution. By default this is <strong>root</strong>. Since most of the commands require superuser privileges, I would rather specify it here than for each task repeatedly, and only in case I need less privileges to perform an action, I specify it per task level.</li>\n</ul>\n\n<p>The playbook goes through the installation process of pyenv step by step</p>\n<ol>\n  <li>It uptates the apt packages list (for debian/ubuntu obviously)</li>\n  <li>It installs the packages required by <em>pyenv</em> for building</li>\n  <li>It installs <em>pyenv</em> via an install script</li>\n  <li>It updates the <code class=\"language-plaintext highlighter-rouge\">.profile</code> of the user to initialize <em>pyenv</em> correctly.</li>\n</ol>\n\n<p>There is a required environment variable ``, that can be specified with the flag <code class=\"language-plaintext highlighter-rouge\">-e</code> on playbook execution, which controls for which user <em>pyenv</em> should be installed. Here is how you would execute the playbook:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook <span class=\"nt\">-i</span> development <span class=\"nt\">-e</span> <span class=\"nv\">user</span><span class=\"o\">=</span>victor playbook.yml\n</code></pre></div></div>\n\n<p>This command will install <em>pyenv</em> for the specified user on the VM and you can check it by logging in as the user on the VM and typing <code class=\"language-plaintext highlighter-rouge\">pyenv</code> into the terminal, which should output all <em>pyenv</em> actions available.</p>\n\n<h2 id=\"further-reading\">Further reading:</h2>\n\n<ul>\n  <li><a href=\"https://forums.virtualbox.org/viewtopic.php?f=35&amp;t=50661\" target=\"_blank\">Resize the Virtual Drive of a VM</a>: By default, the VM might not have enough hard disk space. So this command might be pretty helpful to resize it to the desired size:\n  <code class=\"language-plaintext highlighter-rouge\">VBoxManage modifyhd &lt;absolute path including the name and extension&gt; --resize 20480</code></li>\n  <li><a href=\"https://docs.ansible.com/ansible/latest/tips_tricks/sample_setup.html#sample-setup\" target=\"_blank\">Sample Ansible setup</a>: Suggestions how to organize your inventories, playbooks and roles.</li>\n</ul>\n\n<p><a href=\"https://www.digitalocean.com/?refcode=c40e38c3b079&amp;utm_campaign=Referral_Invite&amp;utm_medium=Referral_Program&amp;utm_source=badge\" rel=\"sponsored\" target=\"_blank\"><img src=\"https://web-platforms.sfo2.cdn.digitaloceanspaces.com/WWW/Badge%201.svg\" alt=\"DigitalOcean Referral Badge\" /></a></p>\n","tags":["VirtualBox","ansible"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/10/virtualbox.html","previous":null,"collection":"posts","next":{"title":"How to set up a Django project","content":"<p><img src=\"/images/xkcd-startling.png\" alt=\"xkcd meme on regular repetitive tasks\" />\n<a href=\"https://xkcd.com/354/\" target=\"_blank\">https://xkcd.com/354/</a></p>\n\n<h2 id=\"install-pyenv\">Choose your Python version with <em>pyenv</em></h2>\n\n<p><a href=\"https://github.com/pyenv/pyenv#installation\" target=\"_blank\"><em>Pyenv</em></a> allows you to easily manage multiple Python versions on your system, which is particularly useful when working with different Django projects that require specific versions of Python.</p>\n\n<p>You can easily install pyenv with curl:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl https://pyenv.run | bash\n</code></pre></div></div>\n\n<p>Then add the following lines to your <code class=\"language-plaintext highlighter-rouge\">.bashrc</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">export </span><span class=\"nv\">PYENV_ROOT</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$HOME</span><span class=\"s2\">/.pyenv\"</span>\n<span class=\"nb\">command</span> <span class=\"nt\">-v</span> pyenv <span class=\"o\">&gt;</span>/dev/null <span class=\"o\">||</span> <span class=\"nb\">export </span><span class=\"nv\">PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$PYENV_ROOT</span><span class=\"s2\">/bin:</span><span class=\"nv\">$PATH</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv virtualenv-init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n</code></pre></div></div>\n\n<p>To use a specific python version for your project, execute</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pyenv <span class=\"nb\">install </span>3.11.3\npyenv <span class=\"nb\">local </span>3.11.3\n</code></pre></div></div>\n\n<p>This will create a <code class=\"language-plaintext highlighter-rouge\">.python-version</code> file in your project’s director, that specifies the currently used python version.\nYou can verify by executing <code class=\"language-plaintext highlighter-rouge\">python --version</code>.</p>\n\n<h2 id=\"manage-your-dependencies-with-poetry\">Manage your dependencies with <em>poetry</em></h2>\n\n<p>Dependency management is important because external libraries can change over time, and upgrading them without proper management can potentially crash your application.\n<a href=\"https://python-poetry.org/docs/#installation\" target=\"_blank\"><em>Poetry</em></a> incorporates everything you need to isolate your project and manage your dependencies.</p>\n\n<p>You can install poetry outside your project’s directory with</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-sSL</span> https://install.python-poetry.org | python3 -\n</code></pre></div></div>\n\n<p>Here are some useful commands that you will always come across:</p>\n\n<ol>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#init\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry init</code></a> you can easily generate a new <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file inside the current directory, that keeps track of the project dependencies</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#add\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry add &lt;package-name&gt;</code></a> you can add a new package to your <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file and immediately install it in your virtual environment</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#shell\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry shell</code></a> you activate your virtual environment and run it isolated from other projects</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#export\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry export</code></a> you can write your dependencies in a format that can be easily installed with <a href=\"https://pip.pypa.io/en/stable/installation/\">pip</a></li>\n</ol>\n\n<blockquote class=\"tip-content\">\n  <h2 id=\"-tip\">🤫 Tip</h2>\n  <p>Create a <code class=\"language-plaintext highlighter-rouge\">requirements/</code> directory to separate development, test and production requirements.</p>\n</blockquote>\n\n<h2 id=\"tldr\">TL;DR</h2>\n\n<p>Here is a quick run-through on how to set up a new Django project after having successfully installed <em>pyenv</em> and <em>poetry</em>:</p>\n\n<script src=\"https://gist.github.com/movileanuv/56fcce4d2351ab096cbd10e97211782f.js\"></script>\n\n<h2 id=\"further-reading\">Further Reading</h2>\n\n<ul>\n  <li><a href=\"https://realpython.com/dependency-management-python-poetry/\" target=\"_blank\">RealPython</a>: More details on how to work with poetry</li>\n  <li><a href=\"https://www.b-list.org/weblog/2022/may/13/boring-python-dependencies/\" target=\"_blank\">Boring Python: dependency management</a>: Great article that describes how to work with tools like “pip” and “venv” and what you have to look out for</li>\n  <li><a href=\"https://www.youtube.com/watch?v=-YEUFGFHWgQ\">Youtube: Bootstrapping Your Local Python Environment</a>:\nJust a regular video discussing python environments, but I like this one: <strong>Don’t use <code class=\"language-plaintext highlighter-rouge\">sudo</code> when you set up your python envrionment</strong></li>\n</ul>\n\n","tags":["pyenv","poetry"],"categories":["Development"],"url":"/development/2023/06/14/set-up-a-django-project.html","previous":{"title":"Set up a VirtualBox VM","tags":["VirtualBox","ansible"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/10/virtualbox.html","collection":"posts","path":"_posts/2023-06-10-virtualbox.md","relative_path":"_posts/2023-06-10-virtualbox.md","date":"2023-06-10 00:00:00 +0000","id":"/production%20deployment/2023/06/10/virtualbox","draft":false,"layout":"post","published":true,"author":"victor","slug":"virtualbox","ext":".md"},"collection":"posts","next":{"title":"SQLite in production","tags":["SQLite","databases","DjangoCon"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/18/sqlite.html","collection":"posts","path":"_posts/2023-06-14-sqlite.md","relative_path":"_posts/2023-06-14-sqlite.md","date":"2023-06-18 00:00:00 +0000","id":"/production%20deployment/2023/06/18/sqlite","draft":false,"layout":"post","published":true,"author":"victor","slug":"sqlite","ext":".md"},"path":"_posts/2023-06-14-set-up-a-django-project.md","output":"<!DOCTYPE html>\n<!--\n    So Simple Jekyll Theme 3.2.0\n    Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes\n    Free for personal and commercial use under the MIT license\n    https://github.com/mmistakes/so-simple-theme/blob/master/LICENSE\n-->\n<html lang=\"en-US\" class=\"no-js\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  \n  \n\n  \n    \n    <!-- Begin Jekyll SEO tag v2.8.0 -->\n<title>How to set up a Django project | Minimalist Django</title>\n<meta name=\"generator\" content=\"Jekyll v4.2.2\" />\n<meta property=\"og:title\" content=\"How to set up a Django project\" />\n<meta name=\"author\" content=\"Victor Movileanu\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta name=\"description\" content=\"How to start a Django project the right way\" />\n<meta property=\"og:description\" content=\"How to start a Django project the right way\" />\n<link rel=\"canonical\" href=\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\" />\n<meta property=\"og:url\" content=\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\" />\n<meta property=\"og:site_name\" content=\"Minimalist Django\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-06-14T10:00:00+00:00\" />\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta property=\"twitter:title\" content=\"How to set up a Django project\" />\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"author\":{\"@type\":\"Person\",\"name\":\"Victor Movileanu\"},\"dateModified\":\"2023-06-14T10:00:00+00:00\",\"datePublished\":\"2023-06-14T10:00:00+00:00\",\"description\":\"How to start a Django project the right way\",\"headline\":\"How to set up a Django project\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\"},\"publisher\":{\"@type\":\"Organization\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://minimalistdjango.com/images/django-rocket.svg\"},\"name\":\"Victor Movileanu\"},\"url\":\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\"}</script>\n<!-- End Jekyll SEO tag -->\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-PP61HM8LXR\"></script>\n<script>\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-PP61HM8LXR');\n</script>\n\n  \n\n  <script>\n    /* Cut the mustard */\n    if ( 'querySelector' in document && 'addEventListener' in window ) {\n      document.documentElement.className = document.documentElement.className.replace(/\\bno-js\\b/g, '') + 'js';\n    }\n  </script>\n\n  <link rel=\"stylesheet\" href=\"/assets/css/main.css\">\n  <link rel=\"stylesheet\" href=\"/assets/css/skins/default.css\">\n  <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Minimalist Django\" href=\"/feed.xml\">\n<!-- start custom head snippets -->\n\n<!-- insert favicons. use http://realfavicongenerator.net/ -->\n\n<!-- end custom head snippets -->\n\n</head>\n\n\n  <body class=\"layout--post  how-to-set-up-a-django-project\">\n    <nav class=\"skip-links\">\n  <h2 class=\"screen-reader-text\">Skip links</h2>\n  <ul>\n    <li><a href=\"#primary-nav\" class=\"screen-reader-shortcut\">Skip to primary navigation</a></li>\n    <li><a href=\"#main\" class=\"screen-reader-shortcut\">Skip to content</a></li>\n    <li><a href=\"#footer\" class=\"screen-reader-shortcut\">Skip to footer</a></li>\n  </ul>\n</nav>\n\n    \n  <div class=\"navigation-wrapper\">\n    <a href=\"#menu-toggle\" id=\"menu-toggle\">Menu</a>\n    <nav id=\"primary-nav\" class=\"site-nav animated drop\">\n      <ul><li><a href=\"/\">Home</a></li><li><a href=\"/categories/\">Categories</a></li><li><a href=\"/tags/\">Tags</a></li><li><a href=\"/about/\">About</a></li></ul>\n    </nav>\n  </div><!-- /.navigation-wrapper -->\n\n\n    <header class=\"masthead\">\n  <div class=\"wrap\">\n    \n      <a href=\"/\" class=\"site-logo\" rel=\"home\" title=\"Minimalist Django\">\n        <img src=\"/images/django-rocket.svg\" class=\"site-logo-img animated fadeInDown\" alt=\"Minimalist Django\">\n      </a>\n    \n    \n    \n      \n        <div class=\"site-title animated fadeIn\"><a href=\"/\">Minimalist Django</a></div>\n      \n      <p class=\"site-description animated fadeIn\" itemprop=\"description\">The minimalist way of web development</p>\n    \n  </div>\n</header><!-- /.masthead -->\n\n\n    <main id=\"main\" class=\"main-content\" aria-label=\"Content\">\n  <article class=\"h-entry\">\n    \n\n    <div class=\"page-wrapper\">\n      <header class=\"page-header\">\n        \n        \n          <h1 id=\"page-title\" class=\"page-title p-name\">How to set up a Django project\n</h1>\n        \n      </header>\n\n      <div class=\"page-sidebar\">\n        <div class=\"page-author h-card p-author\"><img src=\"/images/me.jpg\" class=\"author-avatar u-photo\" alt=\"Victor Movileanu\"><div class=\"author-info\"><div class=\"author-name\">\n        <span class=\"p-name\">Victor Movileanu</span>\n      </div><ul class=\"author-links\"><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://twitter.com/ViggieSmalls5\"><i class=\"fab fa-twitter-square fa-lg\" title=\"Twitter\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://instagram.com/vickym.rulez\"><i class=\"fab fa-instagram fa-lg\" title=\"Instagram\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://github.com/movileanuv\"><i class=\"fab fa-github-square fa-lg\" title=\"GitHub\"></i></a>\n          </li></ul>\n    <time class=\"page-date dt-published\" datetime=\"2023-06-14T10:00:00+00:00\"><a class=\"u-url\" href=\"\">June 14, 2023</a>\n</time>\n\n  </div>\n</div>\n\n        \n  <h3 class=\"page-taxonomies-title\">Categories</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">Development</li>\n  </ul>\n\n\n        \n  <h3 class=\"page-taxonomies-title\">Tags</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">pyenv</li><li class=\"page-taxonomy\">poetry</li>\n  </ul>\n\n\n      </div>\n\n      <div class=\"page-content\">\n        <div class=\"e-content\">\n          <p><img src=\"/images/xkcd-startling.png\" alt=\"xkcd meme on regular repetitive tasks\" />\n<a href=\"https://xkcd.com/354/\" target=\"_blank\">https://xkcd.com/354/</a></p>\n\n<h2 id=\"install-pyenv\">Choose your Python version with <em>pyenv</em></h2>\n\n<p><a href=\"https://github.com/pyenv/pyenv#installation\" target=\"_blank\"><em>Pyenv</em></a> allows you to easily manage multiple Python versions on your system, which is particularly useful when working with different Django projects that require specific versions of Python.</p>\n\n<p>You can easily install pyenv with curl:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl https://pyenv.run | bash\n</code></pre></div></div>\n\n<p>Then add the following lines to your <code class=\"language-plaintext highlighter-rouge\">.bashrc</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">export </span><span class=\"nv\">PYENV_ROOT</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$HOME</span><span class=\"s2\">/.pyenv\"</span>\n<span class=\"nb\">command</span> <span class=\"nt\">-v</span> pyenv <span class=\"o\">&gt;</span>/dev/null <span class=\"o\">||</span> <span class=\"nb\">export </span><span class=\"nv\">PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$PYENV_ROOT</span><span class=\"s2\">/bin:</span><span class=\"nv\">$PATH</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv virtualenv-init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n</code></pre></div></div>\n\n<p>To use a specific python version for your project, execute</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pyenv <span class=\"nb\">install </span>3.11.3\npyenv <span class=\"nb\">local </span>3.11.3\n</code></pre></div></div>\n\n<p>This will create a <code class=\"language-plaintext highlighter-rouge\">.python-version</code> file in your project’s director, that specifies the currently used python version.\nYou can verify by executing <code class=\"language-plaintext highlighter-rouge\">python --version</code>.</p>\n\n<h2 id=\"manage-your-dependencies-with-poetry\">Manage your dependencies with <em>poetry</em></h2>\n\n<p>Dependency management is important because external libraries can change over time, and upgrading them without proper management can potentially crash your application.\n<a href=\"https://python-poetry.org/docs/#installation\" target=\"_blank\"><em>Poetry</em></a> incorporates everything you need to isolate your project and manage your dependencies.</p>\n\n<p>You can install poetry outside your project’s directory with</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-sSL</span> https://install.python-poetry.org | python3 -\n</code></pre></div></div>\n\n<p>Here are some useful commands that you will always come across:</p>\n\n<ol>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#init\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry init</code></a> you can easily generate a new <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file inside the current directory, that keeps track of the project dependencies</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#add\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry add &lt;package-name&gt;</code></a> you can add a new package to your <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file and immediately install it in your virtual environment</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#shell\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry shell</code></a> you activate your virtual environment and run it isolated from other projects</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#export\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry export</code></a> you can write your dependencies in a format that can be easily installed with <a href=\"https://pip.pypa.io/en/stable/installation/\">pip</a></li>\n</ol>\n\n<blockquote class=\"tip-content\">\n  <h2 id=\"-tip\">🤫 Tip</h2>\n  <p>Create a <code class=\"language-plaintext highlighter-rouge\">requirements/</code> directory to separate development, test and production requirements.</p>\n</blockquote>\n\n<h2 id=\"tldr\">TL;DR</h2>\n\n<p>Here is a quick run-through on how to set up a new Django project after having successfully installed <em>pyenv</em> and <em>poetry</em>:</p>\n\n<script src=\"https://gist.github.com/movileanuv/56fcce4d2351ab096cbd10e97211782f.js\"></script>\n\n<h2 id=\"further-reading\">Further Reading</h2>\n\n<ul>\n  <li><a href=\"https://realpython.com/dependency-management-python-poetry/\" target=\"_blank\">RealPython</a>: More details on how to work with poetry</li>\n  <li><a href=\"https://www.b-list.org/weblog/2022/may/13/boring-python-dependencies/\" target=\"_blank\">Boring Python: dependency management</a>: Great article that describes how to work with tools like “pip” and “venv” and what you have to look out for</li>\n  <li><a href=\"https://www.youtube.com/watch?v=-YEUFGFHWgQ\">Youtube: Bootstrapping Your Local Python Environment</a>:\nJust a regular video discussing python environments, but I like this one: <strong>Don’t use <code class=\"language-plaintext highlighter-rouge\">sudo</code> when you set up your python envrionment</strong></li>\n</ul>\n\n\n        </div>\n\n        \n\n        \n\n        <nav class=\"page-pagination\" role=\"navigation\">\n  \n    <a class=\"page-previous\" href=\"/production%20deployment/2023/06/10/virtualbox.html\">\n      <h4 class=\"page-pagination-label\">Previous</h4>\n      <span class=\"page-pagination-title\">\n        <i class=\"fas fa-arrow-left\"></i> Set up a VirtualBox VM\n\n      </span>\n    </a>\n  \n\n  \n    <a class=\"page-next\" href=\"/production%20deployment/2023/06/18/sqlite.html\">\n      <h4 class=\"page-pagination-label\">Next</h4>\n      <span class=\"page-pagination-title\">\n        SQLite in production\n <i class=\"fas fa-arrow-right\"></i>\n      </span>\n    </a>\n  \n</nav>\n\n      </div>\n    </div>\n  </article>\n</main>\n\n\n    <footer id=\"footer\" class=\"site-footer\">\n  <!-- start custom footer snippets -->\n\n<!-- end custom footer snippets -->\n<div class=\"copyright\">\n    \n      <p>&copy; 2023 Minimalist Django. Powered by <a href=\"https://jekyllrb.com\" rel=\"nofollow\">Jekyll</a> &amp; <a href=\"https://github.com/mmistakes/so-simple-theme\" rel=\"nofollow\">So Simple</a>.</p>\n    \n  </div>\n</footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n  <script src=\"/assets/js/main.min.js\"></script>\n  <script src=\"https://use.fontawesome.com/releases/v5.0.12/js/all.js\"></script>\n\n\n  </body>\n\n</html>\n","relative_path":"_posts/2023-06-14-set-up-a-django-project.md","date":"2023-06-14 10:00:00 +0000","id":"/development/2023/06/14/set-up-a-django-project","excerpt":"How to start a Django project the right way","draft":false,"layout":"post","published":true,"author":"victor","slug":"set-up-a-django-project","ext":".md"},"path":"_posts/2023-06-10-virtualbox.md","output":"<!DOCTYPE html>\n<!--\n    So Simple Jekyll Theme 3.2.0\n    Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes\n    Free for personal and commercial use under the MIT license\n    https://github.com/mmistakes/so-simple-theme/blob/master/LICENSE\n-->\n<html lang=\"en-US\" class=\"no-js\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  \n  \n\n  \n    \n    <!-- Begin Jekyll SEO tag v2.8.0 -->\n<title>Set up a VirtualBox VM | Minimalist Django</title>\n<meta name=\"generator\" content=\"Jekyll v4.2.2\" />\n<meta property=\"og:title\" content=\"Set up a VirtualBox VM\" />\n<meta name=\"author\" content=\"Victor Movileanu\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta name=\"description\" content=\"How to run a virtual host locally to test your automatic provisioning\" />\n<meta property=\"og:description\" content=\"How to run a virtual host locally to test your automatic provisioning\" />\n<link rel=\"canonical\" href=\"https://minimalistdjango.com/production%20deployment/2023/06/10/virtualbox.html\" />\n<meta property=\"og:url\" content=\"https://minimalistdjango.com/production%20deployment/2023/06/10/virtualbox.html\" />\n<meta property=\"og:site_name\" content=\"Minimalist Django\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-06-10T00:00:00+00:00\" />\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta property=\"twitter:title\" content=\"Set up a VirtualBox VM\" />\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"author\":{\"@type\":\"Person\",\"name\":\"Victor Movileanu\"},\"dateModified\":\"2023-06-10T00:00:00+00:00\",\"datePublished\":\"2023-06-10T00:00:00+00:00\",\"description\":\"How to run a virtual host locally to test your automatic provisioning\",\"headline\":\"Set up a VirtualBox VM\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://minimalistdjango.com/production%20deployment/2023/06/10/virtualbox.html\"},\"publisher\":{\"@type\":\"Organization\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://minimalistdjango.com/images/django-rocket.svg\"},\"name\":\"Victor Movileanu\"},\"url\":\"https://minimalistdjango.com/production%20deployment/2023/06/10/virtualbox.html\"}</script>\n<!-- End Jekyll SEO tag -->\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-PP61HM8LXR\"></script>\n<script>\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-PP61HM8LXR');\n</script>\n\n  \n\n  <script>\n    /* Cut the mustard */\n    if ( 'querySelector' in document && 'addEventListener' in window ) {\n      document.documentElement.className = document.documentElement.className.replace(/\\bno-js\\b/g, '') + 'js';\n    }\n  </script>\n\n  <link rel=\"stylesheet\" href=\"/assets/css/main.css\">\n  <link rel=\"stylesheet\" href=\"/assets/css/skins/default.css\">\n  <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Minimalist Django\" href=\"/feed.xml\">\n<!-- start custom head snippets -->\n\n<!-- insert favicons. use http://realfavicongenerator.net/ -->\n\n<!-- end custom head snippets -->\n\n</head>\n\n\n  <body class=\"layout--post  set-up-a-virtualbox-vm\">\n    <nav class=\"skip-links\">\n  <h2 class=\"screen-reader-text\">Skip links</h2>\n  <ul>\n    <li><a href=\"#primary-nav\" class=\"screen-reader-shortcut\">Skip to primary navigation</a></li>\n    <li><a href=\"#main\" class=\"screen-reader-shortcut\">Skip to content</a></li>\n    <li><a href=\"#footer\" class=\"screen-reader-shortcut\">Skip to footer</a></li>\n  </ul>\n</nav>\n\n    \n  <div class=\"navigation-wrapper\">\n    <a href=\"#menu-toggle\" id=\"menu-toggle\">Menu</a>\n    <nav id=\"primary-nav\" class=\"site-nav animated drop\">\n      <ul><li><a href=\"/\">Home</a></li><li><a href=\"/categories/\">Categories</a></li><li><a href=\"/tags/\">Tags</a></li><li><a href=\"/about/\">About</a></li></ul>\n    </nav>\n  </div><!-- /.navigation-wrapper -->\n\n\n    <header class=\"masthead\">\n  <div class=\"wrap\">\n    \n      <a href=\"/\" class=\"site-logo\" rel=\"home\" title=\"Minimalist Django\">\n        <img src=\"/images/django-rocket.svg\" class=\"site-logo-img animated fadeInDown\" alt=\"Minimalist Django\">\n      </a>\n    \n    \n    \n      \n        <div class=\"site-title animated fadeIn\"><a href=\"/\">Minimalist Django</a></div>\n      \n      <p class=\"site-description animated fadeIn\" itemprop=\"description\">The minimalist way of web development</p>\n    \n  </div>\n</header><!-- /.masthead -->\n\n\n    <main id=\"main\" class=\"main-content\" aria-label=\"Content\">\n  <article class=\"h-entry\">\n    \n\n    <div class=\"page-wrapper\">\n      <header class=\"page-header\">\n        \n        \n          <h1 id=\"page-title\" class=\"page-title p-name\">Set up a VirtualBox VM\n</h1>\n        \n      </header>\n\n      <div class=\"page-sidebar\">\n        <div class=\"page-author h-card p-author\"><img src=\"/images/me.jpg\" class=\"author-avatar u-photo\" alt=\"Victor Movileanu\"><div class=\"author-info\"><div class=\"author-name\">\n        <span class=\"p-name\">Victor Movileanu</span>\n      </div><ul class=\"author-links\"><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://twitter.com/ViggieSmalls5\"><i class=\"fab fa-twitter-square fa-lg\" title=\"Twitter\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://instagram.com/vickym.rulez\"><i class=\"fab fa-instagram fa-lg\" title=\"Instagram\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://github.com/movileanuv\"><i class=\"fab fa-github-square fa-lg\" title=\"GitHub\"></i></a>\n          </li></ul>\n    <time class=\"page-date dt-published\" datetime=\"2023-06-10T00:00:00+00:00\"><a class=\"u-url\" href=\"\">June 10, 2023</a>\n</time>\n\n  </div>\n</div>\n\n        \n  <h3 class=\"page-taxonomies-title\">Categories</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">Production deployment</li>\n  </ul>\n\n\n        \n  <h3 class=\"page-taxonomies-title\">Tags</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">VirtualBox</li><li class=\"page-taxonomy\">ansible</li>\n  </ul>\n\n\n      </div>\n\n      <div class=\"page-content\">\n        <div class=\"e-content\">\n          <p>Having a virtual machine (VM) locally is extremely useful to test provisioning your remote host.\nThis can be really useful when you plan to host your application on an external provider like <a href=\"https://m.do.co/c/c40e38c3b079\" rel=\"sponsored\" target=\"_blank\">DigitalOcean</a>.\nTogether with ansible it will help you learn how to automate your deployment.</p>\n\n<h2 id=\"setup-virtualbox\">Setup VirtualBox</h2>\n\n<ol>\n  <li>Download a Ubuntu iso image and use it to set up a VM.</li>\n  <li>Install <a href=\"https://www.virtualbox.org/\">VirtualBox</a>.\n    <ul>\n      <li><strong>Create a virtual machine</strong>. It is important to <strong>select “Bridged Adapter” in the Network options</strong>. This will allow your host to communicate with the VM via TCP/IP. Configure other options (memory, disk size, etc.) as desired.</li>\n      <li>Optionally, I would suggest to <strong>install the Guest Additions</strong>. This allows you to resize the screen to the window size. First, select from the menu “Insert Guest Additions CD”, then after mounting it you need to execute <code class=\"language-plaintext highlighter-rouge\">autorun.sh</code>. After reboot you can activate from the menu “View &gt; Autoresize Guest Display”</li>\n      <li>Optionally, I would also activate the <strong>bidirectional Drag and Drop</strong> from the menu.</li>\n    </ul>\n  </li>\n  <li>Next, you need to <strong>add your user to the sudoers group</strong>, which is not done by default on installation. For this, you need to follow <a href=\"https://superuser.com/questions/1623376/how-can-i-make-my-own-account-a-sudoers-on-virtualbox/1755286#1755286\">these instructions</a>:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>su -\nsudo adduser &lt;username&gt; sudo\n</code></pre></div>    </div>\n    <p>The root password is the same password as the one you selected for your user in the installation step.</p>\n  </li>\n  <li>Next, you need to allow the VM user to execute <code class=\"language-plaintext highlighter-rouge\">sudo</code> without being prompted for a password. \nThis will allow the execution of the <strong>ansible</strong> tasks that require superuser privilges, without being prompted for a password.\nFor this, on your VM, create a new file <code class=\"language-plaintext highlighter-rouge\">/etc/sudoers.d/&lt;username&gt;</code> inside the <code class=\"language-plaintext highlighter-rouge\">/etc/sudoers.d</code> directory with following content:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;username&gt; ALL=(ALL) NOPASSWD:ALL\n</code></pre></div>    </div>\n    <p>This is not really safe, and you could be more specific with the permissions (e.g. <code class=\"language-plaintext highlighter-rouge\">ALL = NOPASSWD: /bin/apt, /bin/apt-get</code> …), but we don’t want to mess around with security at this point.</p>\n  </li>\n  <li>Next, you want to install an ssh server on your machine, so you can access it from your client via ssh. \nFor this, execute the following commands:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo apt-get install openssh-server\nsudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bck\negrep -v \"^$|^#\" /etc/ssh/sshd_config | sudo tee /etc/ssh/sshd_config\necho \"Port 22\" | sudo tee -a /etc/ssh/sshd_config\nsudo systemctl enable ssh --now\n</code></pre></div>    </div>\n    <p>Explanation:</p>\n    <ul>\n      <li>The first line installs the ssh server</li>\n      <li>The second one copies the default configuration of the ssh server to a separate file as a backup and for later reference</li>\n      <li>The third line only extracts the lines in the original file that are not blank lines or comments, so we can only see the configured variables at one glance</li>\n      <li>The fourth line opens port 22 for ssh connections. For security reasons you could change this to any other port between 1024 and 65536, so attackers have a harder time to guess the correct port</li>\n      <li>The last line finally starts the ssh server and enables it to launch on startup</li>\n    </ul>\n  </li>\n  <li>Next, you need to generate an ssh key on your host, and copy it to the VM with\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ssh-copy-id -i ~/.ssh/id_ed25519.pub &lt;username&gt;@&lt;VM IP Address&gt; -p 22\n</code></pre></div>    </div>\n  </li>\n</ol>\n\n<h2 id=\"setup-ansible\">Setup Ansible</h2>\n\n<p>First things first, you need to install <em>Ansible</em> on your local machine. \nI would recommend to install globally, using <em>pip</em>, but the one provided by your local <em>pyenv</em> installation.\nYou could also install it with your package manager, but it might not be the latest version and would be harder to upgrade.</p>\n\n<p>Let’s take a look at following two files: our inventory <strong>development</strong> and our playbook <strong>playbook.yml</strong>:</p>\n\n<script src=\"https://gist.github.com/movileanuv/835a2c5e287dd1ce5b192da7f503dd3b.js\"></script>\n\n<p>The inventory specifies a hostname that is addressed in the playbook as <code class=\"language-plaintext highlighter-rouge\">hosts: vbox</code>. This tells Ansible which hosts to run this playbook on.\nThere are three other parameters specified for the host:</p>\n<ul>\n  <li><strong>ansible_host</strong>: this is the IP address of the node that ansible will ssh to to execute the playbook</li>\n  <li><strong>ansible_port</strong>: this is the port for the ssh connection</li>\n  <li><strong>ansible_become</strong>: this instructs ansible to become a specific user on the remote host during playbook execution. By default this is <strong>root</strong>. Since most of the commands require superuser privileges, I would rather specify it here than for each task repeatedly, and only in case I need less privileges to perform an action, I specify it per task level.</li>\n</ul>\n\n<p>The playbook goes through the installation process of pyenv step by step</p>\n<ol>\n  <li>It uptates the apt packages list (for debian/ubuntu obviously)</li>\n  <li>It installs the packages required by <em>pyenv</em> for building</li>\n  <li>It installs <em>pyenv</em> via an install script</li>\n  <li>It updates the <code class=\"language-plaintext highlighter-rouge\">.profile</code> of the user to initialize <em>pyenv</em> correctly.</li>\n</ol>\n\n<p>There is a required environment variable ``, that can be specified with the flag <code class=\"language-plaintext highlighter-rouge\">-e</code> on playbook execution, which controls for which user <em>pyenv</em> should be installed. Here is how you would execute the playbook:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook <span class=\"nt\">-i</span> development <span class=\"nt\">-e</span> <span class=\"nv\">user</span><span class=\"o\">=</span>victor playbook.yml\n</code></pre></div></div>\n\n<p>This command will install <em>pyenv</em> for the specified user on the VM and you can check it by logging in as the user on the VM and typing <code class=\"language-plaintext highlighter-rouge\">pyenv</code> into the terminal, which should output all <em>pyenv</em> actions available.</p>\n\n<h2 id=\"further-reading\">Further reading:</h2>\n\n<ul>\n  <li><a href=\"https://forums.virtualbox.org/viewtopic.php?f=35&amp;t=50661\" target=\"_blank\">Resize the Virtual Drive of a VM</a>: By default, the VM might not have enough hard disk space. So this command might be pretty helpful to resize it to the desired size:\n  <code class=\"language-plaintext highlighter-rouge\">VBoxManage modifyhd &lt;absolute path including the name and extension&gt; --resize 20480</code></li>\n  <li><a href=\"https://docs.ansible.com/ansible/latest/tips_tricks/sample_setup.html#sample-setup\" target=\"_blank\">Sample Ansible setup</a>: Suggestions how to organize your inventories, playbooks and roles.</li>\n</ul>\n\n<p><a href=\"https://www.digitalocean.com/?refcode=c40e38c3b079&amp;utm_campaign=Referral_Invite&amp;utm_medium=Referral_Program&amp;utm_source=badge\" rel=\"sponsored\" target=\"_blank\"><img src=\"https://web-platforms.sfo2.cdn.digitaloceanspaces.com/WWW/Badge%201.svg\" alt=\"DigitalOcean Referral Badge\" /></a></p>\n\n        </div>\n\n        \n\n        \n\n        <nav class=\"page-pagination\" role=\"navigation\">\n  \n\n  \n    <a class=\"page-next\" href=\"/development/2023/06/14/set-up-a-django-project.html\">\n      <h4 class=\"page-pagination-label\">Next</h4>\n      <span class=\"page-pagination-title\">\n        How to set up a Django project\n <i class=\"fas fa-arrow-right\"></i>\n      </span>\n    </a>\n  \n</nav>\n\n      </div>\n    </div>\n  </article>\n</main>\n\n\n    <footer id=\"footer\" class=\"site-footer\">\n  <!-- start custom footer snippets -->\n\n<!-- end custom footer snippets -->\n<div class=\"copyright\">\n    \n      <p>&copy; 2023 Minimalist Django. Powered by <a href=\"https://jekyllrb.com\" rel=\"nofollow\">Jekyll</a> &amp; <a href=\"https://github.com/mmistakes/so-simple-theme\" rel=\"nofollow\">So Simple</a>.</p>\n    \n  </div>\n</footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n  <script src=\"/assets/js/main.min.js\"></script>\n  <script src=\"https://use.fontawesome.com/releases/v5.0.12/js/all.js\"></script>\n\n\n  </body>\n\n</html>\n","relative_path":"_posts/2023-06-10-virtualbox.md","date":"2023-06-10 00:00:00 +0000","id":"/production%20deployment/2023/06/10/virtualbox","excerpt":"How to run a virtual host locally to test your automatic provisioning","draft":false,"layout":"post","published":true,"author":"victor","slug":"virtualbox","ext":".md"},"collection":"posts","next":{"title":"SQLite in production","content":"<p>People say <em>SQLite</em> is a database that is unsuitable for production use because of low performance, inability to handle\nmultiple concurrent writes, and other misconceptions.\nThis article is inspired by a talk at <a href=\"https://youtu.be/yTicYJDT1zE\"><em>DjangoCon 2023</em></a>  and an episode of <a href=\"https://changelog.com/podcast/433\"><em>The Changelog</em></a>.</p>\n\n<iframe class=\"youtube-iframe\" src=\"https://www.youtube.com/embed/yTicYJDT1zE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n\n<h2 id=\"video-summary\">Video summary</h2>\n<ul>\n  <li>SQLite is already in production. You can already see how many applications use SQLite on your computer with this command:\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  find / <span class=\"se\">\\(</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.db\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite3\"</span> <span class=\"se\">\\)</span> <span class=\"nt\">-type</span> f <span class=\"nt\">-exec</span> file <span class=\"o\">{}</span> <span class=\"se\">\\;</span> 2&gt;/dev/null | <span class=\"nb\">grep </span>SQLite\n</code></pre></div>    </div>\n  </li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=682\">11:20</a> it is a serverless database, which means you don’t need to configure an extra host, manage access by your application server, etc.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=866\">14:25</a> No performance loss because of network latency</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=931\">15:31</a> No N + 1 Query problems</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1051\">17:31</a> Concurrent writes are not a problem if you turn <a href=\"https://www.sqlite.org/wal.html\">Write-Ahead Logging</a> for your SQLite database. For this, you can execute <code class=\"language-plaintext highlighter-rouge\">sqlite3 db.sqlite3 'PRAGMA journal_mode=wal;'</code> in your shell.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1142\">19:02</a> Speed up writes even more by reducing the <a href=\"https://www.sqlite.org/pragma.html#pragma_synchronous\">synchronous level</a></li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1253\">20:53</a> You can easily back up the SQLite database with <a href=\"https://litestream.io/\">Litestream</a></li>\n</ul>\n\n<h2 id=\"set-up-django-to-run-with-sqlite\">Set up Django to run with SQLite</h2>\n\n<p>When creating a new Django project, it comes with following default setting for <code class=\"language-plaintext highlighter-rouge\">DATABASES</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"ENGINE\"</span><span class=\"p\">:</span> <span class=\"s\">\"django.db.backends.sqlite3\"</span><span class=\"p\">,</span>\n        <span class=\"s\">\"NAME\"</span><span class=\"p\">:</span> <span class=\"n\">BASE_DIR</span> <span class=\"o\">/</span> <span class=\"s\">\"db.sqlite3\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You can also use <a href=\"https://github.com/jazzband/dj-database-url/\"><code class=\"language-plaintext highlighter-rouge\">dj-database-url</code></a> to configure your <code class=\"language-plaintext highlighter-rouge\">DATABASES</code> setting. In this case, the <code class=\"language-plaintext highlighter-rouge\">DATABASE_URL</code> might look like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>DATABASE_URL=sqlite:///path/to/your/database/file.sqlite3\n</code></pre></div></div>\n\n<p>Now, before you start your django project for the first time, which automatically creates a SQLite database for you, you should create it yourself first, by running:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlite3 db.sqlite3 <span class=\"s1\">'PRAGMA journal_mode=wal; PRAGMA busy_timeout = 5000;'</span>\n</code></pre></div></div>\n\n<p>The PRAGMA synchronous setting is a little bit more tricky, since it does not apply to the database, <a href=\"https://stackoverflow.com/questions/36308801/sqlite3-pragma-synchronous-not-persistent\">but to the database connection</a>.\nHence, you have to change this setting <a href=\"https://stackoverflow.com/a/6843199/5540654\">for all connections opened by the Django app</a>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.signals</span> <span class=\"kn\">import</span> <span class=\"n\">connection_created</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">activate_foreign_keys</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">vendor</span> <span class=\"o\">==</span> <span class=\"s\">'sqlite'</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n        <span class=\"n\">cursor</span><span class=\"p\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s\">'PRAGMA synchronous=1;'</span><span class=\"p\">)</span>\n\n<span class=\"n\">connection_created</span><span class=\"p\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">activate_foreign_keys</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"how-to-configure-litestream-to-back-up-your-database-to-s3\">How to configure Litestream to back up your Database to S3</h2>\n\n<ul>\n  <li><a href=\"https://litestream.io/install/\">Install</a></li>\n  <li><a href=\"https://litestream.io/guides/s3/\">Replicating to Amazon S3</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Running as a Systemd service</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Tips &amp; Caveats</a></li>\n</ul>\n\n<h2 id=\"further-reading\">Further reading</h2>\n<ul>\n  <li>https://tailscale.com/blog/database-for-2022/</li>\n  <li>https://blog.expensify.com/2018/01/08/scaling-sqlite-to-4m-qps-on-a-single-server/</li>\n  <li>https://simonwillison.net/2022/Oct/23/datasette-gunicorn/</li>\n  <li>https://github.com/tomdyson/django-sqlite-load-tests</li>\n</ul>\n\n","tags":["SQLite","databases","DjangoCon"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/18/sqlite.html","previous":{"title":"How to set up a Django project","content":"<p><img src=\"/images/xkcd-startling.png\" alt=\"xkcd meme on regular repetitive tasks\" />\n<a href=\"https://xkcd.com/354/\" target=\"_blank\">https://xkcd.com/354/</a></p>\n\n<h2 id=\"install-pyenv\">Choose your Python version with <em>pyenv</em></h2>\n\n<p><a href=\"https://github.com/pyenv/pyenv#installation\" target=\"_blank\"><em>Pyenv</em></a> allows you to easily manage multiple Python versions on your system, which is particularly useful when working with different Django projects that require specific versions of Python.</p>\n\n<p>You can easily install pyenv with curl:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl https://pyenv.run | bash\n</code></pre></div></div>\n\n<p>Then add the following lines to your <code class=\"language-plaintext highlighter-rouge\">.bashrc</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">export </span><span class=\"nv\">PYENV_ROOT</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$HOME</span><span class=\"s2\">/.pyenv\"</span>\n<span class=\"nb\">command</span> <span class=\"nt\">-v</span> pyenv <span class=\"o\">&gt;</span>/dev/null <span class=\"o\">||</span> <span class=\"nb\">export </span><span class=\"nv\">PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$PYENV_ROOT</span><span class=\"s2\">/bin:</span><span class=\"nv\">$PATH</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv virtualenv-init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n</code></pre></div></div>\n\n<p>To use a specific python version for your project, execute</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pyenv <span class=\"nb\">install </span>3.11.3\npyenv <span class=\"nb\">local </span>3.11.3\n</code></pre></div></div>\n\n<p>This will create a <code class=\"language-plaintext highlighter-rouge\">.python-version</code> file in your project’s director, that specifies the currently used python version.\nYou can verify by executing <code class=\"language-plaintext highlighter-rouge\">python --version</code>.</p>\n\n<h2 id=\"manage-your-dependencies-with-poetry\">Manage your dependencies with <em>poetry</em></h2>\n\n<p>Dependency management is important because external libraries can change over time, and upgrading them without proper management can potentially crash your application.\n<a href=\"https://python-poetry.org/docs/#installation\" target=\"_blank\"><em>Poetry</em></a> incorporates everything you need to isolate your project and manage your dependencies.</p>\n\n<p>You can install poetry outside your project’s directory with</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-sSL</span> https://install.python-poetry.org | python3 -\n</code></pre></div></div>\n\n<p>Here are some useful commands that you will always come across:</p>\n\n<ol>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#init\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry init</code></a> you can easily generate a new <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file inside the current directory, that keeps track of the project dependencies</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#add\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry add &lt;package-name&gt;</code></a> you can add a new package to your <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file and immediately install it in your virtual environment</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#shell\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry shell</code></a> you activate your virtual environment and run it isolated from other projects</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#export\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry export</code></a> you can write your dependencies in a format that can be easily installed with <a href=\"https://pip.pypa.io/en/stable/installation/\">pip</a></li>\n</ol>\n\n<blockquote class=\"tip-content\">\n  <h2 id=\"-tip\">🤫 Tip</h2>\n  <p>Create a <code class=\"language-plaintext highlighter-rouge\">requirements/</code> directory to separate development, test and production requirements.</p>\n</blockquote>\n\n<h2 id=\"tldr\">TL;DR</h2>\n\n<p>Here is a quick run-through on how to set up a new Django project after having successfully installed <em>pyenv</em> and <em>poetry</em>:</p>\n\n<script src=\"https://gist.github.com/movileanuv/56fcce4d2351ab096cbd10e97211782f.js\"></script>\n\n<h2 id=\"further-reading\">Further Reading</h2>\n\n<ul>\n  <li><a href=\"https://realpython.com/dependency-management-python-poetry/\" target=\"_blank\">RealPython</a>: More details on how to work with poetry</li>\n  <li><a href=\"https://www.b-list.org/weblog/2022/may/13/boring-python-dependencies/\" target=\"_blank\">Boring Python: dependency management</a>: Great article that describes how to work with tools like “pip” and “venv” and what you have to look out for</li>\n  <li><a href=\"https://www.youtube.com/watch?v=-YEUFGFHWgQ\">Youtube: Bootstrapping Your Local Python Environment</a>:\nJust a regular video discussing python environments, but I like this one: <strong>Don’t use <code class=\"language-plaintext highlighter-rouge\">sudo</code> when you set up your python envrionment</strong></li>\n</ul>\n\n","tags":["pyenv","poetry"],"categories":["Development"],"url":"/development/2023/06/14/set-up-a-django-project.html","previous":{"title":"Set up a VirtualBox VM","tags":["VirtualBox","ansible"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/10/virtualbox.html","collection":"posts","path":"_posts/2023-06-10-virtualbox.md","relative_path":"_posts/2023-06-10-virtualbox.md","date":"2023-06-10 00:00:00 +0000","id":"/production%20deployment/2023/06/10/virtualbox","draft":false,"layout":"post","published":true,"author":"victor","slug":"virtualbox","ext":".md"},"collection":"posts","next":{"title":"SQLite in production","tags":["SQLite","databases","DjangoCon"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/18/sqlite.html","collection":"posts","path":"_posts/2023-06-14-sqlite.md","relative_path":"_posts/2023-06-14-sqlite.md","date":"2023-06-18 00:00:00 +0000","id":"/production%20deployment/2023/06/18/sqlite","draft":false,"layout":"post","published":true,"author":"victor","slug":"sqlite","ext":".md"},"path":"_posts/2023-06-14-set-up-a-django-project.md","output":"<!DOCTYPE html>\n<!--\n    So Simple Jekyll Theme 3.2.0\n    Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes\n    Free for personal and commercial use under the MIT license\n    https://github.com/mmistakes/so-simple-theme/blob/master/LICENSE\n-->\n<html lang=\"en-US\" class=\"no-js\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  \n  \n\n  \n    \n    <!-- Begin Jekyll SEO tag v2.8.0 -->\n<title>How to set up a Django project | Minimalist Django</title>\n<meta name=\"generator\" content=\"Jekyll v4.2.2\" />\n<meta property=\"og:title\" content=\"How to set up a Django project\" />\n<meta name=\"author\" content=\"Victor Movileanu\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta name=\"description\" content=\"How to start a Django project the right way\" />\n<meta property=\"og:description\" content=\"How to start a Django project the right way\" />\n<link rel=\"canonical\" href=\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\" />\n<meta property=\"og:url\" content=\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\" />\n<meta property=\"og:site_name\" content=\"Minimalist Django\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-06-14T10:00:00+00:00\" />\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta property=\"twitter:title\" content=\"How to set up a Django project\" />\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"author\":{\"@type\":\"Person\",\"name\":\"Victor Movileanu\"},\"dateModified\":\"2023-06-14T10:00:00+00:00\",\"datePublished\":\"2023-06-14T10:00:00+00:00\",\"description\":\"How to start a Django project the right way\",\"headline\":\"How to set up a Django project\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\"},\"publisher\":{\"@type\":\"Organization\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://minimalistdjango.com/images/django-rocket.svg\"},\"name\":\"Victor Movileanu\"},\"url\":\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\"}</script>\n<!-- End Jekyll SEO tag -->\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-PP61HM8LXR\"></script>\n<script>\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-PP61HM8LXR');\n</script>\n\n  \n\n  <script>\n    /* Cut the mustard */\n    if ( 'querySelector' in document && 'addEventListener' in window ) {\n      document.documentElement.className = document.documentElement.className.replace(/\\bno-js\\b/g, '') + 'js';\n    }\n  </script>\n\n  <link rel=\"stylesheet\" href=\"/assets/css/main.css\">\n  <link rel=\"stylesheet\" href=\"/assets/css/skins/default.css\">\n  <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Minimalist Django\" href=\"/feed.xml\">\n<!-- start custom head snippets -->\n\n<!-- insert favicons. use http://realfavicongenerator.net/ -->\n\n<!-- end custom head snippets -->\n\n</head>\n\n\n  <body class=\"layout--post  how-to-set-up-a-django-project\">\n    <nav class=\"skip-links\">\n  <h2 class=\"screen-reader-text\">Skip links</h2>\n  <ul>\n    <li><a href=\"#primary-nav\" class=\"screen-reader-shortcut\">Skip to primary navigation</a></li>\n    <li><a href=\"#main\" class=\"screen-reader-shortcut\">Skip to content</a></li>\n    <li><a href=\"#footer\" class=\"screen-reader-shortcut\">Skip to footer</a></li>\n  </ul>\n</nav>\n\n    \n  <div class=\"navigation-wrapper\">\n    <a href=\"#menu-toggle\" id=\"menu-toggle\">Menu</a>\n    <nav id=\"primary-nav\" class=\"site-nav animated drop\">\n      <ul><li><a href=\"/\">Home</a></li><li><a href=\"/categories/\">Categories</a></li><li><a href=\"/tags/\">Tags</a></li><li><a href=\"/about/\">About</a></li></ul>\n    </nav>\n  </div><!-- /.navigation-wrapper -->\n\n\n    <header class=\"masthead\">\n  <div class=\"wrap\">\n    \n      <a href=\"/\" class=\"site-logo\" rel=\"home\" title=\"Minimalist Django\">\n        <img src=\"/images/django-rocket.svg\" class=\"site-logo-img animated fadeInDown\" alt=\"Minimalist Django\">\n      </a>\n    \n    \n    \n      \n        <div class=\"site-title animated fadeIn\"><a href=\"/\">Minimalist Django</a></div>\n      \n      <p class=\"site-description animated fadeIn\" itemprop=\"description\">The minimalist way of web development</p>\n    \n  </div>\n</header><!-- /.masthead -->\n\n\n    <main id=\"main\" class=\"main-content\" aria-label=\"Content\">\n  <article class=\"h-entry\">\n    \n\n    <div class=\"page-wrapper\">\n      <header class=\"page-header\">\n        \n        \n          <h1 id=\"page-title\" class=\"page-title p-name\">How to set up a Django project\n</h1>\n        \n      </header>\n\n      <div class=\"page-sidebar\">\n        <div class=\"page-author h-card p-author\"><img src=\"/images/me.jpg\" class=\"author-avatar u-photo\" alt=\"Victor Movileanu\"><div class=\"author-info\"><div class=\"author-name\">\n        <span class=\"p-name\">Victor Movileanu</span>\n      </div><ul class=\"author-links\"><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://twitter.com/ViggieSmalls5\"><i class=\"fab fa-twitter-square fa-lg\" title=\"Twitter\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://instagram.com/vickym.rulez\"><i class=\"fab fa-instagram fa-lg\" title=\"Instagram\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://github.com/movileanuv\"><i class=\"fab fa-github-square fa-lg\" title=\"GitHub\"></i></a>\n          </li></ul>\n    <time class=\"page-date dt-published\" datetime=\"2023-06-14T10:00:00+00:00\"><a class=\"u-url\" href=\"\">June 14, 2023</a>\n</time>\n\n  </div>\n</div>\n\n        \n  <h3 class=\"page-taxonomies-title\">Categories</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">Development</li>\n  </ul>\n\n\n        \n  <h3 class=\"page-taxonomies-title\">Tags</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">pyenv</li><li class=\"page-taxonomy\">poetry</li>\n  </ul>\n\n\n      </div>\n\n      <div class=\"page-content\">\n        <div class=\"e-content\">\n          <p><img src=\"/images/xkcd-startling.png\" alt=\"xkcd meme on regular repetitive tasks\" />\n<a href=\"https://xkcd.com/354/\" target=\"_blank\">https://xkcd.com/354/</a></p>\n\n<h2 id=\"install-pyenv\">Choose your Python version with <em>pyenv</em></h2>\n\n<p><a href=\"https://github.com/pyenv/pyenv#installation\" target=\"_blank\"><em>Pyenv</em></a> allows you to easily manage multiple Python versions on your system, which is particularly useful when working with different Django projects that require specific versions of Python.</p>\n\n<p>You can easily install pyenv with curl:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl https://pyenv.run | bash\n</code></pre></div></div>\n\n<p>Then add the following lines to your <code class=\"language-plaintext highlighter-rouge\">.bashrc</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">export </span><span class=\"nv\">PYENV_ROOT</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$HOME</span><span class=\"s2\">/.pyenv\"</span>\n<span class=\"nb\">command</span> <span class=\"nt\">-v</span> pyenv <span class=\"o\">&gt;</span>/dev/null <span class=\"o\">||</span> <span class=\"nb\">export </span><span class=\"nv\">PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$PYENV_ROOT</span><span class=\"s2\">/bin:</span><span class=\"nv\">$PATH</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv virtualenv-init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n</code></pre></div></div>\n\n<p>To use a specific python version for your project, execute</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pyenv <span class=\"nb\">install </span>3.11.3\npyenv <span class=\"nb\">local </span>3.11.3\n</code></pre></div></div>\n\n<p>This will create a <code class=\"language-plaintext highlighter-rouge\">.python-version</code> file in your project’s director, that specifies the currently used python version.\nYou can verify by executing <code class=\"language-plaintext highlighter-rouge\">python --version</code>.</p>\n\n<h2 id=\"manage-your-dependencies-with-poetry\">Manage your dependencies with <em>poetry</em></h2>\n\n<p>Dependency management is important because external libraries can change over time, and upgrading them without proper management can potentially crash your application.\n<a href=\"https://python-poetry.org/docs/#installation\" target=\"_blank\"><em>Poetry</em></a> incorporates everything you need to isolate your project and manage your dependencies.</p>\n\n<p>You can install poetry outside your project’s directory with</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-sSL</span> https://install.python-poetry.org | python3 -\n</code></pre></div></div>\n\n<p>Here are some useful commands that you will always come across:</p>\n\n<ol>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#init\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry init</code></a> you can easily generate a new <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file inside the current directory, that keeps track of the project dependencies</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#add\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry add &lt;package-name&gt;</code></a> you can add a new package to your <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file and immediately install it in your virtual environment</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#shell\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry shell</code></a> you activate your virtual environment and run it isolated from other projects</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#export\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry export</code></a> you can write your dependencies in a format that can be easily installed with <a href=\"https://pip.pypa.io/en/stable/installation/\">pip</a></li>\n</ol>\n\n<blockquote class=\"tip-content\">\n  <h2 id=\"-tip\">🤫 Tip</h2>\n  <p>Create a <code class=\"language-plaintext highlighter-rouge\">requirements/</code> directory to separate development, test and production requirements.</p>\n</blockquote>\n\n<h2 id=\"tldr\">TL;DR</h2>\n\n<p>Here is a quick run-through on how to set up a new Django project after having successfully installed <em>pyenv</em> and <em>poetry</em>:</p>\n\n<script src=\"https://gist.github.com/movileanuv/56fcce4d2351ab096cbd10e97211782f.js\"></script>\n\n<h2 id=\"further-reading\">Further Reading</h2>\n\n<ul>\n  <li><a href=\"https://realpython.com/dependency-management-python-poetry/\" target=\"_blank\">RealPython</a>: More details on how to work with poetry</li>\n  <li><a href=\"https://www.b-list.org/weblog/2022/may/13/boring-python-dependencies/\" target=\"_blank\">Boring Python: dependency management</a>: Great article that describes how to work with tools like “pip” and “venv” and what you have to look out for</li>\n  <li><a href=\"https://www.youtube.com/watch?v=-YEUFGFHWgQ\">Youtube: Bootstrapping Your Local Python Environment</a>:\nJust a regular video discussing python environments, but I like this one: <strong>Don’t use <code class=\"language-plaintext highlighter-rouge\">sudo</code> when you set up your python envrionment</strong></li>\n</ul>\n\n\n        </div>\n\n        \n\n        \n\n        <nav class=\"page-pagination\" role=\"navigation\">\n  \n    <a class=\"page-previous\" href=\"/production%20deployment/2023/06/10/virtualbox.html\">\n      <h4 class=\"page-pagination-label\">Previous</h4>\n      <span class=\"page-pagination-title\">\n        <i class=\"fas fa-arrow-left\"></i> Set up a VirtualBox VM\n\n      </span>\n    </a>\n  \n\n  \n    <a class=\"page-next\" href=\"/production%20deployment/2023/06/18/sqlite.html\">\n      <h4 class=\"page-pagination-label\">Next</h4>\n      <span class=\"page-pagination-title\">\n        SQLite in production\n <i class=\"fas fa-arrow-right\"></i>\n      </span>\n    </a>\n  \n</nav>\n\n      </div>\n    </div>\n  </article>\n</main>\n\n\n    <footer id=\"footer\" class=\"site-footer\">\n  <!-- start custom footer snippets -->\n\n<!-- end custom footer snippets -->\n<div class=\"copyright\">\n    \n      <p>&copy; 2023 Minimalist Django. Powered by <a href=\"https://jekyllrb.com\" rel=\"nofollow\">Jekyll</a> &amp; <a href=\"https://github.com/mmistakes/so-simple-theme\" rel=\"nofollow\">So Simple</a>.</p>\n    \n  </div>\n</footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n  <script src=\"/assets/js/main.min.js\"></script>\n  <script src=\"https://use.fontawesome.com/releases/v5.0.12/js/all.js\"></script>\n\n\n  </body>\n\n</html>\n","relative_path":"_posts/2023-06-14-set-up-a-django-project.md","date":"2023-06-14 10:00:00 +0000","id":"/development/2023/06/14/set-up-a-django-project","excerpt":"How to start a Django project the right way","draft":false,"layout":"post","published":true,"author":"victor","slug":"set-up-a-django-project","ext":".md"},"collection":"posts","next":{"title":"Gunicorn from scratch","content":"<p>When you create a new <em>Django</em> project with <code class=\"language-plaintext highlighter-rouge\">django-admin startproject</code>, it automatically creates a <code class=\"language-plaintext highlighter-rouge\">wsgi.py</code> file for you.\nThis is a module containing a WSGI application object called <code class=\"language-plaintext highlighter-rouge\">application</code> that can be called by any type of WSGI server.\nHere is how this works.</p>\n\n<h2 id=\"the-simplest-wsgi-application\">The simplest WSGI application</h2>\n\n<p><em>WSGI</em>: stands for <em>Web Server Gateway Interface</em>. It is an interface specification by which server and application communicate.\nThe application provides a function which the server calls for each request:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">application</span><span class=\"p\">(</span><span class=\"n\">environ</span><span class=\"p\">,</span> <span class=\"n\">start_response</span><span class=\"p\">):</span>\n    <span class=\"p\">...</span>\n</code></pre></div></div>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">environ</code> is a Python dictionary containing the CGI-defined environment variables plus a few extras.</li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">start_response</code> is a callback by which the application returns the HTTP headers.</p>\n\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">start_response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">response_headers</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </li>\n  <li><code class=\"language-plaintext highlighter-rouge\">status</code> is an HTTP status string (e.g., “200 OK”)</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">response_headers</code> is a list of 2-tuples, the HTTP headers in key-value format</li>\n</ul>\n\n<p>The application function then returns an iterable of body chunks, that need to be bytes, e.g. <code class=\"language-plaintext highlighter-rouge\">[b\"&lt;html&gt;Hello, world!&lt;/html&gt;\"]</code>.\nSo the simplest WSGI application can be:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">application</span><span class=\"p\">(</span><span class=\"n\">environ</span><span class=\"p\">,</span> <span class=\"n\">start_response</span><span class=\"p\">):</span>\n    <span class=\"n\">start_response</span><span class=\"p\">(</span><span class=\"s\">\"200 OK\"</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s\">\"&lt;html&gt;Hello, world!&lt;/html&gt;\"</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<h2 id=\"gunicorn\">Gunicorn</h2>\n\n<p>Normally during development you use <code class=\"language-plaintext highlighter-rouge\">python manage.py runserver</code> to start a web server, but it is not the recommended way in production<sup>[<a href=\"https://docs.djangoproject.com/en/dev/ref/django-admin/#runserver\">1</a>]</sup>.\nBasically it is also a WSGI application that has some additional features such as reloading on code changes, but it has not gone through security audits or performance tests.</p>\n\n<p>Gunicorn stands for <strong>‘Green Unicorn’</strong> and is a Python WSGI HTTP Server for UNIX. \nIt has no dependencies and can be installed with <em>pip</em> or <em>poetry</em>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>poetry add gunicorn\n</code></pre></div></div>\n\n<p>Assuming you have a project structure like this:</p>\n\n<div class=\"language-plaintext tree-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.\n├── manage.py\n└── project\n    ├── __init__.py\n    ├── asgi.py\n    ├── settings.py\n    ├── urls.py\n    └── wsgi.py\n</code></pre></div></div>\n\n<p>you can run</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gunicorn project.wsgi:application\n</code></pre></div></div>\n\n<p>inside your project directory and it will spawn two processes that you can see when you call <code class=\"language-plaintext highlighter-rouge\">ps aux | grep gunicorn</code>. \nOne of them is the parent process that controlls all the workers, the other one is the process for the worker. By default it will only spawn one worker and listen to HTTP requests on <code class=\"language-plaintext highlighter-rouge\">127.0.0.1:8000</code>.</p>\n\n<h2 id=\"configure-gunicorn\">Configure Gunicorn</h2>\n\n<p>Gunicorn detects if there is any file called <code class=\"language-plaintext highlighter-rouge\">gunicorn.conf.py</code> inside the directory where it is executed, or you can specify a different path with the <code class=\"language-plaintext highlighter-rouge\">-c</code> flag.\nThe simplest way is to place it next to your manage.py file:</p>\n\n<div class=\"language-plaintext tree-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.\n├── gunicorn.conf.py    &lt;--- create here\n├── manage.py\n└── project\n    ├── __init__.py\n    ├── asgi.py\n    ├── settings.py\n    ├── urls.py\n    └── wsgi.py\n</code></pre></div></div>\n\n<h3 id=\"multiple-workers\">Multiple workers</h3>\n\n<p>You can spawn multiple gunicorn processes that will serve your application to make use of the computing power of your server, based on the number of CPUs the machine has.\nTo find out the number of processors on your UNIX machine, you can execute <a href=\"https://stackoverflow.com/questions/6481005/how-to-obtain-the-number-of-cpus-cores-in-linux-from-the-command-line\"><code class=\"language-plaintext highlighter-rouge\">grep -c ^processor /proc/cpuinfo</code></a>.\nGunicorn suggests to run <code class=\"language-plaintext highlighter-rouge\">2-4 x $(NUM_CORES)</code> of workers<sup>[<a href=\"https://docs.gunicorn.org/en/stable/settings.html#workers\">2</a>]</sup>.\nThe reasoning behind it is that, while one of the processes is occupied with handling I/O or waiting for a response from the database, the other one can take over and handle a new request.</p>\n\n<p>Here is how the <code class=\"language-plaintext highlighter-rouge\">gunicorn.conf.py</code> file might look like:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n\n<span class=\"n\">workers</span> <span class=\"o\">=</span> <span class=\"n\">multiprocessing</span><span class=\"p\">.</span><span class=\"n\">cpu_count</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n</code></pre></div></div>\n\n<h3 id=\"listen-to-different-ips\">Listen to different IPs</h3>\n\n<p>By default the Gunicorn process will listen for http request on <code class=\"language-plaintext highlighter-rouge\">127.0.0.1:8000</code>.\nYou can configure Gunicorn to listen to different ports, or even to a public IP address.\nYou can easily test this by finding out your computer’s IP address inside your local network with <code class=\"language-plaintext highlighter-rouge\">ifconfig</code>  and set the bind address in the <code class=\"language-plaintext highlighter-rouge\">gunicorn.conf.py</code> file like this:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bind</span> <span class=\"o\">=</span> <span class=\"s\">\"192.168.x.y:8000\"</span>\n</code></pre></div></div>\n\n<p>and navigate from your phone to your computer with this address. \nPorts smaller than 1024 require additional configuration.</p>\n\n<p>In case you plan to use a proxy server like Nginx on the same machine, you might consider using a socket for proxying requests to your Gunicorn server.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bind</span> <span class=\"o\">=</span> <span class=\"s\">\"unix:/path/to/myproject.sock\"</span>\n</code></pre></div></div>\n\n<p>This has slight performance advantages, since they can avoid some checks and operations (like routing)<sup>[<a href=\"https://serverfault.com/questions/124517/what-is-the-difference-between-unix-sockets-and-tcp-ip-sockets/124518#124518\">3</a>]</sup>.</p>\n\n<p>You can even specify multiple bind addresses as a list, which is especially useful if you want to serve your application through <em>HTTPS</em>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bind</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">\"192.168.x.y:80\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"192.168.x.y:443\"</span>\n<span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>Serving requests will require an SSL certificate, which deserves another post to be discussed in detail.</p>\n\n<h2 id=\"run-gunicorn-as-a-background-process\">Run Gunicorn as a background process</h2>\n\n<p>To run the <em>Gunicorn</em> process in the background, you need to configure <em>Supervisor</em> or <em>Systemd</em>.\nThere are plenty articles online that explain how to configure both of them with <em>Gunicorn</em>, but after doing the reasearch I consider <em>Supervisor</em> to be the more versatile and simpler one to configure, even though <em>Systemd</em> is probably already installed on your Linux distribution.</p>\n\n<p>In <a href=\"/production%20deployment/2023/06/29/supervisor.html\">the next post</a> I describe how to run Gunicorn as a background process with both <em>Supervisor</em> <strong>and</strong> <em>Systemd</em>, so you should go ahead and make your own decision which one you like more.</p>\n\n<h2 id=\"further-reading\">Further Reading</h2>\n<ul>\n  <li><a href=\"https://docs.gunicorn.org/en/stable/index.html\">docs.gunicorn.org</a>: <em>Gunicorn</em> documentation</li>\n  <li><a href=\"https://www.fullstackpython.com/wsgi-servers.html\">WSGI Servers</a>: A more detailed explanation on WSGI servers and other Gunicorn alternatives</li>\n  <li>More WSGI learning resources: <a href=\"https://wsgi.readthedocs.io/en/latest/\">wsgi.readthedocs.io</a></li>\n</ul>\n\n","tags":["gunicorn"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/23/gunicorn.html","previous":{"title":"SQLite in production","tags":["SQLite","databases","DjangoCon"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/18/sqlite.html","collection":"posts","path":"_posts/2023-06-14-sqlite.md","relative_path":"_posts/2023-06-14-sqlite.md","date":"2023-06-18 00:00:00 +0000","id":"/production%20deployment/2023/06/18/sqlite","draft":false,"layout":"post","published":true,"author":"victor","slug":"sqlite","ext":".md"},"collection":"posts","next":{"title":"Manage background processes with Supervisor or Systemd","tags":["supervisor","systemd","gunicorn"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/29/supervisor.html","collection":"posts","path":"_posts/2023-06-25-supervisor.md","relative_path":"_posts/2023-06-25-supervisor.md","date":"2023-06-29 00:00:00 +0000","id":"/production%20deployment/2023/06/29/supervisor","draft":false,"layout":"post","published":true,"author":"victor","slug":"supervisor","ext":".md"},"path":"_posts/2023-06-21-gunicorn.md","output":"<!DOCTYPE html>\n<!--\n    So Simple Jekyll Theme 3.2.0\n    Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes\n    Free for personal and commercial use under the MIT license\n    https://github.com/mmistakes/so-simple-theme/blob/master/LICENSE\n-->\n<html lang=\"en-US\" class=\"no-js\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  \n  \n\n  \n    \n    <!-- Begin Jekyll SEO tag v2.8.0 -->\n<title>Gunicorn from scratch | Minimalist Django</title>\n<meta name=\"generator\" content=\"Jekyll v4.2.2\" />\n<meta property=\"og:title\" content=\"Gunicorn from scratch\" />\n<meta name=\"author\" content=\"Victor Movileanu\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta name=\"description\" content=\"How to run your Django application through a WSGI server like Gunicorn\" />\n<meta property=\"og:description\" content=\"How to run your Django application through a WSGI server like Gunicorn\" />\n<link rel=\"canonical\" href=\"https://minimalistdjango.com/production%20deployment/2023/06/23/gunicorn.html\" />\n<meta property=\"og:url\" content=\"https://minimalistdjango.com/production%20deployment/2023/06/23/gunicorn.html\" />\n<meta property=\"og:site_name\" content=\"Minimalist Django\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-06-23T00:00:00+00:00\" />\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta property=\"twitter:title\" content=\"Gunicorn from scratch\" />\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"author\":{\"@type\":\"Person\",\"name\":\"Victor Movileanu\"},\"dateModified\":\"2023-06-23T00:00:00+00:00\",\"datePublished\":\"2023-06-23T00:00:00+00:00\",\"description\":\"How to run your Django application through a WSGI server like Gunicorn\",\"headline\":\"Gunicorn from scratch\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://minimalistdjango.com/production%20deployment/2023/06/23/gunicorn.html\"},\"publisher\":{\"@type\":\"Organization\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://minimalistdjango.com/images/django-rocket.svg\"},\"name\":\"Victor Movileanu\"},\"url\":\"https://minimalistdjango.com/production%20deployment/2023/06/23/gunicorn.html\"}</script>\n<!-- End Jekyll SEO tag -->\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-PP61HM8LXR\"></script>\n<script>\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-PP61HM8LXR');\n</script>\n\n  \n\n  <script>\n    /* Cut the mustard */\n    if ( 'querySelector' in document && 'addEventListener' in window ) {\n      document.documentElement.className = document.documentElement.className.replace(/\\bno-js\\b/g, '') + 'js';\n    }\n  </script>\n\n  <link rel=\"stylesheet\" href=\"/assets/css/main.css\">\n  <link rel=\"stylesheet\" href=\"/assets/css/skins/default.css\">\n  <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Minimalist Django\" href=\"/feed.xml\">\n<!-- start custom head snippets -->\n\n<!-- insert favicons. use http://realfavicongenerator.net/ -->\n\n<!-- end custom head snippets -->\n\n</head>\n\n\n  <body class=\"layout--post  gunicorn-from-scratch\">\n    <nav class=\"skip-links\">\n  <h2 class=\"screen-reader-text\">Skip links</h2>\n  <ul>\n    <li><a href=\"#primary-nav\" class=\"screen-reader-shortcut\">Skip to primary navigation</a></li>\n    <li><a href=\"#main\" class=\"screen-reader-shortcut\">Skip to content</a></li>\n    <li><a href=\"#footer\" class=\"screen-reader-shortcut\">Skip to footer</a></li>\n  </ul>\n</nav>\n\n    \n  <div class=\"navigation-wrapper\">\n    <a href=\"#menu-toggle\" id=\"menu-toggle\">Menu</a>\n    <nav id=\"primary-nav\" class=\"site-nav animated drop\">\n      <ul><li><a href=\"/\">Home</a></li><li><a href=\"/categories/\">Categories</a></li><li><a href=\"/tags/\">Tags</a></li><li><a href=\"/about/\">About</a></li></ul>\n    </nav>\n  </div><!-- /.navigation-wrapper -->\n\n\n    <header class=\"masthead\">\n  <div class=\"wrap\">\n    \n      <a href=\"/\" class=\"site-logo\" rel=\"home\" title=\"Minimalist Django\">\n        <img src=\"/images/django-rocket.svg\" class=\"site-logo-img animated fadeInDown\" alt=\"Minimalist Django\">\n      </a>\n    \n    \n    \n      \n        <div class=\"site-title animated fadeIn\"><a href=\"/\">Minimalist Django</a></div>\n      \n      <p class=\"site-description animated fadeIn\" itemprop=\"description\">The minimalist way of web development</p>\n    \n  </div>\n</header><!-- /.masthead -->\n\n\n    <main id=\"main\" class=\"main-content\" aria-label=\"Content\">\n  <article class=\"h-entry\">\n    \n\n    <div class=\"page-wrapper\">\n      <header class=\"page-header\">\n        \n        \n          <h1 id=\"page-title\" class=\"page-title p-name\">Gunicorn from scratch\n</h1>\n        \n      </header>\n\n      <div class=\"page-sidebar\">\n        <div class=\"page-author h-card p-author\"><img src=\"/images/me.jpg\" class=\"author-avatar u-photo\" alt=\"Victor Movileanu\"><div class=\"author-info\"><div class=\"author-name\">\n        <span class=\"p-name\">Victor Movileanu</span>\n      </div><ul class=\"author-links\"><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://twitter.com/ViggieSmalls5\"><i class=\"fab fa-twitter-square fa-lg\" title=\"Twitter\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://instagram.com/vickym.rulez\"><i class=\"fab fa-instagram fa-lg\" title=\"Instagram\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://github.com/movileanuv\"><i class=\"fab fa-github-square fa-lg\" title=\"GitHub\"></i></a>\n          </li></ul>\n    <time class=\"page-date dt-published\" datetime=\"2023-06-23T00:00:00+00:00\"><a class=\"u-url\" href=\"\">June 23, 2023</a>\n</time>\n\n  </div>\n</div>\n\n        \n  <h3 class=\"page-taxonomies-title\">Categories</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">Production deployment</li>\n  </ul>\n\n\n        \n  <h3 class=\"page-taxonomies-title\">Tags</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">gunicorn</li>\n  </ul>\n\n\n      </div>\n\n      <div class=\"page-content\">\n        <div class=\"e-content\">\n          <p>When you create a new <em>Django</em> project with <code class=\"language-plaintext highlighter-rouge\">django-admin startproject</code>, it automatically creates a <code class=\"language-plaintext highlighter-rouge\">wsgi.py</code> file for you.\nThis is a module containing a WSGI application object called <code class=\"language-plaintext highlighter-rouge\">application</code> that can be called by any type of WSGI server.\nHere is how this works.</p>\n\n<h2 id=\"the-simplest-wsgi-application\">The simplest WSGI application</h2>\n\n<p><em>WSGI</em>: stands for <em>Web Server Gateway Interface</em>. It is an interface specification by which server and application communicate.\nThe application provides a function which the server calls for each request:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">application</span><span class=\"p\">(</span><span class=\"n\">environ</span><span class=\"p\">,</span> <span class=\"n\">start_response</span><span class=\"p\">):</span>\n    <span class=\"p\">...</span>\n</code></pre></div></div>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">environ</code> is a Python dictionary containing the CGI-defined environment variables plus a few extras.</li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">start_response</code> is a callback by which the application returns the HTTP headers.</p>\n\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">start_response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">response_headers</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </li>\n  <li><code class=\"language-plaintext highlighter-rouge\">status</code> is an HTTP status string (e.g., “200 OK”)</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">response_headers</code> is a list of 2-tuples, the HTTP headers in key-value format</li>\n</ul>\n\n<p>The application function then returns an iterable of body chunks, that need to be bytes, e.g. <code class=\"language-plaintext highlighter-rouge\">[b\"&lt;html&gt;Hello, world!&lt;/html&gt;\"]</code>.\nSo the simplest WSGI application can be:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">application</span><span class=\"p\">(</span><span class=\"n\">environ</span><span class=\"p\">,</span> <span class=\"n\">start_response</span><span class=\"p\">):</span>\n    <span class=\"n\">start_response</span><span class=\"p\">(</span><span class=\"s\">\"200 OK\"</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s\">\"&lt;html&gt;Hello, world!&lt;/html&gt;\"</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<h2 id=\"gunicorn\">Gunicorn</h2>\n\n<p>Normally during development you use <code class=\"language-plaintext highlighter-rouge\">python manage.py runserver</code> to start a web server, but it is not the recommended way in production<sup>[<a href=\"https://docs.djangoproject.com/en/dev/ref/django-admin/#runserver\">1</a>]</sup>.\nBasically it is also a WSGI application that has some additional features such as reloading on code changes, but it has not gone through security audits or performance tests.</p>\n\n<p>Gunicorn stands for <strong>‘Green Unicorn’</strong> and is a Python WSGI HTTP Server for UNIX. \nIt has no dependencies and can be installed with <em>pip</em> or <em>poetry</em>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>poetry add gunicorn\n</code></pre></div></div>\n\n<p>Assuming you have a project structure like this:</p>\n\n<div class=\"language-plaintext tree-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.\n├── manage.py\n└── project\n    ├── __init__.py\n    ├── asgi.py\n    ├── settings.py\n    ├── urls.py\n    └── wsgi.py\n</code></pre></div></div>\n\n<p>you can run</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gunicorn project.wsgi:application\n</code></pre></div></div>\n\n<p>inside your project directory and it will spawn two processes that you can see when you call <code class=\"language-plaintext highlighter-rouge\">ps aux | grep gunicorn</code>. \nOne of them is the parent process that controlls all the workers, the other one is the process for the worker. By default it will only spawn one worker and listen to HTTP requests on <code class=\"language-plaintext highlighter-rouge\">127.0.0.1:8000</code>.</p>\n\n<h2 id=\"configure-gunicorn\">Configure Gunicorn</h2>\n\n<p>Gunicorn detects if there is any file called <code class=\"language-plaintext highlighter-rouge\">gunicorn.conf.py</code> inside the directory where it is executed, or you can specify a different path with the <code class=\"language-plaintext highlighter-rouge\">-c</code> flag.\nThe simplest way is to place it next to your manage.py file:</p>\n\n<div class=\"language-plaintext tree-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.\n├── gunicorn.conf.py    &lt;--- create here\n├── manage.py\n└── project\n    ├── __init__.py\n    ├── asgi.py\n    ├── settings.py\n    ├── urls.py\n    └── wsgi.py\n</code></pre></div></div>\n\n<h3 id=\"multiple-workers\">Multiple workers</h3>\n\n<p>You can spawn multiple gunicorn processes that will serve your application to make use of the computing power of your server, based on the number of CPUs the machine has.\nTo find out the number of processors on your UNIX machine, you can execute <a href=\"https://stackoverflow.com/questions/6481005/how-to-obtain-the-number-of-cpus-cores-in-linux-from-the-command-line\"><code class=\"language-plaintext highlighter-rouge\">grep -c ^processor /proc/cpuinfo</code></a>.\nGunicorn suggests to run <code class=\"language-plaintext highlighter-rouge\">2-4 x $(NUM_CORES)</code> of workers<sup>[<a href=\"https://docs.gunicorn.org/en/stable/settings.html#workers\">2</a>]</sup>.\nThe reasoning behind it is that, while one of the processes is occupied with handling I/O or waiting for a response from the database, the other one can take over and handle a new request.</p>\n\n<p>Here is how the <code class=\"language-plaintext highlighter-rouge\">gunicorn.conf.py</code> file might look like:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n\n<span class=\"n\">workers</span> <span class=\"o\">=</span> <span class=\"n\">multiprocessing</span><span class=\"p\">.</span><span class=\"n\">cpu_count</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n</code></pre></div></div>\n\n<h3 id=\"listen-to-different-ips\">Listen to different IPs</h3>\n\n<p>By default the Gunicorn process will listen for http request on <code class=\"language-plaintext highlighter-rouge\">127.0.0.1:8000</code>.\nYou can configure Gunicorn to listen to different ports, or even to a public IP address.\nYou can easily test this by finding out your computer’s IP address inside your local network with <code class=\"language-plaintext highlighter-rouge\">ifconfig</code>  and set the bind address in the <code class=\"language-plaintext highlighter-rouge\">gunicorn.conf.py</code> file like this:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bind</span> <span class=\"o\">=</span> <span class=\"s\">\"192.168.x.y:8000\"</span>\n</code></pre></div></div>\n\n<p>and navigate from your phone to your computer with this address. \nPorts smaller than 1024 require additional configuration.</p>\n\n<p>In case you plan to use a proxy server like Nginx on the same machine, you might consider using a socket for proxying requests to your Gunicorn server.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bind</span> <span class=\"o\">=</span> <span class=\"s\">\"unix:/path/to/myproject.sock\"</span>\n</code></pre></div></div>\n\n<p>This has slight performance advantages, since they can avoid some checks and operations (like routing)<sup>[<a href=\"https://serverfault.com/questions/124517/what-is-the-difference-between-unix-sockets-and-tcp-ip-sockets/124518#124518\">3</a>]</sup>.</p>\n\n<p>You can even specify multiple bind addresses as a list, which is especially useful if you want to serve your application through <em>HTTPS</em>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bind</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">\"192.168.x.y:80\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"192.168.x.y:443\"</span>\n<span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>Serving requests will require an SSL certificate, which deserves another post to be discussed in detail.</p>\n\n<h2 id=\"run-gunicorn-as-a-background-process\">Run Gunicorn as a background process</h2>\n\n<p>To run the <em>Gunicorn</em> process in the background, you need to configure <em>Supervisor</em> or <em>Systemd</em>.\nThere are plenty articles online that explain how to configure both of them with <em>Gunicorn</em>, but after doing the reasearch I consider <em>Supervisor</em> to be the more versatile and simpler one to configure, even though <em>Systemd</em> is probably already installed on your Linux distribution.</p>\n\n<p>In <a href=\"/production%20deployment/2023/06/29/supervisor.html\">the next post</a> I describe how to run Gunicorn as a background process with both <em>Supervisor</em> <strong>and</strong> <em>Systemd</em>, so you should go ahead and make your own decision which one you like more.</p>\n\n<h2 id=\"further-reading\">Further Reading</h2>\n<ul>\n  <li><a href=\"https://docs.gunicorn.org/en/stable/index.html\">docs.gunicorn.org</a>: <em>Gunicorn</em> documentation</li>\n  <li><a href=\"https://www.fullstackpython.com/wsgi-servers.html\">WSGI Servers</a>: A more detailed explanation on WSGI servers and other Gunicorn alternatives</li>\n  <li>More WSGI learning resources: <a href=\"https://wsgi.readthedocs.io/en/latest/\">wsgi.readthedocs.io</a></li>\n</ul>\n\n\n        </div>\n\n        \n\n        \n\n        <nav class=\"page-pagination\" role=\"navigation\">\n  \n    <a class=\"page-previous\" href=\"/production%20deployment/2023/06/18/sqlite.html\">\n      <h4 class=\"page-pagination-label\">Previous</h4>\n      <span class=\"page-pagination-title\">\n        <i class=\"fas fa-arrow-left\"></i> SQLite in production\n\n      </span>\n    </a>\n  \n\n  \n    <a class=\"page-next\" href=\"/production%20deployment/2023/06/29/supervisor.html\">\n      <h4 class=\"page-pagination-label\">Next</h4>\n      <span class=\"page-pagination-title\">\n        Manage background processes with Supervisor or Systemd\n <i class=\"fas fa-arrow-right\"></i>\n      </span>\n    </a>\n  \n</nav>\n\n      </div>\n    </div>\n  </article>\n</main>\n\n\n    <footer id=\"footer\" class=\"site-footer\">\n  <!-- start custom footer snippets -->\n\n<!-- end custom footer snippets -->\n<div class=\"copyright\">\n    \n      <p>&copy; 2023 Minimalist Django. Powered by <a href=\"https://jekyllrb.com\" rel=\"nofollow\">Jekyll</a> &amp; <a href=\"https://github.com/mmistakes/so-simple-theme\" rel=\"nofollow\">So Simple</a>.</p>\n    \n  </div>\n</footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n  <script src=\"/assets/js/main.min.js\"></script>\n  <script src=\"https://use.fontawesome.com/releases/v5.0.12/js/all.js\"></script>\n\n\n  </body>\n\n</html>\n","relative_path":"_posts/2023-06-21-gunicorn.md","date":"2023-06-23 00:00:00 +0000","id":"/production%20deployment/2023/06/23/gunicorn","excerpt":"How to run your Django application through a WSGI server like Gunicorn","draft":false,"layout":"post","published":true,"author":"victor","slug":"gunicorn","ext":".md"},"path":"_posts/2023-06-14-sqlite.md","output":"<!DOCTYPE html>\n<!--\n    So Simple Jekyll Theme 3.2.0\n    Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes\n    Free for personal and commercial use under the MIT license\n    https://github.com/mmistakes/so-simple-theme/blob/master/LICENSE\n-->\n<html lang=\"en-US\" class=\"no-js\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  \n  \n\n  \n    \n    <!-- Begin Jekyll SEO tag v2.8.0 -->\n<title>SQLite in production | Minimalist Django</title>\n<meta name=\"generator\" content=\"Jekyll v4.2.2\" />\n<meta property=\"og:title\" content=\"SQLite in production\" />\n<meta name=\"author\" content=\"Victor Movileanu\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta name=\"description\" content=\"How SQLite can be used in production\" />\n<meta property=\"og:description\" content=\"How SQLite can be used in production\" />\n<link rel=\"canonical\" href=\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\" />\n<meta property=\"og:url\" content=\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\" />\n<meta property=\"og:site_name\" content=\"Minimalist Django\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-06-18T00:00:00+00:00\" />\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta property=\"twitter:title\" content=\"SQLite in production\" />\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"author\":{\"@type\":\"Person\",\"name\":\"Victor Movileanu\"},\"dateModified\":\"2023-06-18T00:00:00+00:00\",\"datePublished\":\"2023-06-18T00:00:00+00:00\",\"description\":\"How SQLite can be used in production\",\"headline\":\"SQLite in production\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\"},\"publisher\":{\"@type\":\"Organization\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://minimalistdjango.com/images/django-rocket.svg\"},\"name\":\"Victor Movileanu\"},\"url\":\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\"}</script>\n<!-- End Jekyll SEO tag -->\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-PP61HM8LXR\"></script>\n<script>\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-PP61HM8LXR');\n</script>\n\n  \n\n  <script>\n    /* Cut the mustard */\n    if ( 'querySelector' in document && 'addEventListener' in window ) {\n      document.documentElement.className = document.documentElement.className.replace(/\\bno-js\\b/g, '') + 'js';\n    }\n  </script>\n\n  <link rel=\"stylesheet\" href=\"/assets/css/main.css\">\n  <link rel=\"stylesheet\" href=\"/assets/css/skins/default.css\">\n  <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Minimalist Django\" href=\"/feed.xml\">\n<!-- start custom head snippets -->\n\n<!-- insert favicons. use http://realfavicongenerator.net/ -->\n\n<!-- end custom head snippets -->\n\n</head>\n\n\n  <body class=\"layout--post  sqlite-in-production\">\n    <nav class=\"skip-links\">\n  <h2 class=\"screen-reader-text\">Skip links</h2>\n  <ul>\n    <li><a href=\"#primary-nav\" class=\"screen-reader-shortcut\">Skip to primary navigation</a></li>\n    <li><a href=\"#main\" class=\"screen-reader-shortcut\">Skip to content</a></li>\n    <li><a href=\"#footer\" class=\"screen-reader-shortcut\">Skip to footer</a></li>\n  </ul>\n</nav>\n\n    \n  <div class=\"navigation-wrapper\">\n    <a href=\"#menu-toggle\" id=\"menu-toggle\">Menu</a>\n    <nav id=\"primary-nav\" class=\"site-nav animated drop\">\n      <ul><li><a href=\"/\">Home</a></li><li><a href=\"/categories/\">Categories</a></li><li><a href=\"/tags/\">Tags</a></li><li><a href=\"/about/\">About</a></li></ul>\n    </nav>\n  </div><!-- /.navigation-wrapper -->\n\n\n    <header class=\"masthead\">\n  <div class=\"wrap\">\n    \n      <a href=\"/\" class=\"site-logo\" rel=\"home\" title=\"Minimalist Django\">\n        <img src=\"/images/django-rocket.svg\" class=\"site-logo-img animated fadeInDown\" alt=\"Minimalist Django\">\n      </a>\n    \n    \n    \n      \n        <div class=\"site-title animated fadeIn\"><a href=\"/\">Minimalist Django</a></div>\n      \n      <p class=\"site-description animated fadeIn\" itemprop=\"description\">The minimalist way of web development</p>\n    \n  </div>\n</header><!-- /.masthead -->\n\n\n    <main id=\"main\" class=\"main-content\" aria-label=\"Content\">\n  <article class=\"h-entry\">\n    \n\n    <div class=\"page-wrapper\">\n      <header class=\"page-header\">\n        \n        \n          <h1 id=\"page-title\" class=\"page-title p-name\">SQLite in production\n</h1>\n        \n      </header>\n\n      <div class=\"page-sidebar\">\n        <div class=\"page-author h-card p-author\"><img src=\"/images/me.jpg\" class=\"author-avatar u-photo\" alt=\"Victor Movileanu\"><div class=\"author-info\"><div class=\"author-name\">\n        <span class=\"p-name\">Victor Movileanu</span>\n      </div><ul class=\"author-links\"><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://twitter.com/ViggieSmalls5\"><i class=\"fab fa-twitter-square fa-lg\" title=\"Twitter\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://instagram.com/vickym.rulez\"><i class=\"fab fa-instagram fa-lg\" title=\"Instagram\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://github.com/movileanuv\"><i class=\"fab fa-github-square fa-lg\" title=\"GitHub\"></i></a>\n          </li></ul>\n    <time class=\"page-date dt-published\" datetime=\"2023-06-18T00:00:00+00:00\"><a class=\"u-url\" href=\"\">June 18, 2023</a>\n</time>\n\n  </div>\n</div>\n\n        \n  <h3 class=\"page-taxonomies-title\">Categories</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">Production deployment</li>\n  </ul>\n\n\n        \n  <h3 class=\"page-taxonomies-title\">Tags</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">SQLite</li><li class=\"page-taxonomy\">databases</li><li class=\"page-taxonomy\">DjangoCon</li>\n  </ul>\n\n\n      </div>\n\n      <div class=\"page-content\">\n        <div class=\"e-content\">\n          <p>People say <em>SQLite</em> is a database that is unsuitable for production use because of low performance, inability to handle\nmultiple concurrent writes, and other misconceptions.\nThis article is inspired by a talk at <a href=\"https://youtu.be/yTicYJDT1zE\"><em>DjangoCon 2023</em></a>  and an episode of <a href=\"https://changelog.com/podcast/433\"><em>The Changelog</em></a>.</p>\n\n<iframe class=\"youtube-iframe\" src=\"https://www.youtube.com/embed/yTicYJDT1zE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n\n<h2 id=\"video-summary\">Video summary</h2>\n<ul>\n  <li>SQLite is already in production. You can already see how many applications use SQLite on your computer with this command:\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  find / <span class=\"se\">\\(</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.db\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite3\"</span> <span class=\"se\">\\)</span> <span class=\"nt\">-type</span> f <span class=\"nt\">-exec</span> file <span class=\"o\">{}</span> <span class=\"se\">\\;</span> 2&gt;/dev/null | <span class=\"nb\">grep </span>SQLite\n</code></pre></div>    </div>\n  </li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=682\">11:20</a> it is a serverless database, which means you don’t need to configure an extra host, manage access by your application server, etc.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=866\">14:25</a> No performance loss because of network latency</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=931\">15:31</a> No N + 1 Query problems</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1051\">17:31</a> Concurrent writes are not a problem if you turn <a href=\"https://www.sqlite.org/wal.html\">Write-Ahead Logging</a> for your SQLite database. For this, you can execute <code class=\"language-plaintext highlighter-rouge\">sqlite3 db.sqlite3 'PRAGMA journal_mode=wal;'</code> in your shell.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1142\">19:02</a> Speed up writes even more by reducing the <a href=\"https://www.sqlite.org/pragma.html#pragma_synchronous\">synchronous level</a></li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1253\">20:53</a> You can easily back up the SQLite database with <a href=\"https://litestream.io/\">Litestream</a></li>\n</ul>\n\n<h2 id=\"set-up-django-to-run-with-sqlite\">Set up Django to run with SQLite</h2>\n\n<p>When creating a new Django project, it comes with following default setting for <code class=\"language-plaintext highlighter-rouge\">DATABASES</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"ENGINE\"</span><span class=\"p\">:</span> <span class=\"s\">\"django.db.backends.sqlite3\"</span><span class=\"p\">,</span>\n        <span class=\"s\">\"NAME\"</span><span class=\"p\">:</span> <span class=\"n\">BASE_DIR</span> <span class=\"o\">/</span> <span class=\"s\">\"db.sqlite3\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You can also use <a href=\"https://github.com/jazzband/dj-database-url/\"><code class=\"language-plaintext highlighter-rouge\">dj-database-url</code></a> to configure your <code class=\"language-plaintext highlighter-rouge\">DATABASES</code> setting. In this case, the <code class=\"language-plaintext highlighter-rouge\">DATABASE_URL</code> might look like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>DATABASE_URL=sqlite:///path/to/your/database/file.sqlite3\n</code></pre></div></div>\n\n<p>Now, before you start your django project for the first time, which automatically creates a SQLite database for you, you should create it yourself first, by running:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlite3 db.sqlite3 <span class=\"s1\">'PRAGMA journal_mode=wal; PRAGMA busy_timeout = 5000;'</span>\n</code></pre></div></div>\n\n<p>The PRAGMA synchronous setting is a little bit more tricky, since it does not apply to the database, <a href=\"https://stackoverflow.com/questions/36308801/sqlite3-pragma-synchronous-not-persistent\">but to the database connection</a>.\nHence, you have to change this setting <a href=\"https://stackoverflow.com/a/6843199/5540654\">for all connections opened by the Django app</a>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.signals</span> <span class=\"kn\">import</span> <span class=\"n\">connection_created</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">activate_foreign_keys</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">vendor</span> <span class=\"o\">==</span> <span class=\"s\">'sqlite'</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n        <span class=\"n\">cursor</span><span class=\"p\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s\">'PRAGMA synchronous=1;'</span><span class=\"p\">)</span>\n\n<span class=\"n\">connection_created</span><span class=\"p\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">activate_foreign_keys</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"how-to-configure-litestream-to-back-up-your-database-to-s3\">How to configure Litestream to back up your Database to S3</h2>\n\n<ul>\n  <li><a href=\"https://litestream.io/install/\">Install</a></li>\n  <li><a href=\"https://litestream.io/guides/s3/\">Replicating to Amazon S3</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Running as a Systemd service</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Tips &amp; Caveats</a></li>\n</ul>\n\n<h2 id=\"further-reading\">Further reading</h2>\n<ul>\n  <li>https://tailscale.com/blog/database-for-2022/</li>\n  <li>https://blog.expensify.com/2018/01/08/scaling-sqlite-to-4m-qps-on-a-single-server/</li>\n  <li>https://simonwillison.net/2022/Oct/23/datasette-gunicorn/</li>\n  <li>https://github.com/tomdyson/django-sqlite-load-tests</li>\n</ul>\n\n\n        </div>\n\n        \n\n        \n\n        <nav class=\"page-pagination\" role=\"navigation\">\n  \n    <a class=\"page-previous\" href=\"/development/2023/06/14/set-up-a-django-project.html\">\n      <h4 class=\"page-pagination-label\">Previous</h4>\n      <span class=\"page-pagination-title\">\n        <i class=\"fas fa-arrow-left\"></i> How to set up a Django project\n\n      </span>\n    </a>\n  \n\n  \n    <a class=\"page-next\" href=\"/production%20deployment/2023/06/23/gunicorn.html\">\n      <h4 class=\"page-pagination-label\">Next</h4>\n      <span class=\"page-pagination-title\">\n        Gunicorn from scratch\n <i class=\"fas fa-arrow-right\"></i>\n      </span>\n    </a>\n  \n</nav>\n\n      </div>\n    </div>\n  </article>\n</main>\n\n\n    <footer id=\"footer\" class=\"site-footer\">\n  <!-- start custom footer snippets -->\n\n<!-- end custom footer snippets -->\n<div class=\"copyright\">\n    \n      <p>&copy; 2023 Minimalist Django. Powered by <a href=\"https://jekyllrb.com\" rel=\"nofollow\">Jekyll</a> &amp; <a href=\"https://github.com/mmistakes/so-simple-theme\" rel=\"nofollow\">So Simple</a>.</p>\n    \n  </div>\n</footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n  <script src=\"/assets/js/main.min.js\"></script>\n  <script src=\"https://use.fontawesome.com/releases/v5.0.12/js/all.js\"></script>\n\n\n  </body>\n\n</html>\n","relative_path":"_posts/2023-06-14-sqlite.md","date":"2023-06-18 00:00:00 +0000","id":"/production%20deployment/2023/06/18/sqlite","excerpt":"How SQLite can be used in production","draft":false,"layout":"post","published":true,"author":"victor","slug":"sqlite","ext":".md"},"path":"_posts/2023-06-14-set-up-a-django-project.md","output":"<!DOCTYPE html>\n<!--\n    So Simple Jekyll Theme 3.2.0\n    Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes\n    Free for personal and commercial use under the MIT license\n    https://github.com/mmistakes/so-simple-theme/blob/master/LICENSE\n-->\n<html lang=\"en-US\" class=\"no-js\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  \n  \n\n  \n    \n    <!-- Begin Jekyll SEO tag v2.8.0 -->\n<title>How to set up a Django project | Minimalist Django</title>\n<meta name=\"generator\" content=\"Jekyll v4.2.2\" />\n<meta property=\"og:title\" content=\"How to set up a Django project\" />\n<meta name=\"author\" content=\"Victor Movileanu\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta name=\"description\" content=\"How to start a Django project the right way\" />\n<meta property=\"og:description\" content=\"How to start a Django project the right way\" />\n<link rel=\"canonical\" href=\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\" />\n<meta property=\"og:url\" content=\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\" />\n<meta property=\"og:site_name\" content=\"Minimalist Django\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-06-14T10:00:00+00:00\" />\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta property=\"twitter:title\" content=\"How to set up a Django project\" />\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"author\":{\"@type\":\"Person\",\"name\":\"Victor Movileanu\"},\"dateModified\":\"2023-06-14T10:00:00+00:00\",\"datePublished\":\"2023-06-14T10:00:00+00:00\",\"description\":\"How to start a Django project the right way\",\"headline\":\"How to set up a Django project\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\"},\"publisher\":{\"@type\":\"Organization\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://minimalistdjango.com/images/django-rocket.svg\"},\"name\":\"Victor Movileanu\"},\"url\":\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\"}</script>\n<!-- End Jekyll SEO tag -->\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-PP61HM8LXR\"></script>\n<script>\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-PP61HM8LXR');\n</script>\n\n  \n\n  <script>\n    /* Cut the mustard */\n    if ( 'querySelector' in document && 'addEventListener' in window ) {\n      document.documentElement.className = document.documentElement.className.replace(/\\bno-js\\b/g, '') + 'js';\n    }\n  </script>\n\n  <link rel=\"stylesheet\" href=\"/assets/css/main.css\">\n  <link rel=\"stylesheet\" href=\"/assets/css/skins/default.css\">\n  <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Minimalist Django\" href=\"/feed.xml\">\n<!-- start custom head snippets -->\n\n<!-- insert favicons. use http://realfavicongenerator.net/ -->\n\n<!-- end custom head snippets -->\n\n</head>\n\n\n  <body class=\"layout--post  how-to-set-up-a-django-project\">\n    <nav class=\"skip-links\">\n  <h2 class=\"screen-reader-text\">Skip links</h2>\n  <ul>\n    <li><a href=\"#primary-nav\" class=\"screen-reader-shortcut\">Skip to primary navigation</a></li>\n    <li><a href=\"#main\" class=\"screen-reader-shortcut\">Skip to content</a></li>\n    <li><a href=\"#footer\" class=\"screen-reader-shortcut\">Skip to footer</a></li>\n  </ul>\n</nav>\n\n    \n  <div class=\"navigation-wrapper\">\n    <a href=\"#menu-toggle\" id=\"menu-toggle\">Menu</a>\n    <nav id=\"primary-nav\" class=\"site-nav animated drop\">\n      <ul><li><a href=\"/\">Home</a></li><li><a href=\"/categories/\">Categories</a></li><li><a href=\"/tags/\">Tags</a></li><li><a href=\"/about/\">About</a></li></ul>\n    </nav>\n  </div><!-- /.navigation-wrapper -->\n\n\n    <header class=\"masthead\">\n  <div class=\"wrap\">\n    \n      <a href=\"/\" class=\"site-logo\" rel=\"home\" title=\"Minimalist Django\">\n        <img src=\"/images/django-rocket.svg\" class=\"site-logo-img animated fadeInDown\" alt=\"Minimalist Django\">\n      </a>\n    \n    \n    \n      \n        <div class=\"site-title animated fadeIn\"><a href=\"/\">Minimalist Django</a></div>\n      \n      <p class=\"site-description animated fadeIn\" itemprop=\"description\">The minimalist way of web development</p>\n    \n  </div>\n</header><!-- /.masthead -->\n\n\n    <main id=\"main\" class=\"main-content\" aria-label=\"Content\">\n  <article class=\"h-entry\">\n    \n\n    <div class=\"page-wrapper\">\n      <header class=\"page-header\">\n        \n        \n          <h1 id=\"page-title\" class=\"page-title p-name\">How to set up a Django project\n</h1>\n        \n      </header>\n\n      <div class=\"page-sidebar\">\n        <div class=\"page-author h-card p-author\"><img src=\"/images/me.jpg\" class=\"author-avatar u-photo\" alt=\"Victor Movileanu\"><div class=\"author-info\"><div class=\"author-name\">\n        <span class=\"p-name\">Victor Movileanu</span>\n      </div><ul class=\"author-links\"><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://twitter.com/ViggieSmalls5\"><i class=\"fab fa-twitter-square fa-lg\" title=\"Twitter\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://instagram.com/vickym.rulez\"><i class=\"fab fa-instagram fa-lg\" title=\"Instagram\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://github.com/movileanuv\"><i class=\"fab fa-github-square fa-lg\" title=\"GitHub\"></i></a>\n          </li></ul>\n    <time class=\"page-date dt-published\" datetime=\"2023-06-14T10:00:00+00:00\"><a class=\"u-url\" href=\"\">June 14, 2023</a>\n</time>\n\n  </div>\n</div>\n\n        \n  <h3 class=\"page-taxonomies-title\">Categories</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">Development</li>\n  </ul>\n\n\n        \n  <h3 class=\"page-taxonomies-title\">Tags</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">pyenv</li><li class=\"page-taxonomy\">poetry</li>\n  </ul>\n\n\n      </div>\n\n      <div class=\"page-content\">\n        <div class=\"e-content\">\n          <p><img src=\"/images/xkcd-startling.png\" alt=\"xkcd meme on regular repetitive tasks\" />\n<a href=\"https://xkcd.com/354/\" target=\"_blank\">https://xkcd.com/354/</a></p>\n\n<h2 id=\"install-pyenv\">Choose your Python version with <em>pyenv</em></h2>\n\n<p><a href=\"https://github.com/pyenv/pyenv#installation\" target=\"_blank\"><em>Pyenv</em></a> allows you to easily manage multiple Python versions on your system, which is particularly useful when working with different Django projects that require specific versions of Python.</p>\n\n<p>You can easily install pyenv with curl:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl https://pyenv.run | bash\n</code></pre></div></div>\n\n<p>Then add the following lines to your <code class=\"language-plaintext highlighter-rouge\">.bashrc</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">export </span><span class=\"nv\">PYENV_ROOT</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$HOME</span><span class=\"s2\">/.pyenv\"</span>\n<span class=\"nb\">command</span> <span class=\"nt\">-v</span> pyenv <span class=\"o\">&gt;</span>/dev/null <span class=\"o\">||</span> <span class=\"nb\">export </span><span class=\"nv\">PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$PYENV_ROOT</span><span class=\"s2\">/bin:</span><span class=\"nv\">$PATH</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv virtualenv-init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n</code></pre></div></div>\n\n<p>To use a specific python version for your project, execute</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pyenv <span class=\"nb\">install </span>3.11.3\npyenv <span class=\"nb\">local </span>3.11.3\n</code></pre></div></div>\n\n<p>This will create a <code class=\"language-plaintext highlighter-rouge\">.python-version</code> file in your project’s director, that specifies the currently used python version.\nYou can verify by executing <code class=\"language-plaintext highlighter-rouge\">python --version</code>.</p>\n\n<h2 id=\"manage-your-dependencies-with-poetry\">Manage your dependencies with <em>poetry</em></h2>\n\n<p>Dependency management is important because external libraries can change over time, and upgrading them without proper management can potentially crash your application.\n<a href=\"https://python-poetry.org/docs/#installation\" target=\"_blank\"><em>Poetry</em></a> incorporates everything you need to isolate your project and manage your dependencies.</p>\n\n<p>You can install poetry outside your project’s directory with</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-sSL</span> https://install.python-poetry.org | python3 -\n</code></pre></div></div>\n\n<p>Here are some useful commands that you will always come across:</p>\n\n<ol>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#init\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry init</code></a> you can easily generate a new <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file inside the current directory, that keeps track of the project dependencies</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#add\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry add &lt;package-name&gt;</code></a> you can add a new package to your <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file and immediately install it in your virtual environment</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#shell\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry shell</code></a> you activate your virtual environment and run it isolated from other projects</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#export\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry export</code></a> you can write your dependencies in a format that can be easily installed with <a href=\"https://pip.pypa.io/en/stable/installation/\">pip</a></li>\n</ol>\n\n<blockquote class=\"tip-content\">\n  <h2 id=\"-tip\">🤫 Tip</h2>\n  <p>Create a <code class=\"language-plaintext highlighter-rouge\">requirements/</code> directory to separate development, test and production requirements.</p>\n</blockquote>\n\n<h2 id=\"tldr\">TL;DR</h2>\n\n<p>Here is a quick run-through on how to set up a new Django project after having successfully installed <em>pyenv</em> and <em>poetry</em>:</p>\n\n<script src=\"https://gist.github.com/movileanuv/56fcce4d2351ab096cbd10e97211782f.js\"></script>\n\n<h2 id=\"further-reading\">Further Reading</h2>\n\n<ul>\n  <li><a href=\"https://realpython.com/dependency-management-python-poetry/\" target=\"_blank\">RealPython</a>: More details on how to work with poetry</li>\n  <li><a href=\"https://www.b-list.org/weblog/2022/may/13/boring-python-dependencies/\" target=\"_blank\">Boring Python: dependency management</a>: Great article that describes how to work with tools like “pip” and “venv” and what you have to look out for</li>\n  <li><a href=\"https://www.youtube.com/watch?v=-YEUFGFHWgQ\">Youtube: Bootstrapping Your Local Python Environment</a>:\nJust a regular video discussing python environments, but I like this one: <strong>Don’t use <code class=\"language-plaintext highlighter-rouge\">sudo</code> when you set up your python envrionment</strong></li>\n</ul>\n\n\n        </div>\n\n        \n\n        \n\n        <nav class=\"page-pagination\" role=\"navigation\">\n  \n    <a class=\"page-previous\" href=\"/production%20deployment/2023/06/10/virtualbox.html\">\n      <h4 class=\"page-pagination-label\">Previous</h4>\n      <span class=\"page-pagination-title\">\n        <i class=\"fas fa-arrow-left\"></i> Set up a VirtualBox VM\n\n      </span>\n    </a>\n  \n\n  \n    <a class=\"page-next\" href=\"/production%20deployment/2023/06/18/sqlite.html\">\n      <h4 class=\"page-pagination-label\">Next</h4>\n      <span class=\"page-pagination-title\">\n        SQLite in production\n <i class=\"fas fa-arrow-right\"></i>\n      </span>\n    </a>\n  \n</nav>\n\n      </div>\n    </div>\n  </article>\n</main>\n\n\n    <footer id=\"footer\" class=\"site-footer\">\n  <!-- start custom footer snippets -->\n\n<!-- end custom footer snippets -->\n<div class=\"copyright\">\n    \n      <p>&copy; 2023 Minimalist Django. Powered by <a href=\"https://jekyllrb.com\" rel=\"nofollow\">Jekyll</a> &amp; <a href=\"https://github.com/mmistakes/so-simple-theme\" rel=\"nofollow\">So Simple</a>.</p>\n    \n  </div>\n</footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n  <script src=\"/assets/js/main.min.js\"></script>\n  <script src=\"https://use.fontawesome.com/releases/v5.0.12/js/all.js\"></script>\n\n\n  </body>\n\n</html>\n","relative_path":"_posts/2023-06-14-set-up-a-django-project.md","date":"2023-06-14 10:00:00 +0000","id":"/development/2023/06/14/set-up-a-django-project","excerpt":"How to start a Django project the right way","draft":false,"layout":"post","published":true,"author":"victor","slug":"set-up-a-django-project","ext":".md"},
        "date": "2023-06-14 10:00:00 +0000",
        "date_humanized": "June 14, 2023"
      },{
        "title": "SQLite in production",
        "excerpt":"People say SQLite is a database that is unsuitable for production use because of low performance, inability to handlemultiple concurrent writes, and other misconceptions.This article is inspired by a talk at DjangoCon 2023  and an episode of The Changelog. Video summary   SQLite is already in production. You can already see how many applications use SQLite on your computer with this command:      find / \\( -name \"*.db\" -o -name \"*.sqlite\" -o -name \"*.sqlite3\" \\) -type f -exec file {} \\; 2&gt;/dev/null | grep SQLite        11:20 it is a serverless database, which means you don’t need to configure an extra host, manage access by your application server, etc.  14:25 No performance loss because of network latency  15:31 No N + 1 Query problems  17:31 Concurrent writes are not a problem if you turn Write-Ahead Logging for your SQLite database. For this, you can execute sqlite3 db.sqlite3 'PRAGMA journal_mode=wal;' in your shell.  19:02 Speed up writes even more by reducing the synchronous level  20:53 You can easily back up the SQLite database with LitestreamSet up Django to run with SQLite When creating a new Django project, it comes with following default setting for DATABASES: DATABASES = {    \"default\": {        \"ENGINE\": \"django.db.backends.sqlite3\",        \"NAME\": BASE_DIR / \"db.sqlite3\",    }}You can also use dj-database-url to configure your DATABASES setting. In this case, the DATABASE_URL might look like this: DATABASE_URL=sqlite:///path/to/your/database/file.sqlite3Now, before you start your django project for the first time, which automatically creates a SQLite database for you, you should create it yourself first, by running: sqlite3 db.sqlite3 'PRAGMA journal_mode=wal; PRAGMA busy_timeout = 5000;'The PRAGMA synchronous setting is a little bit more tricky, since it does not apply to the database, but to the database connection.Hence, you have to change this setting for all connections opened by the Django app: from django.db.backends.signals import connection_createddef activate_foreign_keys(sender, connection, **kwargs):    if connection.vendor == 'sqlite':        cursor = connection.cursor()        cursor.execute('PRAGMA synchronous=1;')connection_created.connect(activate_foreign_keys)How to configure Litestream to back up your Database to S3   Install  Replicating to Amazon S3  Running as a Systemd service  Tips &amp; CaveatsFurther reading   https://tailscale.com/blog/database-for-2022/  https://blog.expensify.com/2018/01/08/scaling-sqlite-to-4m-qps-on-a-single-server/  https://simonwillison.net/2022/Oct/23/datasette-gunicorn/  https://github.com/tomdyson/django-sqlite-load-tests","summary": "How SQLite can be used in production",
        "categories": ["Production deployment"],
        "tags": ["SQLite","databases","DjangoCon"],
        "url": "https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html",
        // "meta": {"title":"SQLite in production","content":"<p>People say <em>SQLite</em> is a database that is unsuitable for production use because of low performance, inability to handle\nmultiple concurrent writes, and other misconceptions.\nThis article is inspired by a talk at <a href=\"https://youtu.be/yTicYJDT1zE\"><em>DjangoCon 2023</em></a>  and an episode of <a href=\"https://changelog.com/podcast/433\"><em>The Changelog</em></a>.</p>\n\n<iframe class=\"youtube-iframe\" src=\"https://www.youtube.com/embed/yTicYJDT1zE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n\n<h2 id=\"video-summary\">Video summary</h2>\n<ul>\n  <li>SQLite is already in production. You can already see how many applications use SQLite on your computer with this command:\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  find / <span class=\"se\">\\(</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.db\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite3\"</span> <span class=\"se\">\\)</span> <span class=\"nt\">-type</span> f <span class=\"nt\">-exec</span> file <span class=\"o\">{}</span> <span class=\"se\">\\;</span> 2&gt;/dev/null | <span class=\"nb\">grep </span>SQLite\n</code></pre></div>    </div>\n  </li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=682\">11:20</a> it is a serverless database, which means you don’t need to configure an extra host, manage access by your application server, etc.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=866\">14:25</a> No performance loss because of network latency</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=931\">15:31</a> No N + 1 Query problems</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1051\">17:31</a> Concurrent writes are not a problem if you turn <a href=\"https://www.sqlite.org/wal.html\">Write-Ahead Logging</a> for your SQLite database. For this, you can execute <code class=\"language-plaintext highlighter-rouge\">sqlite3 db.sqlite3 'PRAGMA journal_mode=wal;'</code> in your shell.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1142\">19:02</a> Speed up writes even more by reducing the <a href=\"https://www.sqlite.org/pragma.html#pragma_synchronous\">synchronous level</a></li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1253\">20:53</a> You can easily back up the SQLite database with <a href=\"https://litestream.io/\">Litestream</a></li>\n</ul>\n\n<h2 id=\"set-up-django-to-run-with-sqlite\">Set up Django to run with SQLite</h2>\n\n<p>When creating a new Django project, it comes with following default setting for <code class=\"language-plaintext highlighter-rouge\">DATABASES</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"ENGINE\"</span><span class=\"p\">:</span> <span class=\"s\">\"django.db.backends.sqlite3\"</span><span class=\"p\">,</span>\n        <span class=\"s\">\"NAME\"</span><span class=\"p\">:</span> <span class=\"n\">BASE_DIR</span> <span class=\"o\">/</span> <span class=\"s\">\"db.sqlite3\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You can also use <a href=\"https://github.com/jazzband/dj-database-url/\"><code class=\"language-plaintext highlighter-rouge\">dj-database-url</code></a> to configure your <code class=\"language-plaintext highlighter-rouge\">DATABASES</code> setting. In this case, the <code class=\"language-plaintext highlighter-rouge\">DATABASE_URL</code> might look like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>DATABASE_URL=sqlite:///path/to/your/database/file.sqlite3\n</code></pre></div></div>\n\n<p>Now, before you start your django project for the first time, which automatically creates a SQLite database for you, you should create it yourself first, by running:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlite3 db.sqlite3 <span class=\"s1\">'PRAGMA journal_mode=wal; PRAGMA busy_timeout = 5000;'</span>\n</code></pre></div></div>\n\n<p>The PRAGMA synchronous setting is a little bit more tricky, since it does not apply to the database, <a href=\"https://stackoverflow.com/questions/36308801/sqlite3-pragma-synchronous-not-persistent\">but to the database connection</a>.\nHence, you have to change this setting <a href=\"https://stackoverflow.com/a/6843199/5540654\">for all connections opened by the Django app</a>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.signals</span> <span class=\"kn\">import</span> <span class=\"n\">connection_created</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">activate_foreign_keys</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">vendor</span> <span class=\"o\">==</span> <span class=\"s\">'sqlite'</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n        <span class=\"n\">cursor</span><span class=\"p\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s\">'PRAGMA synchronous=1;'</span><span class=\"p\">)</span>\n\n<span class=\"n\">connection_created</span><span class=\"p\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">activate_foreign_keys</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"how-to-configure-litestream-to-back-up-your-database-to-s3\">How to configure Litestream to back up your Database to S3</h2>\n\n<ul>\n  <li><a href=\"https://litestream.io/install/\">Install</a></li>\n  <li><a href=\"https://litestream.io/guides/s3/\">Replicating to Amazon S3</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Running as a Systemd service</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Tips &amp; Caveats</a></li>\n</ul>\n\n<h2 id=\"further-reading\">Further reading</h2>\n<ul>\n  <li>https://tailscale.com/blog/database-for-2022/</li>\n  <li>https://blog.expensify.com/2018/01/08/scaling-sqlite-to-4m-qps-on-a-single-server/</li>\n  <li>https://simonwillison.net/2022/Oct/23/datasette-gunicorn/</li>\n  <li>https://github.com/tomdyson/django-sqlite-load-tests</li>\n</ul>\n\n","tags":["SQLite","databases","DjangoCon"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/18/sqlite.html","previous":{"title":"How to set up a Django project","content":"<p><img src=\"/images/xkcd-startling.png\" alt=\"xkcd meme on regular repetitive tasks\" />\n<a href=\"https://xkcd.com/354/\" target=\"_blank\">https://xkcd.com/354/</a></p>\n\n<h2 id=\"install-pyenv\">Choose your Python version with <em>pyenv</em></h2>\n\n<p><a href=\"https://github.com/pyenv/pyenv#installation\" target=\"_blank\"><em>Pyenv</em></a> allows you to easily manage multiple Python versions on your system, which is particularly useful when working with different Django projects that require specific versions of Python.</p>\n\n<p>You can easily install pyenv with curl:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl https://pyenv.run | bash\n</code></pre></div></div>\n\n<p>Then add the following lines to your <code class=\"language-plaintext highlighter-rouge\">.bashrc</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">export </span><span class=\"nv\">PYENV_ROOT</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$HOME</span><span class=\"s2\">/.pyenv\"</span>\n<span class=\"nb\">command</span> <span class=\"nt\">-v</span> pyenv <span class=\"o\">&gt;</span>/dev/null <span class=\"o\">||</span> <span class=\"nb\">export </span><span class=\"nv\">PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$PYENV_ROOT</span><span class=\"s2\">/bin:</span><span class=\"nv\">$PATH</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv virtualenv-init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n</code></pre></div></div>\n\n<p>To use a specific python version for your project, execute</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pyenv <span class=\"nb\">install </span>3.11.3\npyenv <span class=\"nb\">local </span>3.11.3\n</code></pre></div></div>\n\n<p>This will create a <code class=\"language-plaintext highlighter-rouge\">.python-version</code> file in your project’s director, that specifies the currently used python version.\nYou can verify by executing <code class=\"language-plaintext highlighter-rouge\">python --version</code>.</p>\n\n<h2 id=\"manage-your-dependencies-with-poetry\">Manage your dependencies with <em>poetry</em></h2>\n\n<p>Dependency management is important because external libraries can change over time, and upgrading them without proper management can potentially crash your application.\n<a href=\"https://python-poetry.org/docs/#installation\" target=\"_blank\"><em>Poetry</em></a> incorporates everything you need to isolate your project and manage your dependencies.</p>\n\n<p>You can install poetry outside your project’s directory with</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-sSL</span> https://install.python-poetry.org | python3 -\n</code></pre></div></div>\n\n<p>Here are some useful commands that you will always come across:</p>\n\n<ol>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#init\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry init</code></a> you can easily generate a new <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file inside the current directory, that keeps track of the project dependencies</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#add\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry add &lt;package-name&gt;</code></a> you can add a new package to your <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file and immediately install it in your virtual environment</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#shell\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry shell</code></a> you activate your virtual environment and run it isolated from other projects</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#export\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry export</code></a> you can write your dependencies in a format that can be easily installed with <a href=\"https://pip.pypa.io/en/stable/installation/\">pip</a></li>\n</ol>\n\n<blockquote class=\"tip-content\">\n  <h2 id=\"-tip\">🤫 Tip</h2>\n  <p>Create a <code class=\"language-plaintext highlighter-rouge\">requirements/</code> directory to separate development, test and production requirements.</p>\n</blockquote>\n\n<h2 id=\"tldr\">TL;DR</h2>\n\n<p>Here is a quick run-through on how to set up a new Django project after having successfully installed <em>pyenv</em> and <em>poetry</em>:</p>\n\n<script src=\"https://gist.github.com/movileanuv/56fcce4d2351ab096cbd10e97211782f.js\"></script>\n\n<h2 id=\"further-reading\">Further Reading</h2>\n\n<ul>\n  <li><a href=\"https://realpython.com/dependency-management-python-poetry/\" target=\"_blank\">RealPython</a>: More details on how to work with poetry</li>\n  <li><a href=\"https://www.b-list.org/weblog/2022/may/13/boring-python-dependencies/\" target=\"_blank\">Boring Python: dependency management</a>: Great article that describes how to work with tools like “pip” and “venv” and what you have to look out for</li>\n  <li><a href=\"https://www.youtube.com/watch?v=-YEUFGFHWgQ\">Youtube: Bootstrapping Your Local Python Environment</a>:\nJust a regular video discussing python environments, but I like this one: <strong>Don’t use <code class=\"language-plaintext highlighter-rouge\">sudo</code> when you set up your python envrionment</strong></li>\n</ul>\n\n","tags":["pyenv","poetry"],"categories":["Development"],"url":"/development/2023/06/14/set-up-a-django-project.html","previous":{"title":"Set up a VirtualBox VM","content":"<p>Having a virtual machine (VM) locally is extremely useful to test provisioning your remote host.\nThis can be really useful when you plan to host your application on an external provider like <a href=\"https://m.do.co/c/c40e38c3b079\" rel=\"sponsored\" target=\"_blank\">DigitalOcean</a>.\nTogether with ansible it will help you learn how to automate your deployment.</p>\n\n<h2 id=\"setup-virtualbox\">Setup VirtualBox</h2>\n\n<ol>\n  <li>Download a Ubuntu iso image and use it to set up a VM.</li>\n  <li>Install <a href=\"https://www.virtualbox.org/\">VirtualBox</a>.\n    <ul>\n      <li><strong>Create a virtual machine</strong>. It is important to <strong>select “Bridged Adapter” in the Network options</strong>. This will allow your host to communicate with the VM via TCP/IP. Configure other options (memory, disk size, etc.) as desired.</li>\n      <li>Optionally, I would suggest to <strong>install the Guest Additions</strong>. This allows you to resize the screen to the window size. First, select from the menu “Insert Guest Additions CD”, then after mounting it you need to execute <code class=\"language-plaintext highlighter-rouge\">autorun.sh</code>. After reboot you can activate from the menu “View &gt; Autoresize Guest Display”</li>\n      <li>Optionally, I would also activate the <strong>bidirectional Drag and Drop</strong> from the menu.</li>\n    </ul>\n  </li>\n  <li>Next, you need to <strong>add your user to the sudoers group</strong>, which is not done by default on installation. For this, you need to follow <a href=\"https://superuser.com/questions/1623376/how-can-i-make-my-own-account-a-sudoers-on-virtualbox/1755286#1755286\">these instructions</a>:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>su -\nsudo adduser &lt;username&gt; sudo\n</code></pre></div>    </div>\n    <p>The root password is the same password as the one you selected for your user in the installation step.</p>\n  </li>\n  <li>Next, you need to allow the VM user to execute <code class=\"language-plaintext highlighter-rouge\">sudo</code> without being prompted for a password. \nThis will allow the execution of the <strong>ansible</strong> tasks that require superuser privilges, without being prompted for a password.\nFor this, on your VM, create a new file <code class=\"language-plaintext highlighter-rouge\">/etc/sudoers.d/&lt;username&gt;</code> inside the <code class=\"language-plaintext highlighter-rouge\">/etc/sudoers.d</code> directory with following content:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;username&gt; ALL=(ALL) NOPASSWD:ALL\n</code></pre></div>    </div>\n    <p>This is not really safe, and you could be more specific with the permissions (e.g. <code class=\"language-plaintext highlighter-rouge\">ALL = NOPASSWD: /bin/apt, /bin/apt-get</code> …), but we don’t want to mess around with security at this point.</p>\n  </li>\n  <li>Next, you want to install an ssh server on your machine, so you can access it from your client via ssh. \nFor this, execute the following commands:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo apt-get install openssh-server\nsudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bck\negrep -v \"^$|^#\" /etc/ssh/sshd_config | sudo tee /etc/ssh/sshd_config\necho \"Port 22\" | sudo tee -a /etc/ssh/sshd_config\nsudo systemctl enable ssh --now\n</code></pre></div>    </div>\n    <p>Explanation:</p>\n    <ul>\n      <li>The first line installs the ssh server</li>\n      <li>The second one copies the default configuration of the ssh server to a separate file as a backup and for later reference</li>\n      <li>The third line only extracts the lines in the original file that are not blank lines or comments, so we can only see the configured variables at one glance</li>\n      <li>The fourth line opens port 22 for ssh connections. For security reasons you could change this to any other port between 1024 and 65536, so attackers have a harder time to guess the correct port</li>\n      <li>The last line finally starts the ssh server and enables it to launch on startup</li>\n    </ul>\n  </li>\n  <li>Next, you need to generate an ssh key on your host, and copy it to the VM with\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ssh-copy-id -i ~/.ssh/id_ed25519.pub &lt;username&gt;@&lt;VM IP Address&gt; -p 22\n</code></pre></div>    </div>\n  </li>\n</ol>\n\n<h2 id=\"setup-ansible\">Setup Ansible</h2>\n\n<p>First things first, you need to install <em>Ansible</em> on your local machine. \nI would recommend to install globally, using <em>pip</em>, but the one provided by your local <em>pyenv</em> installation.\nYou could also install it with your package manager, but it might not be the latest version and would be harder to upgrade.</p>\n\n<p>Let’s take a look at following two files: our inventory <strong>development</strong> and our playbook <strong>playbook.yml</strong>:</p>\n\n<script src=\"https://gist.github.com/movileanuv/835a2c5e287dd1ce5b192da7f503dd3b.js\"></script>\n\n<p>The inventory specifies a hostname that is addressed in the playbook as <code class=\"language-plaintext highlighter-rouge\">hosts: vbox</code>. This tells Ansible which hosts to run this playbook on.\nThere are three other parameters specified for the host:</p>\n<ul>\n  <li><strong>ansible_host</strong>: this is the IP address of the node that ansible will ssh to to execute the playbook</li>\n  <li><strong>ansible_port</strong>: this is the port for the ssh connection</li>\n  <li><strong>ansible_become</strong>: this instructs ansible to become a specific user on the remote host during playbook execution. By default this is <strong>root</strong>. Since most of the commands require superuser privileges, I would rather specify it here than for each task repeatedly, and only in case I need less privileges to perform an action, I specify it per task level.</li>\n</ul>\n\n<p>The playbook goes through the installation process of pyenv step by step</p>\n<ol>\n  <li>It uptates the apt packages list (for debian/ubuntu obviously)</li>\n  <li>It installs the packages required by <em>pyenv</em> for building</li>\n  <li>It installs <em>pyenv</em> via an install script</li>\n  <li>It updates the <code class=\"language-plaintext highlighter-rouge\">.profile</code> of the user to initialize <em>pyenv</em> correctly.</li>\n</ol>\n\n<p>There is a required environment variable ``, that can be specified with the flag <code class=\"language-plaintext highlighter-rouge\">-e</code> on playbook execution, which controls for which user <em>pyenv</em> should be installed. Here is how you would execute the playbook:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook <span class=\"nt\">-i</span> development <span class=\"nt\">-e</span> <span class=\"nv\">user</span><span class=\"o\">=</span>victor playbook.yml\n</code></pre></div></div>\n\n<p>This command will install <em>pyenv</em> for the specified user on the VM and you can check it by logging in as the user on the VM and typing <code class=\"language-plaintext highlighter-rouge\">pyenv</code> into the terminal, which should output all <em>pyenv</em> actions available.</p>\n\n<h2 id=\"further-reading\">Further reading:</h2>\n\n<ul>\n  <li><a href=\"https://forums.virtualbox.org/viewtopic.php?f=35&amp;t=50661\" target=\"_blank\">Resize the Virtual Drive of a VM</a>: By default, the VM might not have enough hard disk space. So this command might be pretty helpful to resize it to the desired size:\n  <code class=\"language-plaintext highlighter-rouge\">VBoxManage modifyhd &lt;absolute path including the name and extension&gt; --resize 20480</code></li>\n  <li><a href=\"https://docs.ansible.com/ansible/latest/tips_tricks/sample_setup.html#sample-setup\" target=\"_blank\">Sample Ansible setup</a>: Suggestions how to organize your inventories, playbooks and roles.</li>\n</ul>\n\n<p><a href=\"https://www.digitalocean.com/?refcode=c40e38c3b079&amp;utm_campaign=Referral_Invite&amp;utm_medium=Referral_Program&amp;utm_source=badge\" rel=\"sponsored\" target=\"_blank\"><img src=\"https://web-platforms.sfo2.cdn.digitaloceanspaces.com/WWW/Badge%201.svg\" alt=\"DigitalOcean Referral Badge\" /></a></p>\n","tags":["VirtualBox","ansible"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/10/virtualbox.html","previous":null,"collection":"posts","next":{"title":"How to set up a Django project","tags":["pyenv","poetry"],"categories":["Development"],"url":"/development/2023/06/14/set-up-a-django-project.html","collection":"posts","path":"_posts/2023-06-14-set-up-a-django-project.md","relative_path":"_posts/2023-06-14-set-up-a-django-project.md","date":"2023-06-14 10:00:00 +0000","id":"/development/2023/06/14/set-up-a-django-project","draft":false,"layout":"post","published":true,"author":"victor","slug":"set-up-a-django-project","ext":".md"},"path":"_posts/2023-06-10-virtualbox.md","output":"<!DOCTYPE html>\n<!--\n    So Simple Jekyll Theme 3.2.0\n    Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes\n    Free for personal and commercial use under the MIT license\n    https://github.com/mmistakes/so-simple-theme/blob/master/LICENSE\n-->\n<html lang=\"en-US\" class=\"no-js\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  \n  \n\n  \n    \n    <!-- Begin Jekyll SEO tag v2.8.0 -->\n<title>Set up a VirtualBox VM | Minimalist Django</title>\n<meta name=\"generator\" content=\"Jekyll v4.2.2\" />\n<meta property=\"og:title\" content=\"Set up a VirtualBox VM\" />\n<meta name=\"author\" content=\"Victor Movileanu\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta name=\"description\" content=\"How to run a virtual host locally to test your automatic provisioning\" />\n<meta property=\"og:description\" content=\"How to run a virtual host locally to test your automatic provisioning\" />\n<link rel=\"canonical\" href=\"https://minimalistdjango.com/production%20deployment/2023/06/10/virtualbox.html\" />\n<meta property=\"og:url\" content=\"https://minimalistdjango.com/production%20deployment/2023/06/10/virtualbox.html\" />\n<meta property=\"og:site_name\" content=\"Minimalist Django\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-06-10T00:00:00+00:00\" />\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta property=\"twitter:title\" content=\"Set up a VirtualBox VM\" />\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"author\":{\"@type\":\"Person\",\"name\":\"Victor Movileanu\"},\"dateModified\":\"2023-06-10T00:00:00+00:00\",\"datePublished\":\"2023-06-10T00:00:00+00:00\",\"description\":\"How to run a virtual host locally to test your automatic provisioning\",\"headline\":\"Set up a VirtualBox VM\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://minimalistdjango.com/production%20deployment/2023/06/10/virtualbox.html\"},\"publisher\":{\"@type\":\"Organization\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://minimalistdjango.com/images/django-rocket.svg\"},\"name\":\"Victor Movileanu\"},\"url\":\"https://minimalistdjango.com/production%20deployment/2023/06/10/virtualbox.html\"}</script>\n<!-- End Jekyll SEO tag -->\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-PP61HM8LXR\"></script>\n<script>\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-PP61HM8LXR');\n</script>\n\n  \n\n  <script>\n    /* Cut the mustard */\n    if ( 'querySelector' in document && 'addEventListener' in window ) {\n      document.documentElement.className = document.documentElement.className.replace(/\\bno-js\\b/g, '') + 'js';\n    }\n  </script>\n\n  <link rel=\"stylesheet\" href=\"/assets/css/main.css\">\n  <link rel=\"stylesheet\" href=\"/assets/css/skins/default.css\">\n  <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Minimalist Django\" href=\"/feed.xml\">\n<!-- start custom head snippets -->\n\n<!-- insert favicons. use http://realfavicongenerator.net/ -->\n\n<!-- end custom head snippets -->\n\n</head>\n\n\n  <body class=\"layout--post  set-up-a-virtualbox-vm\">\n    <nav class=\"skip-links\">\n  <h2 class=\"screen-reader-text\">Skip links</h2>\n  <ul>\n    <li><a href=\"#primary-nav\" class=\"screen-reader-shortcut\">Skip to primary navigation</a></li>\n    <li><a href=\"#main\" class=\"screen-reader-shortcut\">Skip to content</a></li>\n    <li><a href=\"#footer\" class=\"screen-reader-shortcut\">Skip to footer</a></li>\n  </ul>\n</nav>\n\n    \n  <div class=\"navigation-wrapper\">\n    <a href=\"#menu-toggle\" id=\"menu-toggle\">Menu</a>\n    <nav id=\"primary-nav\" class=\"site-nav animated drop\">\n      <ul><li><a href=\"/\">Home</a></li><li><a href=\"/categories/\">Categories</a></li><li><a href=\"/tags/\">Tags</a></li><li><a href=\"/about/\">About</a></li></ul>\n    </nav>\n  </div><!-- /.navigation-wrapper -->\n\n\n    <header class=\"masthead\">\n  <div class=\"wrap\">\n    \n      <a href=\"/\" class=\"site-logo\" rel=\"home\" title=\"Minimalist Django\">\n        <img src=\"/images/django-rocket.svg\" class=\"site-logo-img animated fadeInDown\" alt=\"Minimalist Django\">\n      </a>\n    \n    \n    \n      \n        <div class=\"site-title animated fadeIn\"><a href=\"/\">Minimalist Django</a></div>\n      \n      <p class=\"site-description animated fadeIn\" itemprop=\"description\">The minimalist way of web development</p>\n    \n  </div>\n</header><!-- /.masthead -->\n\n\n    <main id=\"main\" class=\"main-content\" aria-label=\"Content\">\n  <article class=\"h-entry\">\n    \n\n    <div class=\"page-wrapper\">\n      <header class=\"page-header\">\n        \n        \n          <h1 id=\"page-title\" class=\"page-title p-name\">Set up a VirtualBox VM\n</h1>\n        \n      </header>\n\n      <div class=\"page-sidebar\">\n        <div class=\"page-author h-card p-author\"><img src=\"/images/me.jpg\" class=\"author-avatar u-photo\" alt=\"Victor Movileanu\"><div class=\"author-info\"><div class=\"author-name\">\n        <span class=\"p-name\">Victor Movileanu</span>\n      </div><ul class=\"author-links\"><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://twitter.com/ViggieSmalls5\"><i class=\"fab fa-twitter-square fa-lg\" title=\"Twitter\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://instagram.com/vickym.rulez\"><i class=\"fab fa-instagram fa-lg\" title=\"Instagram\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://github.com/movileanuv\"><i class=\"fab fa-github-square fa-lg\" title=\"GitHub\"></i></a>\n          </li></ul>\n    <time class=\"page-date dt-published\" datetime=\"2023-06-10T00:00:00+00:00\"><a class=\"u-url\" href=\"\">June 10, 2023</a>\n</time>\n\n  </div>\n</div>\n\n        \n  <h3 class=\"page-taxonomies-title\">Categories</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">Production deployment</li>\n  </ul>\n\n\n        \n  <h3 class=\"page-taxonomies-title\">Tags</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">VirtualBox</li><li class=\"page-taxonomy\">ansible</li>\n  </ul>\n\n\n      </div>\n\n      <div class=\"page-content\">\n        <div class=\"e-content\">\n          <p>Having a virtual machine (VM) locally is extremely useful to test provisioning your remote host.\nThis can be really useful when you plan to host your application on an external provider like <a href=\"https://m.do.co/c/c40e38c3b079\" rel=\"sponsored\" target=\"_blank\">DigitalOcean</a>.\nTogether with ansible it will help you learn how to automate your deployment.</p>\n\n<h2 id=\"setup-virtualbox\">Setup VirtualBox</h2>\n\n<ol>\n  <li>Download a Ubuntu iso image and use it to set up a VM.</li>\n  <li>Install <a href=\"https://www.virtualbox.org/\">VirtualBox</a>.\n    <ul>\n      <li><strong>Create a virtual machine</strong>. It is important to <strong>select “Bridged Adapter” in the Network options</strong>. This will allow your host to communicate with the VM via TCP/IP. Configure other options (memory, disk size, etc.) as desired.</li>\n      <li>Optionally, I would suggest to <strong>install the Guest Additions</strong>. This allows you to resize the screen to the window size. First, select from the menu “Insert Guest Additions CD”, then after mounting it you need to execute <code class=\"language-plaintext highlighter-rouge\">autorun.sh</code>. After reboot you can activate from the menu “View &gt; Autoresize Guest Display”</li>\n      <li>Optionally, I would also activate the <strong>bidirectional Drag and Drop</strong> from the menu.</li>\n    </ul>\n  </li>\n  <li>Next, you need to <strong>add your user to the sudoers group</strong>, which is not done by default on installation. For this, you need to follow <a href=\"https://superuser.com/questions/1623376/how-can-i-make-my-own-account-a-sudoers-on-virtualbox/1755286#1755286\">these instructions</a>:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>su -\nsudo adduser &lt;username&gt; sudo\n</code></pre></div>    </div>\n    <p>The root password is the same password as the one you selected for your user in the installation step.</p>\n  </li>\n  <li>Next, you need to allow the VM user to execute <code class=\"language-plaintext highlighter-rouge\">sudo</code> without being prompted for a password. \nThis will allow the execution of the <strong>ansible</strong> tasks that require superuser privilges, without being prompted for a password.\nFor this, on your VM, create a new file <code class=\"language-plaintext highlighter-rouge\">/etc/sudoers.d/&lt;username&gt;</code> inside the <code class=\"language-plaintext highlighter-rouge\">/etc/sudoers.d</code> directory with following content:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;username&gt; ALL=(ALL) NOPASSWD:ALL\n</code></pre></div>    </div>\n    <p>This is not really safe, and you could be more specific with the permissions (e.g. <code class=\"language-plaintext highlighter-rouge\">ALL = NOPASSWD: /bin/apt, /bin/apt-get</code> …), but we don’t want to mess around with security at this point.</p>\n  </li>\n  <li>Next, you want to install an ssh server on your machine, so you can access it from your client via ssh. \nFor this, execute the following commands:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo apt-get install openssh-server\nsudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bck\negrep -v \"^$|^#\" /etc/ssh/sshd_config | sudo tee /etc/ssh/sshd_config\necho \"Port 22\" | sudo tee -a /etc/ssh/sshd_config\nsudo systemctl enable ssh --now\n</code></pre></div>    </div>\n    <p>Explanation:</p>\n    <ul>\n      <li>The first line installs the ssh server</li>\n      <li>The second one copies the default configuration of the ssh server to a separate file as a backup and for later reference</li>\n      <li>The third line only extracts the lines in the original file that are not blank lines or comments, so we can only see the configured variables at one glance</li>\n      <li>The fourth line opens port 22 for ssh connections. For security reasons you could change this to any other port between 1024 and 65536, so attackers have a harder time to guess the correct port</li>\n      <li>The last line finally starts the ssh server and enables it to launch on startup</li>\n    </ul>\n  </li>\n  <li>Next, you need to generate an ssh key on your host, and copy it to the VM with\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ssh-copy-id -i ~/.ssh/id_ed25519.pub &lt;username&gt;@&lt;VM IP Address&gt; -p 22\n</code></pre></div>    </div>\n  </li>\n</ol>\n\n<h2 id=\"setup-ansible\">Setup Ansible</h2>\n\n<p>First things first, you need to install <em>Ansible</em> on your local machine. \nI would recommend to install globally, using <em>pip</em>, but the one provided by your local <em>pyenv</em> installation.\nYou could also install it with your package manager, but it might not be the latest version and would be harder to upgrade.</p>\n\n<p>Let’s take a look at following two files: our inventory <strong>development</strong> and our playbook <strong>playbook.yml</strong>:</p>\n\n<script src=\"https://gist.github.com/movileanuv/835a2c5e287dd1ce5b192da7f503dd3b.js\"></script>\n\n<p>The inventory specifies a hostname that is addressed in the playbook as <code class=\"language-plaintext highlighter-rouge\">hosts: vbox</code>. This tells Ansible which hosts to run this playbook on.\nThere are three other parameters specified for the host:</p>\n<ul>\n  <li><strong>ansible_host</strong>: this is the IP address of the node that ansible will ssh to to execute the playbook</li>\n  <li><strong>ansible_port</strong>: this is the port for the ssh connection</li>\n  <li><strong>ansible_become</strong>: this instructs ansible to become a specific user on the remote host during playbook execution. By default this is <strong>root</strong>. Since most of the commands require superuser privileges, I would rather specify it here than for each task repeatedly, and only in case I need less privileges to perform an action, I specify it per task level.</li>\n</ul>\n\n<p>The playbook goes through the installation process of pyenv step by step</p>\n<ol>\n  <li>It uptates the apt packages list (for debian/ubuntu obviously)</li>\n  <li>It installs the packages required by <em>pyenv</em> for building</li>\n  <li>It installs <em>pyenv</em> via an install script</li>\n  <li>It updates the <code class=\"language-plaintext highlighter-rouge\">.profile</code> of the user to initialize <em>pyenv</em> correctly.</li>\n</ol>\n\n<p>There is a required environment variable ``, that can be specified with the flag <code class=\"language-plaintext highlighter-rouge\">-e</code> on playbook execution, which controls for which user <em>pyenv</em> should be installed. Here is how you would execute the playbook:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ansible-playbook <span class=\"nt\">-i</span> development <span class=\"nt\">-e</span> <span class=\"nv\">user</span><span class=\"o\">=</span>victor playbook.yml\n</code></pre></div></div>\n\n<p>This command will install <em>pyenv</em> for the specified user on the VM and you can check it by logging in as the user on the VM and typing <code class=\"language-plaintext highlighter-rouge\">pyenv</code> into the terminal, which should output all <em>pyenv</em> actions available.</p>\n\n<h2 id=\"further-reading\">Further reading:</h2>\n\n<ul>\n  <li><a href=\"https://forums.virtualbox.org/viewtopic.php?f=35&amp;t=50661\" target=\"_blank\">Resize the Virtual Drive of a VM</a>: By default, the VM might not have enough hard disk space. So this command might be pretty helpful to resize it to the desired size:\n  <code class=\"language-plaintext highlighter-rouge\">VBoxManage modifyhd &lt;absolute path including the name and extension&gt; --resize 20480</code></li>\n  <li><a href=\"https://docs.ansible.com/ansible/latest/tips_tricks/sample_setup.html#sample-setup\" target=\"_blank\">Sample Ansible setup</a>: Suggestions how to organize your inventories, playbooks and roles.</li>\n</ul>\n\n<p><a href=\"https://www.digitalocean.com/?refcode=c40e38c3b079&amp;utm_campaign=Referral_Invite&amp;utm_medium=Referral_Program&amp;utm_source=badge\" rel=\"sponsored\" target=\"_blank\"><img src=\"https://web-platforms.sfo2.cdn.digitaloceanspaces.com/WWW/Badge%201.svg\" alt=\"DigitalOcean Referral Badge\" /></a></p>\n\n        </div>\n\n        \n\n        \n\n        <nav class=\"page-pagination\" role=\"navigation\">\n  \n\n  \n    <a class=\"page-next\" href=\"/development/2023/06/14/set-up-a-django-project.html\">\n      <h4 class=\"page-pagination-label\">Next</h4>\n      <span class=\"page-pagination-title\">\n        How to set up a Django project\n <i class=\"fas fa-arrow-right\"></i>\n      </span>\n    </a>\n  \n</nav>\n\n      </div>\n    </div>\n  </article>\n</main>\n\n\n    <footer id=\"footer\" class=\"site-footer\">\n  <!-- start custom footer snippets -->\n\n<!-- end custom footer snippets -->\n<div class=\"copyright\">\n    \n      <p>&copy; 2023 Minimalist Django. Powered by <a href=\"https://jekyllrb.com\" rel=\"nofollow\">Jekyll</a> &amp; <a href=\"https://github.com/mmistakes/so-simple-theme\" rel=\"nofollow\">So Simple</a>.</p>\n    \n  </div>\n</footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n  <script src=\"/assets/js/main.min.js\"></script>\n  <script src=\"https://use.fontawesome.com/releases/v5.0.12/js/all.js\"></script>\n\n\n  </body>\n\n</html>\n","relative_path":"_posts/2023-06-10-virtualbox.md","date":"2023-06-10 00:00:00 +0000","id":"/production%20deployment/2023/06/10/virtualbox","excerpt":"How to run a virtual host locally to test your automatic provisioning","draft":false,"layout":"post","published":true,"author":"victor","slug":"virtualbox","ext":".md"},"collection":"posts","next":{"title":"SQLite in production","content":"<p>People say <em>SQLite</em> is a database that is unsuitable for production use because of low performance, inability to handle\nmultiple concurrent writes, and other misconceptions.\nThis article is inspired by a talk at <a href=\"https://youtu.be/yTicYJDT1zE\"><em>DjangoCon 2023</em></a>  and an episode of <a href=\"https://changelog.com/podcast/433\"><em>The Changelog</em></a>.</p>\n\n<iframe class=\"youtube-iframe\" src=\"https://www.youtube.com/embed/yTicYJDT1zE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n\n<h2 id=\"video-summary\">Video summary</h2>\n<ul>\n  <li>SQLite is already in production. You can already see how many applications use SQLite on your computer with this command:\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  find / <span class=\"se\">\\(</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.db\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite3\"</span> <span class=\"se\">\\)</span> <span class=\"nt\">-type</span> f <span class=\"nt\">-exec</span> file <span class=\"o\">{}</span> <span class=\"se\">\\;</span> 2&gt;/dev/null | <span class=\"nb\">grep </span>SQLite\n</code></pre></div>    </div>\n  </li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=682\">11:20</a> it is a serverless database, which means you don’t need to configure an extra host, manage access by your application server, etc.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=866\">14:25</a> No performance loss because of network latency</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=931\">15:31</a> No N + 1 Query problems</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1051\">17:31</a> Concurrent writes are not a problem if you turn <a href=\"https://www.sqlite.org/wal.html\">Write-Ahead Logging</a> for your SQLite database. For this, you can execute <code class=\"language-plaintext highlighter-rouge\">sqlite3 db.sqlite3 'PRAGMA journal_mode=wal;'</code> in your shell.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1142\">19:02</a> Speed up writes even more by reducing the <a href=\"https://www.sqlite.org/pragma.html#pragma_synchronous\">synchronous level</a></li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1253\">20:53</a> You can easily back up the SQLite database with <a href=\"https://litestream.io/\">Litestream</a></li>\n</ul>\n\n<h2 id=\"set-up-django-to-run-with-sqlite\">Set up Django to run with SQLite</h2>\n\n<p>When creating a new Django project, it comes with following default setting for <code class=\"language-plaintext highlighter-rouge\">DATABASES</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"ENGINE\"</span><span class=\"p\">:</span> <span class=\"s\">\"django.db.backends.sqlite3\"</span><span class=\"p\">,</span>\n        <span class=\"s\">\"NAME\"</span><span class=\"p\">:</span> <span class=\"n\">BASE_DIR</span> <span class=\"o\">/</span> <span class=\"s\">\"db.sqlite3\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You can also use <a href=\"https://github.com/jazzband/dj-database-url/\"><code class=\"language-plaintext highlighter-rouge\">dj-database-url</code></a> to configure your <code class=\"language-plaintext highlighter-rouge\">DATABASES</code> setting. In this case, the <code class=\"language-plaintext highlighter-rouge\">DATABASE_URL</code> might look like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>DATABASE_URL=sqlite:///path/to/your/database/file.sqlite3\n</code></pre></div></div>\n\n<p>Now, before you start your django project for the first time, which automatically creates a SQLite database for you, you should create it yourself first, by running:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlite3 db.sqlite3 <span class=\"s1\">'PRAGMA journal_mode=wal; PRAGMA busy_timeout = 5000;'</span>\n</code></pre></div></div>\n\n<p>The PRAGMA synchronous setting is a little bit more tricky, since it does not apply to the database, <a href=\"https://stackoverflow.com/questions/36308801/sqlite3-pragma-synchronous-not-persistent\">but to the database connection</a>.\nHence, you have to change this setting <a href=\"https://stackoverflow.com/a/6843199/5540654\">for all connections opened by the Django app</a>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.signals</span> <span class=\"kn\">import</span> <span class=\"n\">connection_created</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">activate_foreign_keys</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">vendor</span> <span class=\"o\">==</span> <span class=\"s\">'sqlite'</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n        <span class=\"n\">cursor</span><span class=\"p\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s\">'PRAGMA synchronous=1;'</span><span class=\"p\">)</span>\n\n<span class=\"n\">connection_created</span><span class=\"p\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">activate_foreign_keys</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"how-to-configure-litestream-to-back-up-your-database-to-s3\">How to configure Litestream to back up your Database to S3</h2>\n\n<ul>\n  <li><a href=\"https://litestream.io/install/\">Install</a></li>\n  <li><a href=\"https://litestream.io/guides/s3/\">Replicating to Amazon S3</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Running as a Systemd service</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Tips &amp; Caveats</a></li>\n</ul>\n\n<h2 id=\"further-reading\">Further reading</h2>\n<ul>\n  <li>https://tailscale.com/blog/database-for-2022/</li>\n  <li>https://blog.expensify.com/2018/01/08/scaling-sqlite-to-4m-qps-on-a-single-server/</li>\n  <li>https://simonwillison.net/2022/Oct/23/datasette-gunicorn/</li>\n  <li>https://github.com/tomdyson/django-sqlite-load-tests</li>\n</ul>\n\n","tags":["SQLite","databases","DjangoCon"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/18/sqlite.html","previous":{"title":"How to set up a Django project","tags":["pyenv","poetry"],"categories":["Development"],"url":"/development/2023/06/14/set-up-a-django-project.html","collection":"posts","path":"_posts/2023-06-14-set-up-a-django-project.md","relative_path":"_posts/2023-06-14-set-up-a-django-project.md","date":"2023-06-14 10:00:00 +0000","id":"/development/2023/06/14/set-up-a-django-project","draft":false,"layout":"post","published":true,"author":"victor","slug":"set-up-a-django-project","ext":".md"},"collection":"posts","next":{"title":"Gunicorn from scratch","tags":["gunicorn"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/23/gunicorn.html","collection":"posts","path":"_posts/2023-06-21-gunicorn.md","relative_path":"_posts/2023-06-21-gunicorn.md","date":"2023-06-23 00:00:00 +0000","id":"/production%20deployment/2023/06/23/gunicorn","draft":false,"layout":"post","published":true,"author":"victor","slug":"gunicorn","ext":".md"},"path":"_posts/2023-06-14-sqlite.md","output":"<!DOCTYPE html>\n<!--\n    So Simple Jekyll Theme 3.2.0\n    Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes\n    Free for personal and commercial use under the MIT license\n    https://github.com/mmistakes/so-simple-theme/blob/master/LICENSE\n-->\n<html lang=\"en-US\" class=\"no-js\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  \n  \n\n  \n    \n    <!-- Begin Jekyll SEO tag v2.8.0 -->\n<title>SQLite in production | Minimalist Django</title>\n<meta name=\"generator\" content=\"Jekyll v4.2.2\" />\n<meta property=\"og:title\" content=\"SQLite in production\" />\n<meta name=\"author\" content=\"Victor Movileanu\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta name=\"description\" content=\"How SQLite can be used in production\" />\n<meta property=\"og:description\" content=\"How SQLite can be used in production\" />\n<link rel=\"canonical\" href=\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\" />\n<meta property=\"og:url\" content=\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\" />\n<meta property=\"og:site_name\" content=\"Minimalist Django\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-06-18T00:00:00+00:00\" />\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta property=\"twitter:title\" content=\"SQLite in production\" />\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"author\":{\"@type\":\"Person\",\"name\":\"Victor Movileanu\"},\"dateModified\":\"2023-06-18T00:00:00+00:00\",\"datePublished\":\"2023-06-18T00:00:00+00:00\",\"description\":\"How SQLite can be used in production\",\"headline\":\"SQLite in production\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\"},\"publisher\":{\"@type\":\"Organization\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://minimalistdjango.com/images/django-rocket.svg\"},\"name\":\"Victor Movileanu\"},\"url\":\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\"}</script>\n<!-- End Jekyll SEO tag -->\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-PP61HM8LXR\"></script>\n<script>\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-PP61HM8LXR');\n</script>\n\n  \n\n  <script>\n    /* Cut the mustard */\n    if ( 'querySelector' in document && 'addEventListener' in window ) {\n      document.documentElement.className = document.documentElement.className.replace(/\\bno-js\\b/g, '') + 'js';\n    }\n  </script>\n\n  <link rel=\"stylesheet\" href=\"/assets/css/main.css\">\n  <link rel=\"stylesheet\" href=\"/assets/css/skins/default.css\">\n  <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Minimalist Django\" href=\"/feed.xml\">\n<!-- start custom head snippets -->\n\n<!-- insert favicons. use http://realfavicongenerator.net/ -->\n\n<!-- end custom head snippets -->\n\n</head>\n\n\n  <body class=\"layout--post  sqlite-in-production\">\n    <nav class=\"skip-links\">\n  <h2 class=\"screen-reader-text\">Skip links</h2>\n  <ul>\n    <li><a href=\"#primary-nav\" class=\"screen-reader-shortcut\">Skip to primary navigation</a></li>\n    <li><a href=\"#main\" class=\"screen-reader-shortcut\">Skip to content</a></li>\n    <li><a href=\"#footer\" class=\"screen-reader-shortcut\">Skip to footer</a></li>\n  </ul>\n</nav>\n\n    \n  <div class=\"navigation-wrapper\">\n    <a href=\"#menu-toggle\" id=\"menu-toggle\">Menu</a>\n    <nav id=\"primary-nav\" class=\"site-nav animated drop\">\n      <ul><li><a href=\"/\">Home</a></li><li><a href=\"/categories/\">Categories</a></li><li><a href=\"/tags/\">Tags</a></li><li><a href=\"/about/\">About</a></li></ul>\n    </nav>\n  </div><!-- /.navigation-wrapper -->\n\n\n    <header class=\"masthead\">\n  <div class=\"wrap\">\n    \n      <a href=\"/\" class=\"site-logo\" rel=\"home\" title=\"Minimalist Django\">\n        <img src=\"/images/django-rocket.svg\" class=\"site-logo-img animated fadeInDown\" alt=\"Minimalist Django\">\n      </a>\n    \n    \n    \n      \n        <div class=\"site-title animated fadeIn\"><a href=\"/\">Minimalist Django</a></div>\n      \n      <p class=\"site-description animated fadeIn\" itemprop=\"description\">The minimalist way of web development</p>\n    \n  </div>\n</header><!-- /.masthead -->\n\n\n    <main id=\"main\" class=\"main-content\" aria-label=\"Content\">\n  <article class=\"h-entry\">\n    \n\n    <div class=\"page-wrapper\">\n      <header class=\"page-header\">\n        \n        \n          <h1 id=\"page-title\" class=\"page-title p-name\">SQLite in production\n</h1>\n        \n      </header>\n\n      <div class=\"page-sidebar\">\n        <div class=\"page-author h-card p-author\"><img src=\"/images/me.jpg\" class=\"author-avatar u-photo\" alt=\"Victor Movileanu\"><div class=\"author-info\"><div class=\"author-name\">\n        <span class=\"p-name\">Victor Movileanu</span>\n      </div><ul class=\"author-links\"><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://twitter.com/ViggieSmalls5\"><i class=\"fab fa-twitter-square fa-lg\" title=\"Twitter\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://instagram.com/vickym.rulez\"><i class=\"fab fa-instagram fa-lg\" title=\"Instagram\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://github.com/movileanuv\"><i class=\"fab fa-github-square fa-lg\" title=\"GitHub\"></i></a>\n          </li></ul>\n    <time class=\"page-date dt-published\" datetime=\"2023-06-18T00:00:00+00:00\"><a class=\"u-url\" href=\"\">June 18, 2023</a>\n</time>\n\n  </div>\n</div>\n\n        \n  <h3 class=\"page-taxonomies-title\">Categories</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">Production deployment</li>\n  </ul>\n\n\n        \n  <h3 class=\"page-taxonomies-title\">Tags</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">SQLite</li><li class=\"page-taxonomy\">databases</li><li class=\"page-taxonomy\">DjangoCon</li>\n  </ul>\n\n\n      </div>\n\n      <div class=\"page-content\">\n        <div class=\"e-content\">\n          <p>People say <em>SQLite</em> is a database that is unsuitable for production use because of low performance, inability to handle\nmultiple concurrent writes, and other misconceptions.\nThis article is inspired by a talk at <a href=\"https://youtu.be/yTicYJDT1zE\"><em>DjangoCon 2023</em></a>  and an episode of <a href=\"https://changelog.com/podcast/433\"><em>The Changelog</em></a>.</p>\n\n<iframe class=\"youtube-iframe\" src=\"https://www.youtube.com/embed/yTicYJDT1zE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n\n<h2 id=\"video-summary\">Video summary</h2>\n<ul>\n  <li>SQLite is already in production. You can already see how many applications use SQLite on your computer with this command:\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  find / <span class=\"se\">\\(</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.db\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite3\"</span> <span class=\"se\">\\)</span> <span class=\"nt\">-type</span> f <span class=\"nt\">-exec</span> file <span class=\"o\">{}</span> <span class=\"se\">\\;</span> 2&gt;/dev/null | <span class=\"nb\">grep </span>SQLite\n</code></pre></div>    </div>\n  </li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=682\">11:20</a> it is a serverless database, which means you don’t need to configure an extra host, manage access by your application server, etc.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=866\">14:25</a> No performance loss because of network latency</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=931\">15:31</a> No N + 1 Query problems</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1051\">17:31</a> Concurrent writes are not a problem if you turn <a href=\"https://www.sqlite.org/wal.html\">Write-Ahead Logging</a> for your SQLite database. For this, you can execute <code class=\"language-plaintext highlighter-rouge\">sqlite3 db.sqlite3 'PRAGMA journal_mode=wal;'</code> in your shell.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1142\">19:02</a> Speed up writes even more by reducing the <a href=\"https://www.sqlite.org/pragma.html#pragma_synchronous\">synchronous level</a></li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1253\">20:53</a> You can easily back up the SQLite database with <a href=\"https://litestream.io/\">Litestream</a></li>\n</ul>\n\n<h2 id=\"set-up-django-to-run-with-sqlite\">Set up Django to run with SQLite</h2>\n\n<p>When creating a new Django project, it comes with following default setting for <code class=\"language-plaintext highlighter-rouge\">DATABASES</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"ENGINE\"</span><span class=\"p\">:</span> <span class=\"s\">\"django.db.backends.sqlite3\"</span><span class=\"p\">,</span>\n        <span class=\"s\">\"NAME\"</span><span class=\"p\">:</span> <span class=\"n\">BASE_DIR</span> <span class=\"o\">/</span> <span class=\"s\">\"db.sqlite3\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You can also use <a href=\"https://github.com/jazzband/dj-database-url/\"><code class=\"language-plaintext highlighter-rouge\">dj-database-url</code></a> to configure your <code class=\"language-plaintext highlighter-rouge\">DATABASES</code> setting. In this case, the <code class=\"language-plaintext highlighter-rouge\">DATABASE_URL</code> might look like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>DATABASE_URL=sqlite:///path/to/your/database/file.sqlite3\n</code></pre></div></div>\n\n<p>Now, before you start your django project for the first time, which automatically creates a SQLite database for you, you should create it yourself first, by running:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlite3 db.sqlite3 <span class=\"s1\">'PRAGMA journal_mode=wal; PRAGMA busy_timeout = 5000;'</span>\n</code></pre></div></div>\n\n<p>The PRAGMA synchronous setting is a little bit more tricky, since it does not apply to the database, <a href=\"https://stackoverflow.com/questions/36308801/sqlite3-pragma-synchronous-not-persistent\">but to the database connection</a>.\nHence, you have to change this setting <a href=\"https://stackoverflow.com/a/6843199/5540654\">for all connections opened by the Django app</a>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.signals</span> <span class=\"kn\">import</span> <span class=\"n\">connection_created</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">activate_foreign_keys</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">vendor</span> <span class=\"o\">==</span> <span class=\"s\">'sqlite'</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n        <span class=\"n\">cursor</span><span class=\"p\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s\">'PRAGMA synchronous=1;'</span><span class=\"p\">)</span>\n\n<span class=\"n\">connection_created</span><span class=\"p\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">activate_foreign_keys</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"how-to-configure-litestream-to-back-up-your-database-to-s3\">How to configure Litestream to back up your Database to S3</h2>\n\n<ul>\n  <li><a href=\"https://litestream.io/install/\">Install</a></li>\n  <li><a href=\"https://litestream.io/guides/s3/\">Replicating to Amazon S3</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Running as a Systemd service</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Tips &amp; Caveats</a></li>\n</ul>\n\n<h2 id=\"further-reading\">Further reading</h2>\n<ul>\n  <li>https://tailscale.com/blog/database-for-2022/</li>\n  <li>https://blog.expensify.com/2018/01/08/scaling-sqlite-to-4m-qps-on-a-single-server/</li>\n  <li>https://simonwillison.net/2022/Oct/23/datasette-gunicorn/</li>\n  <li>https://github.com/tomdyson/django-sqlite-load-tests</li>\n</ul>\n\n\n        </div>\n\n        \n\n        \n\n        <nav class=\"page-pagination\" role=\"navigation\">\n  \n    <a class=\"page-previous\" href=\"/development/2023/06/14/set-up-a-django-project.html\">\n      <h4 class=\"page-pagination-label\">Previous</h4>\n      <span class=\"page-pagination-title\">\n        <i class=\"fas fa-arrow-left\"></i> How to set up a Django project\n\n      </span>\n    </a>\n  \n\n  \n    <a class=\"page-next\" href=\"/production%20deployment/2023/06/23/gunicorn.html\">\n      <h4 class=\"page-pagination-label\">Next</h4>\n      <span class=\"page-pagination-title\">\n        Gunicorn from scratch\n <i class=\"fas fa-arrow-right\"></i>\n      </span>\n    </a>\n  \n</nav>\n\n      </div>\n    </div>\n  </article>\n</main>\n\n\n    <footer id=\"footer\" class=\"site-footer\">\n  <!-- start custom footer snippets -->\n\n<!-- end custom footer snippets -->\n<div class=\"copyright\">\n    \n      <p>&copy; 2023 Minimalist Django. Powered by <a href=\"https://jekyllrb.com\" rel=\"nofollow\">Jekyll</a> &amp; <a href=\"https://github.com/mmistakes/so-simple-theme\" rel=\"nofollow\">So Simple</a>.</p>\n    \n  </div>\n</footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n  <script src=\"/assets/js/main.min.js\"></script>\n  <script src=\"https://use.fontawesome.com/releases/v5.0.12/js/all.js\"></script>\n\n\n  </body>\n\n</html>\n","relative_path":"_posts/2023-06-14-sqlite.md","date":"2023-06-18 00:00:00 +0000","id":"/production%20deployment/2023/06/18/sqlite","excerpt":"How SQLite can be used in production","draft":false,"layout":"post","published":true,"author":"victor","slug":"sqlite","ext":".md"},"path":"_posts/2023-06-14-set-up-a-django-project.md","output":"<!DOCTYPE html>\n<!--\n    So Simple Jekyll Theme 3.2.0\n    Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes\n    Free for personal and commercial use under the MIT license\n    https://github.com/mmistakes/so-simple-theme/blob/master/LICENSE\n-->\n<html lang=\"en-US\" class=\"no-js\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  \n  \n\n  \n    \n    <!-- Begin Jekyll SEO tag v2.8.0 -->\n<title>How to set up a Django project | Minimalist Django</title>\n<meta name=\"generator\" content=\"Jekyll v4.2.2\" />\n<meta property=\"og:title\" content=\"How to set up a Django project\" />\n<meta name=\"author\" content=\"Victor Movileanu\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta name=\"description\" content=\"How to start a Django project the right way\" />\n<meta property=\"og:description\" content=\"How to start a Django project the right way\" />\n<link rel=\"canonical\" href=\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\" />\n<meta property=\"og:url\" content=\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\" />\n<meta property=\"og:site_name\" content=\"Minimalist Django\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-06-14T10:00:00+00:00\" />\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta property=\"twitter:title\" content=\"How to set up a Django project\" />\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"author\":{\"@type\":\"Person\",\"name\":\"Victor Movileanu\"},\"dateModified\":\"2023-06-14T10:00:00+00:00\",\"datePublished\":\"2023-06-14T10:00:00+00:00\",\"description\":\"How to start a Django project the right way\",\"headline\":\"How to set up a Django project\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\"},\"publisher\":{\"@type\":\"Organization\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://minimalistdjango.com/images/django-rocket.svg\"},\"name\":\"Victor Movileanu\"},\"url\":\"https://minimalistdjango.com/development/2023/06/14/set-up-a-django-project.html\"}</script>\n<!-- End Jekyll SEO tag -->\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-PP61HM8LXR\"></script>\n<script>\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-PP61HM8LXR');\n</script>\n\n  \n\n  <script>\n    /* Cut the mustard */\n    if ( 'querySelector' in document && 'addEventListener' in window ) {\n      document.documentElement.className = document.documentElement.className.replace(/\\bno-js\\b/g, '') + 'js';\n    }\n  </script>\n\n  <link rel=\"stylesheet\" href=\"/assets/css/main.css\">\n  <link rel=\"stylesheet\" href=\"/assets/css/skins/default.css\">\n  <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Minimalist Django\" href=\"/feed.xml\">\n<!-- start custom head snippets -->\n\n<!-- insert favicons. use http://realfavicongenerator.net/ -->\n\n<!-- end custom head snippets -->\n\n</head>\n\n\n  <body class=\"layout--post  how-to-set-up-a-django-project\">\n    <nav class=\"skip-links\">\n  <h2 class=\"screen-reader-text\">Skip links</h2>\n  <ul>\n    <li><a href=\"#primary-nav\" class=\"screen-reader-shortcut\">Skip to primary navigation</a></li>\n    <li><a href=\"#main\" class=\"screen-reader-shortcut\">Skip to content</a></li>\n    <li><a href=\"#footer\" class=\"screen-reader-shortcut\">Skip to footer</a></li>\n  </ul>\n</nav>\n\n    \n  <div class=\"navigation-wrapper\">\n    <a href=\"#menu-toggle\" id=\"menu-toggle\">Menu</a>\n    <nav id=\"primary-nav\" class=\"site-nav animated drop\">\n      <ul><li><a href=\"/\">Home</a></li><li><a href=\"/categories/\">Categories</a></li><li><a href=\"/tags/\">Tags</a></li><li><a href=\"/about/\">About</a></li></ul>\n    </nav>\n  </div><!-- /.navigation-wrapper -->\n\n\n    <header class=\"masthead\">\n  <div class=\"wrap\">\n    \n      <a href=\"/\" class=\"site-logo\" rel=\"home\" title=\"Minimalist Django\">\n        <img src=\"/images/django-rocket.svg\" class=\"site-logo-img animated fadeInDown\" alt=\"Minimalist Django\">\n      </a>\n    \n    \n    \n      \n        <div class=\"site-title animated fadeIn\"><a href=\"/\">Minimalist Django</a></div>\n      \n      <p class=\"site-description animated fadeIn\" itemprop=\"description\">The minimalist way of web development</p>\n    \n  </div>\n</header><!-- /.masthead -->\n\n\n    <main id=\"main\" class=\"main-content\" aria-label=\"Content\">\n  <article class=\"h-entry\">\n    \n\n    <div class=\"page-wrapper\">\n      <header class=\"page-header\">\n        \n        \n          <h1 id=\"page-title\" class=\"page-title p-name\">How to set up a Django project\n</h1>\n        \n      </header>\n\n      <div class=\"page-sidebar\">\n        <div class=\"page-author h-card p-author\"><img src=\"/images/me.jpg\" class=\"author-avatar u-photo\" alt=\"Victor Movileanu\"><div class=\"author-info\"><div class=\"author-name\">\n        <span class=\"p-name\">Victor Movileanu</span>\n      </div><ul class=\"author-links\"><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://twitter.com/ViggieSmalls5\"><i class=\"fab fa-twitter-square fa-lg\" title=\"Twitter\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://instagram.com/vickym.rulez\"><i class=\"fab fa-instagram fa-lg\" title=\"Instagram\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://github.com/movileanuv\"><i class=\"fab fa-github-square fa-lg\" title=\"GitHub\"></i></a>\n          </li></ul>\n    <time class=\"page-date dt-published\" datetime=\"2023-06-14T10:00:00+00:00\"><a class=\"u-url\" href=\"\">June 14, 2023</a>\n</time>\n\n  </div>\n</div>\n\n        \n  <h3 class=\"page-taxonomies-title\">Categories</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">Development</li>\n  </ul>\n\n\n        \n  <h3 class=\"page-taxonomies-title\">Tags</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">pyenv</li><li class=\"page-taxonomy\">poetry</li>\n  </ul>\n\n\n      </div>\n\n      <div class=\"page-content\">\n        <div class=\"e-content\">\n          <p><img src=\"/images/xkcd-startling.png\" alt=\"xkcd meme on regular repetitive tasks\" />\n<a href=\"https://xkcd.com/354/\" target=\"_blank\">https://xkcd.com/354/</a></p>\n\n<h2 id=\"install-pyenv\">Choose your Python version with <em>pyenv</em></h2>\n\n<p><a href=\"https://github.com/pyenv/pyenv#installation\" target=\"_blank\"><em>Pyenv</em></a> allows you to easily manage multiple Python versions on your system, which is particularly useful when working with different Django projects that require specific versions of Python.</p>\n\n<p>You can easily install pyenv with curl:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl https://pyenv.run | bash\n</code></pre></div></div>\n\n<p>Then add the following lines to your <code class=\"language-plaintext highlighter-rouge\">.bashrc</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">export </span><span class=\"nv\">PYENV_ROOT</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$HOME</span><span class=\"s2\">/.pyenv\"</span>\n<span class=\"nb\">command</span> <span class=\"nt\">-v</span> pyenv <span class=\"o\">&gt;</span>/dev/null <span class=\"o\">||</span> <span class=\"nb\">export </span><span class=\"nv\">PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$PYENV_ROOT</span><span class=\"s2\">/bin:</span><span class=\"nv\">$PATH</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n<span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"si\">$(</span>pyenv virtualenv-init -<span class=\"si\">)</span><span class=\"s2\">\"</span>\n</code></pre></div></div>\n\n<p>To use a specific python version for your project, execute</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pyenv <span class=\"nb\">install </span>3.11.3\npyenv <span class=\"nb\">local </span>3.11.3\n</code></pre></div></div>\n\n<p>This will create a <code class=\"language-plaintext highlighter-rouge\">.python-version</code> file in your project’s director, that specifies the currently used python version.\nYou can verify by executing <code class=\"language-plaintext highlighter-rouge\">python --version</code>.</p>\n\n<h2 id=\"manage-your-dependencies-with-poetry\">Manage your dependencies with <em>poetry</em></h2>\n\n<p>Dependency management is important because external libraries can change over time, and upgrading them without proper management can potentially crash your application.\n<a href=\"https://python-poetry.org/docs/#installation\" target=\"_blank\"><em>Poetry</em></a> incorporates everything you need to isolate your project and manage your dependencies.</p>\n\n<p>You can install poetry outside your project’s directory with</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-sSL</span> https://install.python-poetry.org | python3 -\n</code></pre></div></div>\n\n<p>Here are some useful commands that you will always come across:</p>\n\n<ol>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#init\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry init</code></a> you can easily generate a new <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file inside the current directory, that keeps track of the project dependencies</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#add\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry add &lt;package-name&gt;</code></a> you can add a new package to your <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> file and immediately install it in your virtual environment</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#shell\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry shell</code></a> you activate your virtual environment and run it isolated from other projects</li>\n  <li>With <a href=\"https://python-poetry.org/docs/cli/#export\" target=\"_blank\"><code class=\"language-plaintext highlighter-rouge\">poetry export</code></a> you can write your dependencies in a format that can be easily installed with <a href=\"https://pip.pypa.io/en/stable/installation/\">pip</a></li>\n</ol>\n\n<blockquote class=\"tip-content\">\n  <h2 id=\"-tip\">🤫 Tip</h2>\n  <p>Create a <code class=\"language-plaintext highlighter-rouge\">requirements/</code> directory to separate development, test and production requirements.</p>\n</blockquote>\n\n<h2 id=\"tldr\">TL;DR</h2>\n\n<p>Here is a quick run-through on how to set up a new Django project after having successfully installed <em>pyenv</em> and <em>poetry</em>:</p>\n\n<script src=\"https://gist.github.com/movileanuv/56fcce4d2351ab096cbd10e97211782f.js\"></script>\n\n<h2 id=\"further-reading\">Further Reading</h2>\n\n<ul>\n  <li><a href=\"https://realpython.com/dependency-management-python-poetry/\" target=\"_blank\">RealPython</a>: More details on how to work with poetry</li>\n  <li><a href=\"https://www.b-list.org/weblog/2022/may/13/boring-python-dependencies/\" target=\"_blank\">Boring Python: dependency management</a>: Great article that describes how to work with tools like “pip” and “venv” and what you have to look out for</li>\n  <li><a href=\"https://www.youtube.com/watch?v=-YEUFGFHWgQ\">Youtube: Bootstrapping Your Local Python Environment</a>:\nJust a regular video discussing python environments, but I like this one: <strong>Don’t use <code class=\"language-plaintext highlighter-rouge\">sudo</code> when you set up your python envrionment</strong></li>\n</ul>\n\n\n        </div>\n\n        \n\n        \n\n        <nav class=\"page-pagination\" role=\"navigation\">\n  \n    <a class=\"page-previous\" href=\"/production%20deployment/2023/06/10/virtualbox.html\">\n      <h4 class=\"page-pagination-label\">Previous</h4>\n      <span class=\"page-pagination-title\">\n        <i class=\"fas fa-arrow-left\"></i> Set up a VirtualBox VM\n\n      </span>\n    </a>\n  \n\n  \n    <a class=\"page-next\" href=\"/production%20deployment/2023/06/18/sqlite.html\">\n      <h4 class=\"page-pagination-label\">Next</h4>\n      <span class=\"page-pagination-title\">\n        SQLite in production\n <i class=\"fas fa-arrow-right\"></i>\n      </span>\n    </a>\n  \n</nav>\n\n      </div>\n    </div>\n  </article>\n</main>\n\n\n    <footer id=\"footer\" class=\"site-footer\">\n  <!-- start custom footer snippets -->\n\n<!-- end custom footer snippets -->\n<div class=\"copyright\">\n    \n      <p>&copy; 2023 Minimalist Django. Powered by <a href=\"https://jekyllrb.com\" rel=\"nofollow\">Jekyll</a> &amp; <a href=\"https://github.com/mmistakes/so-simple-theme\" rel=\"nofollow\">So Simple</a>.</p>\n    \n  </div>\n</footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n  <script src=\"/assets/js/main.min.js\"></script>\n  <script src=\"https://use.fontawesome.com/releases/v5.0.12/js/all.js\"></script>\n\n\n  </body>\n\n</html>\n","relative_path":"_posts/2023-06-14-set-up-a-django-project.md","date":"2023-06-14 10:00:00 +0000","id":"/development/2023/06/14/set-up-a-django-project","excerpt":"How to start a Django project the right way","draft":false,"layout":"post","published":true,"author":"victor","slug":"set-up-a-django-project","ext":".md"},"collection":"posts","next":{"title":"Gunicorn from scratch","content":"<p>When you create a new <em>Django</em> project with <code class=\"language-plaintext highlighter-rouge\">django-admin startproject</code>, it automatically creates a <code class=\"language-plaintext highlighter-rouge\">wsgi.py</code> file for you.\nThis is a module containing a WSGI application object called <code class=\"language-plaintext highlighter-rouge\">application</code> that can be called by any type of WSGI server.\nHere is how this works.</p>\n\n<h2 id=\"the-simplest-wsgi-application\">The simplest WSGI application</h2>\n\n<p><em>WSGI</em>: stands for <em>Web Server Gateway Interface</em>. It is an interface specification by which server and application communicate.\nThe application provides a function which the server calls for each request:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">application</span><span class=\"p\">(</span><span class=\"n\">environ</span><span class=\"p\">,</span> <span class=\"n\">start_response</span><span class=\"p\">):</span>\n    <span class=\"p\">...</span>\n</code></pre></div></div>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">environ</code> is a Python dictionary containing the CGI-defined environment variables plus a few extras.</li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">start_response</code> is a callback by which the application returns the HTTP headers.</p>\n\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">start_response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">response_headers</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </li>\n  <li><code class=\"language-plaintext highlighter-rouge\">status</code> is an HTTP status string (e.g., “200 OK”)</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">response_headers</code> is a list of 2-tuples, the HTTP headers in key-value format</li>\n</ul>\n\n<p>The application function then returns an iterable of body chunks, that need to be bytes, e.g. <code class=\"language-plaintext highlighter-rouge\">[b\"&lt;html&gt;Hello, world!&lt;/html&gt;\"]</code>.\nSo the simplest WSGI application can be:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">application</span><span class=\"p\">(</span><span class=\"n\">environ</span><span class=\"p\">,</span> <span class=\"n\">start_response</span><span class=\"p\">):</span>\n    <span class=\"n\">start_response</span><span class=\"p\">(</span><span class=\"s\">\"200 OK\"</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s\">\"&lt;html&gt;Hello, world!&lt;/html&gt;\"</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<h2 id=\"gunicorn\">Gunicorn</h2>\n\n<p>Normally during development you use <code class=\"language-plaintext highlighter-rouge\">python manage.py runserver</code> to start a web server, but it is not the recommended way in production<sup>[<a href=\"https://docs.djangoproject.com/en/dev/ref/django-admin/#runserver\">1</a>]</sup>.\nBasically it is also a WSGI application that has some additional features such as reloading on code changes, but it has not gone through security audits or performance tests.</p>\n\n<p>Gunicorn stands for <strong>‘Green Unicorn’</strong> and is a Python WSGI HTTP Server for UNIX. \nIt has no dependencies and can be installed with <em>pip</em> or <em>poetry</em>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>poetry add gunicorn\n</code></pre></div></div>\n\n<p>Assuming you have a project structure like this:</p>\n\n<div class=\"language-plaintext tree-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.\n├── manage.py\n└── project\n    ├── __init__.py\n    ├── asgi.py\n    ├── settings.py\n    ├── urls.py\n    └── wsgi.py\n</code></pre></div></div>\n\n<p>you can run</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gunicorn project.wsgi:application\n</code></pre></div></div>\n\n<p>inside your project directory and it will spawn two processes that you can see when you call <code class=\"language-plaintext highlighter-rouge\">ps aux | grep gunicorn</code>. \nOne of them is the parent process that controlls all the workers, the other one is the process for the worker. By default it will only spawn one worker and listen to HTTP requests on <code class=\"language-plaintext highlighter-rouge\">127.0.0.1:8000</code>.</p>\n\n<h2 id=\"configure-gunicorn\">Configure Gunicorn</h2>\n\n<p>Gunicorn detects if there is any file called <code class=\"language-plaintext highlighter-rouge\">gunicorn.conf.py</code> inside the directory where it is executed, or you can specify a different path with the <code class=\"language-plaintext highlighter-rouge\">-c</code> flag.\nThe simplest way is to place it next to your manage.py file:</p>\n\n<div class=\"language-plaintext tree-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.\n├── gunicorn.conf.py    &lt;--- create here\n├── manage.py\n└── project\n    ├── __init__.py\n    ├── asgi.py\n    ├── settings.py\n    ├── urls.py\n    └── wsgi.py\n</code></pre></div></div>\n\n<h3 id=\"multiple-workers\">Multiple workers</h3>\n\n<p>You can spawn multiple gunicorn processes that will serve your application to make use of the computing power of your server, based on the number of CPUs the machine has.\nTo find out the number of processors on your UNIX machine, you can execute <a href=\"https://stackoverflow.com/questions/6481005/how-to-obtain-the-number-of-cpus-cores-in-linux-from-the-command-line\"><code class=\"language-plaintext highlighter-rouge\">grep -c ^processor /proc/cpuinfo</code></a>.\nGunicorn suggests to run <code class=\"language-plaintext highlighter-rouge\">2-4 x $(NUM_CORES)</code> of workers<sup>[<a href=\"https://docs.gunicorn.org/en/stable/settings.html#workers\">2</a>]</sup>.\nThe reasoning behind it is that, while one of the processes is occupied with handling I/O or waiting for a response from the database, the other one can take over and handle a new request.</p>\n\n<p>Here is how the <code class=\"language-plaintext highlighter-rouge\">gunicorn.conf.py</code> file might look like:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n\n<span class=\"n\">workers</span> <span class=\"o\">=</span> <span class=\"n\">multiprocessing</span><span class=\"p\">.</span><span class=\"n\">cpu_count</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n</code></pre></div></div>\n\n<h3 id=\"listen-to-different-ips\">Listen to different IPs</h3>\n\n<p>By default the Gunicorn process will listen for http request on <code class=\"language-plaintext highlighter-rouge\">127.0.0.1:8000</code>.\nYou can configure Gunicorn to listen to different ports, or even to a public IP address.\nYou can easily test this by finding out your computer’s IP address inside your local network with <code class=\"language-plaintext highlighter-rouge\">ifconfig</code>  and set the bind address in the <code class=\"language-plaintext highlighter-rouge\">gunicorn.conf.py</code> file like this:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bind</span> <span class=\"o\">=</span> <span class=\"s\">\"192.168.x.y:8000\"</span>\n</code></pre></div></div>\n\n<p>and navigate from your phone to your computer with this address. \nPorts smaller than 1024 require additional configuration.</p>\n\n<p>In case you plan to use a proxy server like Nginx on the same machine, you might consider using a socket for proxying requests to your Gunicorn server.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bind</span> <span class=\"o\">=</span> <span class=\"s\">\"unix:/path/to/myproject.sock\"</span>\n</code></pre></div></div>\n\n<p>This has slight performance advantages, since they can avoid some checks and operations (like routing)<sup>[<a href=\"https://serverfault.com/questions/124517/what-is-the-difference-between-unix-sockets-and-tcp-ip-sockets/124518#124518\">3</a>]</sup>.</p>\n\n<p>You can even specify multiple bind addresses as a list, which is especially useful if you want to serve your application through <em>HTTPS</em>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bind</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">\"192.168.x.y:80\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"192.168.x.y:443\"</span>\n<span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>Serving requests will require an SSL certificate, which deserves another post to be discussed in detail.</p>\n\n<h2 id=\"run-gunicorn-as-a-background-process\">Run Gunicorn as a background process</h2>\n\n<p>To run the <em>Gunicorn</em> process in the background, you need to configure <em>Supervisor</em> or <em>Systemd</em>.\nThere are plenty articles online that explain how to configure both of them with <em>Gunicorn</em>, but after doing the reasearch I consider <em>Supervisor</em> to be the more versatile and simpler one to configure, even though <em>Systemd</em> is probably already installed on your Linux distribution.</p>\n\n<p>In <a href=\"/production%20deployment/2023/06/29/supervisor.html\">the next post</a> I describe how to run Gunicorn as a background process with both <em>Supervisor</em> <strong>and</strong> <em>Systemd</em>, so you should go ahead and make your own decision which one you like more.</p>\n\n<h2 id=\"further-reading\">Further Reading</h2>\n<ul>\n  <li><a href=\"https://docs.gunicorn.org/en/stable/index.html\">docs.gunicorn.org</a>: <em>Gunicorn</em> documentation</li>\n  <li><a href=\"https://www.fullstackpython.com/wsgi-servers.html\">WSGI Servers</a>: A more detailed explanation on WSGI servers and other Gunicorn alternatives</li>\n  <li>More WSGI learning resources: <a href=\"https://wsgi.readthedocs.io/en/latest/\">wsgi.readthedocs.io</a></li>\n</ul>\n\n","tags":["gunicorn"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/23/gunicorn.html","previous":{"title":"SQLite in production","content":"<p>People say <em>SQLite</em> is a database that is unsuitable for production use because of low performance, inability to handle\nmultiple concurrent writes, and other misconceptions.\nThis article is inspired by a talk at <a href=\"https://youtu.be/yTicYJDT1zE\"><em>DjangoCon 2023</em></a>  and an episode of <a href=\"https://changelog.com/podcast/433\"><em>The Changelog</em></a>.</p>\n\n<iframe class=\"youtube-iframe\" src=\"https://www.youtube.com/embed/yTicYJDT1zE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n\n<h2 id=\"video-summary\">Video summary</h2>\n<ul>\n  <li>SQLite is already in production. You can already see how many applications use SQLite on your computer with this command:\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  find / <span class=\"se\">\\(</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.db\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite3\"</span> <span class=\"se\">\\)</span> <span class=\"nt\">-type</span> f <span class=\"nt\">-exec</span> file <span class=\"o\">{}</span> <span class=\"se\">\\;</span> 2&gt;/dev/null | <span class=\"nb\">grep </span>SQLite\n</code></pre></div>    </div>\n  </li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=682\">11:20</a> it is a serverless database, which means you don’t need to configure an extra host, manage access by your application server, etc.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=866\">14:25</a> No performance loss because of network latency</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=931\">15:31</a> No N + 1 Query problems</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1051\">17:31</a> Concurrent writes are not a problem if you turn <a href=\"https://www.sqlite.org/wal.html\">Write-Ahead Logging</a> for your SQLite database. For this, you can execute <code class=\"language-plaintext highlighter-rouge\">sqlite3 db.sqlite3 'PRAGMA journal_mode=wal;'</code> in your shell.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1142\">19:02</a> Speed up writes even more by reducing the <a href=\"https://www.sqlite.org/pragma.html#pragma_synchronous\">synchronous level</a></li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1253\">20:53</a> You can easily back up the SQLite database with <a href=\"https://litestream.io/\">Litestream</a></li>\n</ul>\n\n<h2 id=\"set-up-django-to-run-with-sqlite\">Set up Django to run with SQLite</h2>\n\n<p>When creating a new Django project, it comes with following default setting for <code class=\"language-plaintext highlighter-rouge\">DATABASES</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"ENGINE\"</span><span class=\"p\">:</span> <span class=\"s\">\"django.db.backends.sqlite3\"</span><span class=\"p\">,</span>\n        <span class=\"s\">\"NAME\"</span><span class=\"p\">:</span> <span class=\"n\">BASE_DIR</span> <span class=\"o\">/</span> <span class=\"s\">\"db.sqlite3\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You can also use <a href=\"https://github.com/jazzband/dj-database-url/\"><code class=\"language-plaintext highlighter-rouge\">dj-database-url</code></a> to configure your <code class=\"language-plaintext highlighter-rouge\">DATABASES</code> setting. In this case, the <code class=\"language-plaintext highlighter-rouge\">DATABASE_URL</code> might look like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>DATABASE_URL=sqlite:///path/to/your/database/file.sqlite3\n</code></pre></div></div>\n\n<p>Now, before you start your django project for the first time, which automatically creates a SQLite database for you, you should create it yourself first, by running:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlite3 db.sqlite3 <span class=\"s1\">'PRAGMA journal_mode=wal; PRAGMA busy_timeout = 5000;'</span>\n</code></pre></div></div>\n\n<p>The PRAGMA synchronous setting is a little bit more tricky, since it does not apply to the database, <a href=\"https://stackoverflow.com/questions/36308801/sqlite3-pragma-synchronous-not-persistent\">but to the database connection</a>.\nHence, you have to change this setting <a href=\"https://stackoverflow.com/a/6843199/5540654\">for all connections opened by the Django app</a>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.signals</span> <span class=\"kn\">import</span> <span class=\"n\">connection_created</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">activate_foreign_keys</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">vendor</span> <span class=\"o\">==</span> <span class=\"s\">'sqlite'</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n        <span class=\"n\">cursor</span><span class=\"p\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s\">'PRAGMA synchronous=1;'</span><span class=\"p\">)</span>\n\n<span class=\"n\">connection_created</span><span class=\"p\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">activate_foreign_keys</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"how-to-configure-litestream-to-back-up-your-database-to-s3\">How to configure Litestream to back up your Database to S3</h2>\n\n<ul>\n  <li><a href=\"https://litestream.io/install/\">Install</a></li>\n  <li><a href=\"https://litestream.io/guides/s3/\">Replicating to Amazon S3</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Running as a Systemd service</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Tips &amp; Caveats</a></li>\n</ul>\n\n<h2 id=\"further-reading\">Further reading</h2>\n<ul>\n  <li>https://tailscale.com/blog/database-for-2022/</li>\n  <li>https://blog.expensify.com/2018/01/08/scaling-sqlite-to-4m-qps-on-a-single-server/</li>\n  <li>https://simonwillison.net/2022/Oct/23/datasette-gunicorn/</li>\n  <li>https://github.com/tomdyson/django-sqlite-load-tests</li>\n</ul>\n\n","tags":["SQLite","databases","DjangoCon"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/18/sqlite.html","previous":{"title":"How to set up a Django project","tags":["pyenv","poetry"],"categories":["Development"],"url":"/development/2023/06/14/set-up-a-django-project.html","collection":"posts","path":"_posts/2023-06-14-set-up-a-django-project.md","relative_path":"_posts/2023-06-14-set-up-a-django-project.md","date":"2023-06-14 10:00:00 +0000","id":"/development/2023/06/14/set-up-a-django-project","draft":false,"layout":"post","published":true,"author":"victor","slug":"set-up-a-django-project","ext":".md"},"collection":"posts","next":{"title":"Gunicorn from scratch","tags":["gunicorn"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/23/gunicorn.html","collection":"posts","path":"_posts/2023-06-21-gunicorn.md","relative_path":"_posts/2023-06-21-gunicorn.md","date":"2023-06-23 00:00:00 +0000","id":"/production%20deployment/2023/06/23/gunicorn","draft":false,"layout":"post","published":true,"author":"victor","slug":"gunicorn","ext":".md"},"path":"_posts/2023-06-14-sqlite.md","output":"<!DOCTYPE html>\n<!--\n    So Simple Jekyll Theme 3.2.0\n    Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes\n    Free for personal and commercial use under the MIT license\n    https://github.com/mmistakes/so-simple-theme/blob/master/LICENSE\n-->\n<html lang=\"en-US\" class=\"no-js\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  \n  \n\n  \n    \n    <!-- Begin Jekyll SEO tag v2.8.0 -->\n<title>SQLite in production | Minimalist Django</title>\n<meta name=\"generator\" content=\"Jekyll v4.2.2\" />\n<meta property=\"og:title\" content=\"SQLite in production\" />\n<meta name=\"author\" content=\"Victor Movileanu\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta name=\"description\" content=\"How SQLite can be used in production\" />\n<meta property=\"og:description\" content=\"How SQLite can be used in production\" />\n<link rel=\"canonical\" href=\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\" />\n<meta property=\"og:url\" content=\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\" />\n<meta property=\"og:site_name\" content=\"Minimalist Django\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-06-18T00:00:00+00:00\" />\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta property=\"twitter:title\" content=\"SQLite in production\" />\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"author\":{\"@type\":\"Person\",\"name\":\"Victor Movileanu\"},\"dateModified\":\"2023-06-18T00:00:00+00:00\",\"datePublished\":\"2023-06-18T00:00:00+00:00\",\"description\":\"How SQLite can be used in production\",\"headline\":\"SQLite in production\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\"},\"publisher\":{\"@type\":\"Organization\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://minimalistdjango.com/images/django-rocket.svg\"},\"name\":\"Victor Movileanu\"},\"url\":\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\"}</script>\n<!-- End Jekyll SEO tag -->\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-PP61HM8LXR\"></script>\n<script>\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-PP61HM8LXR');\n</script>\n\n  \n\n  <script>\n    /* Cut the mustard */\n    if ( 'querySelector' in document && 'addEventListener' in window ) {\n      document.documentElement.className = document.documentElement.className.replace(/\\bno-js\\b/g, '') + 'js';\n    }\n  </script>\n\n  <link rel=\"stylesheet\" href=\"/assets/css/main.css\">\n  <link rel=\"stylesheet\" href=\"/assets/css/skins/default.css\">\n  <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Minimalist Django\" href=\"/feed.xml\">\n<!-- start custom head snippets -->\n\n<!-- insert favicons. use http://realfavicongenerator.net/ -->\n\n<!-- end custom head snippets -->\n\n</head>\n\n\n  <body class=\"layout--post  sqlite-in-production\">\n    <nav class=\"skip-links\">\n  <h2 class=\"screen-reader-text\">Skip links</h2>\n  <ul>\n    <li><a href=\"#primary-nav\" class=\"screen-reader-shortcut\">Skip to primary navigation</a></li>\n    <li><a href=\"#main\" class=\"screen-reader-shortcut\">Skip to content</a></li>\n    <li><a href=\"#footer\" class=\"screen-reader-shortcut\">Skip to footer</a></li>\n  </ul>\n</nav>\n\n    \n  <div class=\"navigation-wrapper\">\n    <a href=\"#menu-toggle\" id=\"menu-toggle\">Menu</a>\n    <nav id=\"primary-nav\" class=\"site-nav animated drop\">\n      <ul><li><a href=\"/\">Home</a></li><li><a href=\"/categories/\">Categories</a></li><li><a href=\"/tags/\">Tags</a></li><li><a href=\"/about/\">About</a></li></ul>\n    </nav>\n  </div><!-- /.navigation-wrapper -->\n\n\n    <header class=\"masthead\">\n  <div class=\"wrap\">\n    \n      <a href=\"/\" class=\"site-logo\" rel=\"home\" title=\"Minimalist Django\">\n        <img src=\"/images/django-rocket.svg\" class=\"site-logo-img animated fadeInDown\" alt=\"Minimalist Django\">\n      </a>\n    \n    \n    \n      \n        <div class=\"site-title animated fadeIn\"><a href=\"/\">Minimalist Django</a></div>\n      \n      <p class=\"site-description animated fadeIn\" itemprop=\"description\">The minimalist way of web development</p>\n    \n  </div>\n</header><!-- /.masthead -->\n\n\n    <main id=\"main\" class=\"main-content\" aria-label=\"Content\">\n  <article class=\"h-entry\">\n    \n\n    <div class=\"page-wrapper\">\n      <header class=\"page-header\">\n        \n        \n          <h1 id=\"page-title\" class=\"page-title p-name\">SQLite in production\n</h1>\n        \n      </header>\n\n      <div class=\"page-sidebar\">\n        <div class=\"page-author h-card p-author\"><img src=\"/images/me.jpg\" class=\"author-avatar u-photo\" alt=\"Victor Movileanu\"><div class=\"author-info\"><div class=\"author-name\">\n        <span class=\"p-name\">Victor Movileanu</span>\n      </div><ul class=\"author-links\"><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://twitter.com/ViggieSmalls5\"><i class=\"fab fa-twitter-square fa-lg\" title=\"Twitter\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://instagram.com/vickym.rulez\"><i class=\"fab fa-instagram fa-lg\" title=\"Instagram\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://github.com/movileanuv\"><i class=\"fab fa-github-square fa-lg\" title=\"GitHub\"></i></a>\n          </li></ul>\n    <time class=\"page-date dt-published\" datetime=\"2023-06-18T00:00:00+00:00\"><a class=\"u-url\" href=\"\">June 18, 2023</a>\n</time>\n\n  </div>\n</div>\n\n        \n  <h3 class=\"page-taxonomies-title\">Categories</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">Production deployment</li>\n  </ul>\n\n\n        \n  <h3 class=\"page-taxonomies-title\">Tags</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">SQLite</li><li class=\"page-taxonomy\">databases</li><li class=\"page-taxonomy\">DjangoCon</li>\n  </ul>\n\n\n      </div>\n\n      <div class=\"page-content\">\n        <div class=\"e-content\">\n          <p>People say <em>SQLite</em> is a database that is unsuitable for production use because of low performance, inability to handle\nmultiple concurrent writes, and other misconceptions.\nThis article is inspired by a talk at <a href=\"https://youtu.be/yTicYJDT1zE\"><em>DjangoCon 2023</em></a>  and an episode of <a href=\"https://changelog.com/podcast/433\"><em>The Changelog</em></a>.</p>\n\n<iframe class=\"youtube-iframe\" src=\"https://www.youtube.com/embed/yTicYJDT1zE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n\n<h2 id=\"video-summary\">Video summary</h2>\n<ul>\n  <li>SQLite is already in production. You can already see how many applications use SQLite on your computer with this command:\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  find / <span class=\"se\">\\(</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.db\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite3\"</span> <span class=\"se\">\\)</span> <span class=\"nt\">-type</span> f <span class=\"nt\">-exec</span> file <span class=\"o\">{}</span> <span class=\"se\">\\;</span> 2&gt;/dev/null | <span class=\"nb\">grep </span>SQLite\n</code></pre></div>    </div>\n  </li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=682\">11:20</a> it is a serverless database, which means you don’t need to configure an extra host, manage access by your application server, etc.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=866\">14:25</a> No performance loss because of network latency</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=931\">15:31</a> No N + 1 Query problems</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1051\">17:31</a> Concurrent writes are not a problem if you turn <a href=\"https://www.sqlite.org/wal.html\">Write-Ahead Logging</a> for your SQLite database. For this, you can execute <code class=\"language-plaintext highlighter-rouge\">sqlite3 db.sqlite3 'PRAGMA journal_mode=wal;'</code> in your shell.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1142\">19:02</a> Speed up writes even more by reducing the <a href=\"https://www.sqlite.org/pragma.html#pragma_synchronous\">synchronous level</a></li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1253\">20:53</a> You can easily back up the SQLite database with <a href=\"https://litestream.io/\">Litestream</a></li>\n</ul>\n\n<h2 id=\"set-up-django-to-run-with-sqlite\">Set up Django to run with SQLite</h2>\n\n<p>When creating a new Django project, it comes with following default setting for <code class=\"language-plaintext highlighter-rouge\">DATABASES</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"ENGINE\"</span><span class=\"p\">:</span> <span class=\"s\">\"django.db.backends.sqlite3\"</span><span class=\"p\">,</span>\n        <span class=\"s\">\"NAME\"</span><span class=\"p\">:</span> <span class=\"n\">BASE_DIR</span> <span class=\"o\">/</span> <span class=\"s\">\"db.sqlite3\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You can also use <a href=\"https://github.com/jazzband/dj-database-url/\"><code class=\"language-plaintext highlighter-rouge\">dj-database-url</code></a> to configure your <code class=\"language-plaintext highlighter-rouge\">DATABASES</code> setting. In this case, the <code class=\"language-plaintext highlighter-rouge\">DATABASE_URL</code> might look like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>DATABASE_URL=sqlite:///path/to/your/database/file.sqlite3\n</code></pre></div></div>\n\n<p>Now, before you start your django project for the first time, which automatically creates a SQLite database for you, you should create it yourself first, by running:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlite3 db.sqlite3 <span class=\"s1\">'PRAGMA journal_mode=wal; PRAGMA busy_timeout = 5000;'</span>\n</code></pre></div></div>\n\n<p>The PRAGMA synchronous setting is a little bit more tricky, since it does not apply to the database, <a href=\"https://stackoverflow.com/questions/36308801/sqlite3-pragma-synchronous-not-persistent\">but to the database connection</a>.\nHence, you have to change this setting <a href=\"https://stackoverflow.com/a/6843199/5540654\">for all connections opened by the Django app</a>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.signals</span> <span class=\"kn\">import</span> <span class=\"n\">connection_created</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">activate_foreign_keys</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">vendor</span> <span class=\"o\">==</span> <span class=\"s\">'sqlite'</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n        <span class=\"n\">cursor</span><span class=\"p\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s\">'PRAGMA synchronous=1;'</span><span class=\"p\">)</span>\n\n<span class=\"n\">connection_created</span><span class=\"p\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">activate_foreign_keys</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"how-to-configure-litestream-to-back-up-your-database-to-s3\">How to configure Litestream to back up your Database to S3</h2>\n\n<ul>\n  <li><a href=\"https://litestream.io/install/\">Install</a></li>\n  <li><a href=\"https://litestream.io/guides/s3/\">Replicating to Amazon S3</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Running as a Systemd service</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Tips &amp; Caveats</a></li>\n</ul>\n\n<h2 id=\"further-reading\">Further reading</h2>\n<ul>\n  <li>https://tailscale.com/blog/database-for-2022/</li>\n  <li>https://blog.expensify.com/2018/01/08/scaling-sqlite-to-4m-qps-on-a-single-server/</li>\n  <li>https://simonwillison.net/2022/Oct/23/datasette-gunicorn/</li>\n  <li>https://github.com/tomdyson/django-sqlite-load-tests</li>\n</ul>\n\n\n        </div>\n\n        \n\n        \n\n        <nav class=\"page-pagination\" role=\"navigation\">\n  \n    <a class=\"page-previous\" href=\"/development/2023/06/14/set-up-a-django-project.html\">\n      <h4 class=\"page-pagination-label\">Previous</h4>\n      <span class=\"page-pagination-title\">\n        <i class=\"fas fa-arrow-left\"></i> How to set up a Django project\n\n      </span>\n    </a>\n  \n\n  \n    <a class=\"page-next\" href=\"/production%20deployment/2023/06/23/gunicorn.html\">\n      <h4 class=\"page-pagination-label\">Next</h4>\n      <span class=\"page-pagination-title\">\n        Gunicorn from scratch\n <i class=\"fas fa-arrow-right\"></i>\n      </span>\n    </a>\n  \n</nav>\n\n      </div>\n    </div>\n  </article>\n</main>\n\n\n    <footer id=\"footer\" class=\"site-footer\">\n  <!-- start custom footer snippets -->\n\n<!-- end custom footer snippets -->\n<div class=\"copyright\">\n    \n      <p>&copy; 2023 Minimalist Django. Powered by <a href=\"https://jekyllrb.com\" rel=\"nofollow\">Jekyll</a> &amp; <a href=\"https://github.com/mmistakes/so-simple-theme\" rel=\"nofollow\">So Simple</a>.</p>\n    \n  </div>\n</footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n  <script src=\"/assets/js/main.min.js\"></script>\n  <script src=\"https://use.fontawesome.com/releases/v5.0.12/js/all.js\"></script>\n\n\n  </body>\n\n</html>\n","relative_path":"_posts/2023-06-14-sqlite.md","date":"2023-06-18 00:00:00 +0000","id":"/production%20deployment/2023/06/18/sqlite","excerpt":"How SQLite can be used in production","draft":false,"layout":"post","published":true,"author":"victor","slug":"sqlite","ext":".md"},"collection":"posts","next":{"title":"Manage background processes with Supervisor or Systemd","content":"<h2 id=\"create-a-bash-script-that-executes-your-django-app\">Create a bash script that executes your django app</h2>\n\n<p>The nice thing aboout a bash script is that you can easily extend it to more than just executing your WSGI application with <em>Gunicorn</em>, for example to provide additional environment variables. Besides, it keeps things together in one place and you can execute it without any arguments.</p>\n\n<p>Let’s create a <code class=\"language-plaintext highlighter-rouge\">run</code> file inside our project <code class=\"language-plaintext highlighter-rouge\">src/</code> directory:</p>\n\n<div class=\"language-bash terminal-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>tree <span class=\"nt\">-L</span> 1\n<span class=\"nb\">.</span>\n├── gunicorn.conf.py\n├── manage.py\n├── project\n│   ├── __init__.py\n│   ├── asgi.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n└── run                 &lt;<span class=\"nt\">---</span> create here\n</code></pre></div></div>\n\n<p>and make it executable with <code class=\"language-plaintext highlighter-rouge\">chmod +x run</code>.</p>\n\n<p>Now the contents of the file can be reduced to following elements:</p>\n<ul>\n  <li>the <em>shebang</em> <code class=\"language-plaintext highlighter-rouge\">#!</code> and the interpreter (<code class=\"language-plaintext highlighter-rouge\">/bin/bash</code> or <code class=\"language-plaintext highlighter-rouge\">/usr/bin/env bash</code>)</li>\n  <li>some instructions to load environment variables from a file <sup id=\"fnref:envfile\" role=\"doc-noteref\"><a href=\"#fn:envfile\" class=\"footnote\" rel=\"footnote\">1</a></sup></li>\n  <li>the command that executes your WSGI application</li>\n</ul>\n\n<div class=\"language-bash file-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#! /bin/bash</span>\n\n<span class=\"nb\">set</span> <span class=\"nt\">-a</span>\n<span class=\"nb\">.</span> .env\n<span class=\"nb\">set</span> +a\n\n<span class=\"nb\">exec</span> <span class=\"nv\">$VIRTUAL_ENV</span>/bin/gunicorn project.wsgi\n</code></pre></div></div>\n\n<p>The nice thing about the usage of the <code class=\"language-plaintext highlighter-rouge\">$VIRTUAL_ENV</code> environment variable is that <strong>it is automatically set when you activate your virtual environment</strong> <sup id=\"fnref:virtualenv\" role=\"doc-noteref\"><a href=\"#fn:virtualenv\" class=\"footnote\" rel=\"footnote\">2</a></sup>, or you can set it externally with <em>Supervisor</em> or <em>Systemd</em>.</p>\n\n<p>Another tiny, but important thing to notice, that might be easily overlooked is <strong>the usage of <code class=\"language-plaintext highlighter-rouge\">exec</code></strong>. Why not simply call <code class=\"language-plaintext highlighter-rouge\">$VIRTUAL_ENV/bin/gunicorn project.wsgi</code>? Well, I had to do the mistake miself before I found out why my <em>Gunicorn</em> processes were still running after stoping the <em>Supervisor</em> service. The reason is that <em>Supervisor</em> requires that programs it is configured to run don’t daemonize themselves <sup id=\"fnref:exec\" role=\"doc-noteref\"><a href=\"#fn:exec\" class=\"footnote\" rel=\"footnote\">3</a></sup>. <code class=\"language-plaintext highlighter-rouge\">exec</code> will replace the current shell with the command, so any instructions after that will never be executed.</p>\n\n<p>Now you can execute <code class=\"language-plaintext highlighter-rouge\">./run</code> in your shell, with your virtual environment activated, and voilá, you have your <em>Django</em> app executed via a bash script.</p>\n\n<h2 id=\"supervisor\">Supervisor</h2>\n\n<p>The nice thing about <em>Supervisor</em> is that it is easy to configure and it provides some nice additional features such as <strong>log rotation</strong> <sup id=\"fnref:logrotate\" role=\"doc-noteref\"><a href=\"#fn:logrotate\" class=\"footnote\" rel=\"footnote\">4</a></sup>.</p>\n\n<p>To install <em>Supervisor</em> you need to execute</p>\n\n<div class=\"language-bash terminal-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">sudo </span>apt-get <span class=\"nt\">-y</span> <span class=\"nb\">install </span>supervisor\n<span class=\"nv\">$ </span><span class=\"nb\">sudo </span>systemctl <span class=\"nb\">enable </span>supervisor\n<span class=\"nv\">$ </span><span class=\"nb\">sudo </span>systemctl start supervisor\n</code></pre></div></div>\n\n<p>Place your <em>Django</em> application under <code class=\"language-plaintext highlighter-rouge\">/srv</code> <sup id=\"fnref:srv\" role=\"doc-noteref\"><a href=\"#fn:srv\" class=\"footnote\" rel=\"footnote\">5</a></sup> inside a directory called <strong><code class=\"language-plaintext highlighter-rouge\">my_app</code></strong>.\nCreate your virtual environment inside the same directory in a directory called <strong><code class=\"language-plaintext highlighter-rouge\">.venv</code></strong>.\nNow you can create a new file inside <code class=\"language-plaintext highlighter-rouge\">/etc/supervisor/conf.d/</code> called <code class=\"language-plaintext highlighter-rouge\">my_app.conf</code>:</p>\n\n<pre class=\"file-content\"><code class=\"language-init\">[program:my_app]\ndirectory=/srv/%(program_name)s\ncommand=/srv/%(program_name)s/run\nenvironment=/srv/%(program_name)s/.venv\nstderr_logfile=/var/log/supervisor/%(program_name)s_stderr.log\nstdout_logfile=/var/log/supervisor/%(program_name)s_stdout.log\n</code></pre>\n\n<p>After you saved the file, you can instruct <em>Supervisor</em> to reload the configuration:</p>\n\n<div class=\"language-bash terminal-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">sudo </span>supervisorctl reread\n<span class=\"nv\">$ </span><span class=\"nb\">sudo </span>supervisorctl update\n</code></pre></div></div>\n\n<p>Now your app is up and running on the port specified by the <em>Gunicorn</em> <strong>bind</strong> address inside the <strong><code class=\"language-plaintext highlighter-rouge\">gunicorn.conf.py</code></strong> file.</p>\n\n<blockquote class=\"tip-content\">\n  <h2 id=\"-tip\">🤫 Tip</h2>\n  <p><em>Supervisor</em> comes with an HTTP server to monitor your services. You can enable it by specifying the <a href=\"http://supervisord.org/configuration.html#inet-http-server-section-values\">[inet_http_server]</a> setting inside <code class=\"language-plaintext highlighter-rouge\">/etc/supervisor/supervisord.conf</code>:</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[inet_http_server]\nport = 9001\n</code></pre></div>  </div>\n  <p>and restarting the service with <code class=\"language-plaintext highlighter-rouge\">sudo supervisorctl reload</code>. It’s a nice gimmick, you shouldn’t expose it on the internet though.</p>\n</blockquote>\n\n<h2 id=\"systemd\">Systemd</h2>\n\n<p>The downside of <em>Supervisor</em> is that there is no way you can bind your application to any <strong>privileged ports &lt; 1024</strong>.\n<em>Systemd</em> allows you to do that with the <code class=\"language-plaintext highlighter-rouge\">AmbientCapabilities=CAP_NET_BIND_SERVICE</code> setting.\nYou can also specify <strong>an environment file</strong> for your application, instead of loading them inside of the <code class=\"language-plaintext highlighter-rouge\">run</code> script.\nHere is how your service configuration file would look like:</p>\n\n<div class=\"language-plaintext file-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[Unit]\nDescription=gunicorn daemon\nAfter=network.target\n\n[Service]\nEnvironmentFile=/srv/my_app/.env\nWorkingDirectory=/srv/my_app/\nExecStart=/srv/my_app/run\nAmbientCapabilities=CAP_NET_BIND_SERVICE\nUser=victor\nGroup=victor\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></div></div>\n\n<ul>\n  <li>The <code class=\"language-plaintext highlighter-rouge\">[Unit]</code> section is used to specify metadata and dependencies. It has a description and an instruction to start after the <a href=\"https://www.freedesktop.org/wiki/Software/systemd/NetworkTarget/\">network is up</a>.</li>\n  <li>The <code class=\"language-plaintext highlighter-rouge\">[Service]</code> section specifies your service configuration. The values are self explanatory and the user is set to me, to demonstrate that <em>Gunicorn</em> application can bind to port 80.</li>\n  <li>The <code class=\"language-plaintext highlighter-rouge\">[Install]</code> section tells <em>Systemd</em> at which moment during the boot process this service should be started.</li>\n</ul>\n\n<p>Create this file inside <code class=\"language-plaintext highlighter-rouge\">/etc/systemd/system/my_app.service</code> and create a file <code class=\"language-plaintext highlighter-rouge\">/srv/my_app/.env</code> to store the <code class=\"language-plaintext highlighter-rouge\">$VIRTUAL_ENV</code> environment variable <sup id=\"fnref:virtualenv:1\" role=\"doc-noteref\"><a href=\"#fn:virtualenv\" class=\"footnote\" rel=\"footnote\">2</a></sup>:</p>\n\n<div class=\"language-plaintext file-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>VIRTUAL_ENV=/path/to/your/virtualenv\n</code></pre></div></div>\n\n<p>In the <code class=\"language-plaintext highlighter-rouge\">gunicorn.conf.py</code> file, change the bind to the address to <code class=\"language-plaintext highlighter-rouge\">127.0.0.1:80</code>. Start the service with <code class=\"language-plaintext highlighter-rouge\">sudo systemctl start my_app</code>. To enable it to run on boot, you have to execute <code class=\"language-plaintext highlighter-rouge\">sudo systemctl enable my_app</code>. Now, if you go to your browser and type in <code class=\"language-plaintext highlighter-rouge\">127.0.0.1</code>, you will se your <em>Django</em> application running on port 80. To see the logs of your service, you can run <code class=\"language-plaintext highlighter-rouge\">journalctl -u my_app</code>.</p>\n\n<p>The downsides of <em>Systemd</em> is that it is a little bit more complicated to configure, and it does not have some convenient features such as automatic log rotation.\nOn the other hand, it is much more powerful than <em>Supervisor</em>, more widespreaded and better maintained. I found <a href=\"https://news.ycombinator.com/item?id=18324295\">this nice post on <em>Hacker News</em></a> that brags a bit about the many capabilities of <em>Systemd</em>, but you should go ahead and make your own opinion which one is best fit for you.</p>\n\n<h2 id=\"further-reading\">Further Reading</h2>\n<ul>\n  <li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-16-04\" target=\"_blank\">Digitalocean</a>: Comprehensive tutorial on how to set up a <em>Django</em> application with <em>Gunicorn</em> and <em>Nginx</em></li>\n  <li><a href=\"https://simpleisbetterthancomplex.com/series/2017/10/16/a-complete-beginners-guide-to-django-part-7.html\" target=\"_blank\">simpleisbetterthancomplex.com</a>: Last step of an overall great Django tutorial, that also shows how to configure Gunicorn and Nginx for production deployment</li>\n  <li><a href=\"https://opensource.com/article/20/5/systemd-startup\">Understanding systemd at startup on Linux</a>: More on <em>Systemd</em></li>\n</ul>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:envfile\" role=\"doc-endnote\">\n      <p>See <a href=\"https://stackoverflow.com/questions/19331497/set-environment-variables-from-file-of-key-value-pairs\">this post on <em>stackoverflow</em></a> for different alternatives on how to read environment variables from a file. Note that variables with space will not be exported, so you have to put them in quotes. <a href=\"#fnref:envfile\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:virtualenv\" role=\"doc-endnote\">\n      <p>In <a href=\"/development/2023/06/14/set-up-a-django-project.html\">this article</a>  I describe how to generally set up a virtual environment for your <em>Django</em> project. It is not the same way as you would do it on a remote host, which will be described in a later post. <a href=\"#fnref:virtualenv\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a> <a href=\"#fnref:virtualenv:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;<sup>2</sup></a></p>\n    </li>\n    <li id=\"fn:exec\" role=\"doc-endnote\">\n      <p><a href=\"http://veithen.io/2014/11/16/sigterm-propagation.html\">How to propagate SIGTERM to a child process in a Bash script</a> <a href=\"#fnref:exec\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:logrotate\" role=\"doc-endnote\">\n      <p>By default, <em>Supervisor</em> rotates your log files, but you can also configure it to run with <a href=\"https://medium.com/@doodyp/easy-logging-with-logrotate-and-supervisord-16b72b79ded0\"><em>Logrotate</em></a>. <a href=\"#fnref:logrotate\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:srv\" role=\"doc-endnote\">\n      <p>This is the recommended location, according to the <a href=\"https://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html\">Filesystem Hierarchy Standard</a> <a href=\"#fnref:srv\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n","tags":["supervisor","systemd","gunicorn"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/29/supervisor.html","previous":{"title":"Gunicorn from scratch","tags":["gunicorn"],"categories":["Production deployment"],"url":"/production%20deployment/2023/06/23/gunicorn.html","collection":"posts","path":"_posts/2023-06-21-gunicorn.md","relative_path":"_posts/2023-06-21-gunicorn.md","date":"2023-06-23 00:00:00 +0000","id":"/production%20deployment/2023/06/23/gunicorn","draft":false,"layout":"post","published":true,"author":"victor","slug":"gunicorn","ext":".md"},"collection":"posts","next":{"title":"Deploy a Django app on a VM (manually)","tags":["pyenv","pip","git","gunicorn","systemd"],"categories":["Production deployment"],"url":"/production%20deployment/2023/07/03/manual-deploy.html","collection":"posts","path":"_posts/2023-06-28-manual-deploy.md","relative_path":"_posts/2023-06-28-manual-deploy.md","date":"2023-07-03 00:00:00 +0000","id":"/production%20deployment/2023/07/03/manual-deploy","draft":false,"layout":"post","published":true,"author":"victor","slug":"manual-deploy","ext":".md"},"path":"_posts/2023-06-25-supervisor.md","output":"<!DOCTYPE html>\n<!--\n    So Simple Jekyll Theme 3.2.0\n    Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes\n    Free for personal and commercial use under the MIT license\n    https://github.com/mmistakes/so-simple-theme/blob/master/LICENSE\n-->\n<html lang=\"en-US\" class=\"no-js\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  \n  \n\n  \n    \n    <!-- Begin Jekyll SEO tag v2.8.0 -->\n<title>Manage background processes with Supervisor or Systemd | Minimalist Django</title>\n<meta name=\"generator\" content=\"Jekyll v4.2.2\" />\n<meta property=\"og:title\" content=\"Manage background processes with Supervisor or Systemd\" />\n<meta name=\"author\" content=\"Victor Movileanu\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta name=\"description\" content=\"How to run your Django application as a background process\" />\n<meta property=\"og:description\" content=\"How to run your Django application as a background process\" />\n<link rel=\"canonical\" href=\"https://minimalistdjango.com/production%20deployment/2023/06/29/supervisor.html\" />\n<meta property=\"og:url\" content=\"https://minimalistdjango.com/production%20deployment/2023/06/29/supervisor.html\" />\n<meta property=\"og:site_name\" content=\"Minimalist Django\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-06-29T00:00:00+00:00\" />\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta property=\"twitter:title\" content=\"Manage background processes with Supervisor or Systemd\" />\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"author\":{\"@type\":\"Person\",\"name\":\"Victor Movileanu\"},\"dateModified\":\"2023-06-29T00:00:00+00:00\",\"datePublished\":\"2023-06-29T00:00:00+00:00\",\"description\":\"How to run your Django application as a background process\",\"headline\":\"Manage background processes with Supervisor or Systemd\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://minimalistdjango.com/production%20deployment/2023/06/29/supervisor.html\"},\"publisher\":{\"@type\":\"Organization\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://minimalistdjango.com/images/django-rocket.svg\"},\"name\":\"Victor Movileanu\"},\"url\":\"https://minimalistdjango.com/production%20deployment/2023/06/29/supervisor.html\"}</script>\n<!-- End Jekyll SEO tag -->\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-PP61HM8LXR\"></script>\n<script>\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-PP61HM8LXR');\n</script>\n\n  \n\n  <script>\n    /* Cut the mustard */\n    if ( 'querySelector' in document && 'addEventListener' in window ) {\n      document.documentElement.className = document.documentElement.className.replace(/\\bno-js\\b/g, '') + 'js';\n    }\n  </script>\n\n  <link rel=\"stylesheet\" href=\"/assets/css/main.css\">\n  <link rel=\"stylesheet\" href=\"/assets/css/skins/default.css\">\n  <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Minimalist Django\" href=\"/feed.xml\">\n<!-- start custom head snippets -->\n\n<!-- insert favicons. use http://realfavicongenerator.net/ -->\n\n<!-- end custom head snippets -->\n\n</head>\n\n\n  <body class=\"layout--post  manage-background-processes-with-supervisor-or-systemd\">\n    <nav class=\"skip-links\">\n  <h2 class=\"screen-reader-text\">Skip links</h2>\n  <ul>\n    <li><a href=\"#primary-nav\" class=\"screen-reader-shortcut\">Skip to primary navigation</a></li>\n    <li><a href=\"#main\" class=\"screen-reader-shortcut\">Skip to content</a></li>\n    <li><a href=\"#footer\" class=\"screen-reader-shortcut\">Skip to footer</a></li>\n  </ul>\n</nav>\n\n    \n  <div class=\"navigation-wrapper\">\n    <a href=\"#menu-toggle\" id=\"menu-toggle\">Menu</a>\n    <nav id=\"primary-nav\" class=\"site-nav animated drop\">\n      <ul><li><a href=\"/\">Home</a></li><li><a href=\"/categories/\">Categories</a></li><li><a href=\"/tags/\">Tags</a></li><li><a href=\"/about/\">About</a></li></ul>\n    </nav>\n  </div><!-- /.navigation-wrapper -->\n\n\n    <header class=\"masthead\">\n  <div class=\"wrap\">\n    \n      <a href=\"/\" class=\"site-logo\" rel=\"home\" title=\"Minimalist Django\">\n        <img src=\"/images/django-rocket.svg\" class=\"site-logo-img animated fadeInDown\" alt=\"Minimalist Django\">\n      </a>\n    \n    \n    \n      \n        <div class=\"site-title animated fadeIn\"><a href=\"/\">Minimalist Django</a></div>\n      \n      <p class=\"site-description animated fadeIn\" itemprop=\"description\">The minimalist way of web development</p>\n    \n  </div>\n</header><!-- /.masthead -->\n\n\n    <main id=\"main\" class=\"main-content\" aria-label=\"Content\">\n  <article class=\"h-entry\">\n    \n\n    <div class=\"page-wrapper\">\n      <header class=\"page-header\">\n        \n        \n          <h1 id=\"page-title\" class=\"page-title p-name\">Manage background processes with Supervisor or Systemd\n</h1>\n        \n      </header>\n\n      <div class=\"page-sidebar\">\n        <div class=\"page-author h-card p-author\"><img src=\"/images/me.jpg\" class=\"author-avatar u-photo\" alt=\"Victor Movileanu\"><div class=\"author-info\"><div class=\"author-name\">\n        <span class=\"p-name\">Victor Movileanu</span>\n      </div><ul class=\"author-links\"><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://twitter.com/ViggieSmalls5\"><i class=\"fab fa-twitter-square fa-lg\" title=\"Twitter\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://instagram.com/vickym.rulez\"><i class=\"fab fa-instagram fa-lg\" title=\"Instagram\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://github.com/movileanuv\"><i class=\"fab fa-github-square fa-lg\" title=\"GitHub\"></i></a>\n          </li></ul>\n    <time class=\"page-date dt-published\" datetime=\"2023-06-29T00:00:00+00:00\"><a class=\"u-url\" href=\"\">June 29, 2023</a>\n</time>\n\n  </div>\n</div>\n\n        \n  <h3 class=\"page-taxonomies-title\">Categories</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">Production deployment</li>\n  </ul>\n\n\n        \n  <h3 class=\"page-taxonomies-title\">Tags</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">supervisor</li><li class=\"page-taxonomy\">systemd</li><li class=\"page-taxonomy\">gunicorn</li>\n  </ul>\n\n\n      </div>\n\n      <div class=\"page-content\">\n        <div class=\"e-content\">\n          <h2 id=\"create-a-bash-script-that-executes-your-django-app\">Create a bash script that executes your django app</h2>\n\n<p>The nice thing aboout a bash script is that you can easily extend it to more than just executing your WSGI application with <em>Gunicorn</em>, for example to provide additional environment variables. Besides, it keeps things together in one place and you can execute it without any arguments.</p>\n\n<p>Let’s create a <code class=\"language-plaintext highlighter-rouge\">run</code> file inside our project <code class=\"language-plaintext highlighter-rouge\">src/</code> directory:</p>\n\n<div class=\"language-bash terminal-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>tree <span class=\"nt\">-L</span> 1\n<span class=\"nb\">.</span>\n├── gunicorn.conf.py\n├── manage.py\n├── project\n│   ├── __init__.py\n│   ├── asgi.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n└── run                 &lt;<span class=\"nt\">---</span> create here\n</code></pre></div></div>\n\n<p>and make it executable with <code class=\"language-plaintext highlighter-rouge\">chmod +x run</code>.</p>\n\n<p>Now the contents of the file can be reduced to following elements:</p>\n<ul>\n  <li>the <em>shebang</em> <code class=\"language-plaintext highlighter-rouge\">#!</code> and the interpreter (<code class=\"language-plaintext highlighter-rouge\">/bin/bash</code> or <code class=\"language-plaintext highlighter-rouge\">/usr/bin/env bash</code>)</li>\n  <li>some instructions to load environment variables from a file <sup id=\"fnref:envfile\" role=\"doc-noteref\"><a href=\"#fn:envfile\" class=\"footnote\" rel=\"footnote\">1</a></sup></li>\n  <li>the command that executes your WSGI application</li>\n</ul>\n\n<div class=\"language-bash file-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#! /bin/bash</span>\n\n<span class=\"nb\">set</span> <span class=\"nt\">-a</span>\n<span class=\"nb\">.</span> .env\n<span class=\"nb\">set</span> +a\n\n<span class=\"nb\">exec</span> <span class=\"nv\">$VIRTUAL_ENV</span>/bin/gunicorn project.wsgi\n</code></pre></div></div>\n\n<p>The nice thing about the usage of the <code class=\"language-plaintext highlighter-rouge\">$VIRTUAL_ENV</code> environment variable is that <strong>it is automatically set when you activate your virtual environment</strong> <sup id=\"fnref:virtualenv\" role=\"doc-noteref\"><a href=\"#fn:virtualenv\" class=\"footnote\" rel=\"footnote\">2</a></sup>, or you can set it externally with <em>Supervisor</em> or <em>Systemd</em>.</p>\n\n<p>Another tiny, but important thing to notice, that might be easily overlooked is <strong>the usage of <code class=\"language-plaintext highlighter-rouge\">exec</code></strong>. Why not simply call <code class=\"language-plaintext highlighter-rouge\">$VIRTUAL_ENV/bin/gunicorn project.wsgi</code>? Well, I had to do the mistake miself before I found out why my <em>Gunicorn</em> processes were still running after stoping the <em>Supervisor</em> service. The reason is that <em>Supervisor</em> requires that programs it is configured to run don’t daemonize themselves <sup id=\"fnref:exec\" role=\"doc-noteref\"><a href=\"#fn:exec\" class=\"footnote\" rel=\"footnote\">3</a></sup>. <code class=\"language-plaintext highlighter-rouge\">exec</code> will replace the current shell with the command, so any instructions after that will never be executed.</p>\n\n<p>Now you can execute <code class=\"language-plaintext highlighter-rouge\">./run</code> in your shell, with your virtual environment activated, and voilá, you have your <em>Django</em> app executed via a bash script.</p>\n\n<h2 id=\"supervisor\">Supervisor</h2>\n\n<p>The nice thing about <em>Supervisor</em> is that it is easy to configure and it provides some nice additional features such as <strong>log rotation</strong> <sup id=\"fnref:logrotate\" role=\"doc-noteref\"><a href=\"#fn:logrotate\" class=\"footnote\" rel=\"footnote\">4</a></sup>.</p>\n\n<p>To install <em>Supervisor</em> you need to execute</p>\n\n<div class=\"language-bash terminal-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">sudo </span>apt-get <span class=\"nt\">-y</span> <span class=\"nb\">install </span>supervisor\n<span class=\"nv\">$ </span><span class=\"nb\">sudo </span>systemctl <span class=\"nb\">enable </span>supervisor\n<span class=\"nv\">$ </span><span class=\"nb\">sudo </span>systemctl start supervisor\n</code></pre></div></div>\n\n<p>Place your <em>Django</em> application under <code class=\"language-plaintext highlighter-rouge\">/srv</code> <sup id=\"fnref:srv\" role=\"doc-noteref\"><a href=\"#fn:srv\" class=\"footnote\" rel=\"footnote\">5</a></sup> inside a directory called <strong><code class=\"language-plaintext highlighter-rouge\">my_app</code></strong>.\nCreate your virtual environment inside the same directory in a directory called <strong><code class=\"language-plaintext highlighter-rouge\">.venv</code></strong>.\nNow you can create a new file inside <code class=\"language-plaintext highlighter-rouge\">/etc/supervisor/conf.d/</code> called <code class=\"language-plaintext highlighter-rouge\">my_app.conf</code>:</p>\n\n<pre class=\"file-content\"><code class=\"language-init\">[program:my_app]\ndirectory=/srv/%(program_name)s\ncommand=/srv/%(program_name)s/run\nenvironment=/srv/%(program_name)s/.venv\nstderr_logfile=/var/log/supervisor/%(program_name)s_stderr.log\nstdout_logfile=/var/log/supervisor/%(program_name)s_stdout.log\n</code></pre>\n\n<p>After you saved the file, you can instruct <em>Supervisor</em> to reload the configuration:</p>\n\n<div class=\"language-bash terminal-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">sudo </span>supervisorctl reread\n<span class=\"nv\">$ </span><span class=\"nb\">sudo </span>supervisorctl update\n</code></pre></div></div>\n\n<p>Now your app is up and running on the port specified by the <em>Gunicorn</em> <strong>bind</strong> address inside the <strong><code class=\"language-plaintext highlighter-rouge\">gunicorn.conf.py</code></strong> file.</p>\n\n<blockquote class=\"tip-content\">\n  <h2 id=\"-tip\">🤫 Tip</h2>\n  <p><em>Supervisor</em> comes with an HTTP server to monitor your services. You can enable it by specifying the <a href=\"http://supervisord.org/configuration.html#inet-http-server-section-values\">[inet_http_server]</a> setting inside <code class=\"language-plaintext highlighter-rouge\">/etc/supervisor/supervisord.conf</code>:</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[inet_http_server]\nport = 9001\n</code></pre></div>  </div>\n  <p>and restarting the service with <code class=\"language-plaintext highlighter-rouge\">sudo supervisorctl reload</code>. It’s a nice gimmick, you shouldn’t expose it on the internet though.</p>\n</blockquote>\n\n<h2 id=\"systemd\">Systemd</h2>\n\n<p>The downside of <em>Supervisor</em> is that there is no way you can bind your application to any <strong>privileged ports &lt; 1024</strong>.\n<em>Systemd</em> allows you to do that with the <code class=\"language-plaintext highlighter-rouge\">AmbientCapabilities=CAP_NET_BIND_SERVICE</code> setting.\nYou can also specify <strong>an environment file</strong> for your application, instead of loading them inside of the <code class=\"language-plaintext highlighter-rouge\">run</code> script.\nHere is how your service configuration file would look like:</p>\n\n<div class=\"language-plaintext file-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[Unit]\nDescription=gunicorn daemon\nAfter=network.target\n\n[Service]\nEnvironmentFile=/srv/my_app/.env\nWorkingDirectory=/srv/my_app/\nExecStart=/srv/my_app/run\nAmbientCapabilities=CAP_NET_BIND_SERVICE\nUser=victor\nGroup=victor\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></div></div>\n\n<ul>\n  <li>The <code class=\"language-plaintext highlighter-rouge\">[Unit]</code> section is used to specify metadata and dependencies. It has a description and an instruction to start after the <a href=\"https://www.freedesktop.org/wiki/Software/systemd/NetworkTarget/\">network is up</a>.</li>\n  <li>The <code class=\"language-plaintext highlighter-rouge\">[Service]</code> section specifies your service configuration. The values are self explanatory and the user is set to me, to demonstrate that <em>Gunicorn</em> application can bind to port 80.</li>\n  <li>The <code class=\"language-plaintext highlighter-rouge\">[Install]</code> section tells <em>Systemd</em> at which moment during the boot process this service should be started.</li>\n</ul>\n\n<p>Create this file inside <code class=\"language-plaintext highlighter-rouge\">/etc/systemd/system/my_app.service</code> and create a file <code class=\"language-plaintext highlighter-rouge\">/srv/my_app/.env</code> to store the <code class=\"language-plaintext highlighter-rouge\">$VIRTUAL_ENV</code> environment variable <sup id=\"fnref:virtualenv:1\" role=\"doc-noteref\"><a href=\"#fn:virtualenv\" class=\"footnote\" rel=\"footnote\">2</a></sup>:</p>\n\n<div class=\"language-plaintext file-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>VIRTUAL_ENV=/path/to/your/virtualenv\n</code></pre></div></div>\n\n<p>In the <code class=\"language-plaintext highlighter-rouge\">gunicorn.conf.py</code> file, change the bind to the address to <code class=\"language-plaintext highlighter-rouge\">127.0.0.1:80</code>. Start the service with <code class=\"language-plaintext highlighter-rouge\">sudo systemctl start my_app</code>. To enable it to run on boot, you have to execute <code class=\"language-plaintext highlighter-rouge\">sudo systemctl enable my_app</code>. Now, if you go to your browser and type in <code class=\"language-plaintext highlighter-rouge\">127.0.0.1</code>, you will se your <em>Django</em> application running on port 80. To see the logs of your service, you can run <code class=\"language-plaintext highlighter-rouge\">journalctl -u my_app</code>.</p>\n\n<p>The downsides of <em>Systemd</em> is that it is a little bit more complicated to configure, and it does not have some convenient features such as automatic log rotation.\nOn the other hand, it is much more powerful than <em>Supervisor</em>, more widespreaded and better maintained. I found <a href=\"https://news.ycombinator.com/item?id=18324295\">this nice post on <em>Hacker News</em></a> that brags a bit about the many capabilities of <em>Systemd</em>, but you should go ahead and make your own opinion which one is best fit for you.</p>\n\n<h2 id=\"further-reading\">Further Reading</h2>\n<ul>\n  <li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-16-04\" target=\"_blank\">Digitalocean</a>: Comprehensive tutorial on how to set up a <em>Django</em> application with <em>Gunicorn</em> and <em>Nginx</em></li>\n  <li><a href=\"https://simpleisbetterthancomplex.com/series/2017/10/16/a-complete-beginners-guide-to-django-part-7.html\" target=\"_blank\">simpleisbetterthancomplex.com</a>: Last step of an overall great Django tutorial, that also shows how to configure Gunicorn and Nginx for production deployment</li>\n  <li><a href=\"https://opensource.com/article/20/5/systemd-startup\">Understanding systemd at startup on Linux</a>: More on <em>Systemd</em></li>\n</ul>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:envfile\" role=\"doc-endnote\">\n      <p>See <a href=\"https://stackoverflow.com/questions/19331497/set-environment-variables-from-file-of-key-value-pairs\">this post on <em>stackoverflow</em></a> for different alternatives on how to read environment variables from a file. Note that variables with space will not be exported, so you have to put them in quotes. <a href=\"#fnref:envfile\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:virtualenv\" role=\"doc-endnote\">\n      <p>In <a href=\"/development/2023/06/14/set-up-a-django-project.html\">this article</a>  I describe how to generally set up a virtual environment for your <em>Django</em> project. It is not the same way as you would do it on a remote host, which will be described in a later post. <a href=\"#fnref:virtualenv\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a> <a href=\"#fnref:virtualenv:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;<sup>2</sup></a></p>\n    </li>\n    <li id=\"fn:exec\" role=\"doc-endnote\">\n      <p><a href=\"http://veithen.io/2014/11/16/sigterm-propagation.html\">How to propagate SIGTERM to a child process in a Bash script</a> <a href=\"#fnref:exec\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:logrotate\" role=\"doc-endnote\">\n      <p>By default, <em>Supervisor</em> rotates your log files, but you can also configure it to run with <a href=\"https://medium.com/@doodyp/easy-logging-with-logrotate-and-supervisord-16b72b79ded0\"><em>Logrotate</em></a>. <a href=\"#fnref:logrotate\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:srv\" role=\"doc-endnote\">\n      <p>This is the recommended location, according to the <a href=\"https://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html\">Filesystem Hierarchy Standard</a> <a href=\"#fnref:srv\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n\n        </div>\n\n        \n\n        \n\n        <nav class=\"page-pagination\" role=\"navigation\">\n  \n    <a class=\"page-previous\" href=\"/production%20deployment/2023/06/23/gunicorn.html\">\n      <h4 class=\"page-pagination-label\">Previous</h4>\n      <span class=\"page-pagination-title\">\n        <i class=\"fas fa-arrow-left\"></i> Gunicorn from scratch\n\n      </span>\n    </a>\n  \n\n  \n    <a class=\"page-next\" href=\"/production%20deployment/2023/07/03/manual-deploy.html\">\n      <h4 class=\"page-pagination-label\">Next</h4>\n      <span class=\"page-pagination-title\">\n        Deploy a Django app on a VM (manually)\n <i class=\"fas fa-arrow-right\"></i>\n      </span>\n    </a>\n  \n</nav>\n\n      </div>\n    </div>\n  </article>\n</main>\n\n\n    <footer id=\"footer\" class=\"site-footer\">\n  <!-- start custom footer snippets -->\n\n<!-- end custom footer snippets -->\n<div class=\"copyright\">\n    \n      <p>&copy; 2023 Minimalist Django. Powered by <a href=\"https://jekyllrb.com\" rel=\"nofollow\">Jekyll</a> &amp; <a href=\"https://github.com/mmistakes/so-simple-theme\" rel=\"nofollow\">So Simple</a>.</p>\n    \n  </div>\n</footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n  <script src=\"/assets/js/main.min.js\"></script>\n  <script src=\"https://use.fontawesome.com/releases/v5.0.12/js/all.js\"></script>\n\n\n  </body>\n\n</html>\n","relative_path":"_posts/2023-06-25-supervisor.md","date":"2023-06-29 00:00:00 +0000","id":"/production%20deployment/2023/06/29/supervisor","excerpt":"How to run your Django application as a background process","draft":false,"layout":"post","published":true,"author":"victor","slug":"supervisor","ext":".md"},"path":"_posts/2023-06-21-gunicorn.md","output":"<!DOCTYPE html>\n<!--\n    So Simple Jekyll Theme 3.2.0\n    Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes\n    Free for personal and commercial use under the MIT license\n    https://github.com/mmistakes/so-simple-theme/blob/master/LICENSE\n-->\n<html lang=\"en-US\" class=\"no-js\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  \n  \n\n  \n    \n    <!-- Begin Jekyll SEO tag v2.8.0 -->\n<title>Gunicorn from scratch | Minimalist Django</title>\n<meta name=\"generator\" content=\"Jekyll v4.2.2\" />\n<meta property=\"og:title\" content=\"Gunicorn from scratch\" />\n<meta name=\"author\" content=\"Victor Movileanu\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta name=\"description\" content=\"How to run your Django application through a WSGI server like Gunicorn\" />\n<meta property=\"og:description\" content=\"How to run your Django application through a WSGI server like Gunicorn\" />\n<link rel=\"canonical\" href=\"https://minimalistdjango.com/production%20deployment/2023/06/23/gunicorn.html\" />\n<meta property=\"og:url\" content=\"https://minimalistdjango.com/production%20deployment/2023/06/23/gunicorn.html\" />\n<meta property=\"og:site_name\" content=\"Minimalist Django\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-06-23T00:00:00+00:00\" />\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta property=\"twitter:title\" content=\"Gunicorn from scratch\" />\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"author\":{\"@type\":\"Person\",\"name\":\"Victor Movileanu\"},\"dateModified\":\"2023-06-23T00:00:00+00:00\",\"datePublished\":\"2023-06-23T00:00:00+00:00\",\"description\":\"How to run your Django application through a WSGI server like Gunicorn\",\"headline\":\"Gunicorn from scratch\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://minimalistdjango.com/production%20deployment/2023/06/23/gunicorn.html\"},\"publisher\":{\"@type\":\"Organization\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://minimalistdjango.com/images/django-rocket.svg\"},\"name\":\"Victor Movileanu\"},\"url\":\"https://minimalistdjango.com/production%20deployment/2023/06/23/gunicorn.html\"}</script>\n<!-- End Jekyll SEO tag -->\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-PP61HM8LXR\"></script>\n<script>\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-PP61HM8LXR');\n</script>\n\n  \n\n  <script>\n    /* Cut the mustard */\n    if ( 'querySelector' in document && 'addEventListener' in window ) {\n      document.documentElement.className = document.documentElement.className.replace(/\\bno-js\\b/g, '') + 'js';\n    }\n  </script>\n\n  <link rel=\"stylesheet\" href=\"/assets/css/main.css\">\n  <link rel=\"stylesheet\" href=\"/assets/css/skins/default.css\">\n  <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Minimalist Django\" href=\"/feed.xml\">\n<!-- start custom head snippets -->\n\n<!-- insert favicons. use http://realfavicongenerator.net/ -->\n\n<!-- end custom head snippets -->\n\n</head>\n\n\n  <body class=\"layout--post  gunicorn-from-scratch\">\n    <nav class=\"skip-links\">\n  <h2 class=\"screen-reader-text\">Skip links</h2>\n  <ul>\n    <li><a href=\"#primary-nav\" class=\"screen-reader-shortcut\">Skip to primary navigation</a></li>\n    <li><a href=\"#main\" class=\"screen-reader-shortcut\">Skip to content</a></li>\n    <li><a href=\"#footer\" class=\"screen-reader-shortcut\">Skip to footer</a></li>\n  </ul>\n</nav>\n\n    \n  <div class=\"navigation-wrapper\">\n    <a href=\"#menu-toggle\" id=\"menu-toggle\">Menu</a>\n    <nav id=\"primary-nav\" class=\"site-nav animated drop\">\n      <ul><li><a href=\"/\">Home</a></li><li><a href=\"/categories/\">Categories</a></li><li><a href=\"/tags/\">Tags</a></li><li><a href=\"/about/\">About</a></li></ul>\n    </nav>\n  </div><!-- /.navigation-wrapper -->\n\n\n    <header class=\"masthead\">\n  <div class=\"wrap\">\n    \n      <a href=\"/\" class=\"site-logo\" rel=\"home\" title=\"Minimalist Django\">\n        <img src=\"/images/django-rocket.svg\" class=\"site-logo-img animated fadeInDown\" alt=\"Minimalist Django\">\n      </a>\n    \n    \n    \n      \n        <div class=\"site-title animated fadeIn\"><a href=\"/\">Minimalist Django</a></div>\n      \n      <p class=\"site-description animated fadeIn\" itemprop=\"description\">The minimalist way of web development</p>\n    \n  </div>\n</header><!-- /.masthead -->\n\n\n    <main id=\"main\" class=\"main-content\" aria-label=\"Content\">\n  <article class=\"h-entry\">\n    \n\n    <div class=\"page-wrapper\">\n      <header class=\"page-header\">\n        \n        \n          <h1 id=\"page-title\" class=\"page-title p-name\">Gunicorn from scratch\n</h1>\n        \n      </header>\n\n      <div class=\"page-sidebar\">\n        <div class=\"page-author h-card p-author\"><img src=\"/images/me.jpg\" class=\"author-avatar u-photo\" alt=\"Victor Movileanu\"><div class=\"author-info\"><div class=\"author-name\">\n        <span class=\"p-name\">Victor Movileanu</span>\n      </div><ul class=\"author-links\"><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://twitter.com/ViggieSmalls5\"><i class=\"fab fa-twitter-square fa-lg\" title=\"Twitter\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://instagram.com/vickym.rulez\"><i class=\"fab fa-instagram fa-lg\" title=\"Instagram\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://github.com/movileanuv\"><i class=\"fab fa-github-square fa-lg\" title=\"GitHub\"></i></a>\n          </li></ul>\n    <time class=\"page-date dt-published\" datetime=\"2023-06-23T00:00:00+00:00\"><a class=\"u-url\" href=\"\">June 23, 2023</a>\n</time>\n\n  </div>\n</div>\n\n        \n  <h3 class=\"page-taxonomies-title\">Categories</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">Production deployment</li>\n  </ul>\n\n\n        \n  <h3 class=\"page-taxonomies-title\">Tags</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">gunicorn</li>\n  </ul>\n\n\n      </div>\n\n      <div class=\"page-content\">\n        <div class=\"e-content\">\n          <p>When you create a new <em>Django</em> project with <code class=\"language-plaintext highlighter-rouge\">django-admin startproject</code>, it automatically creates a <code class=\"language-plaintext highlighter-rouge\">wsgi.py</code> file for you.\nThis is a module containing a WSGI application object called <code class=\"language-plaintext highlighter-rouge\">application</code> that can be called by any type of WSGI server.\nHere is how this works.</p>\n\n<h2 id=\"the-simplest-wsgi-application\">The simplest WSGI application</h2>\n\n<p><em>WSGI</em>: stands for <em>Web Server Gateway Interface</em>. It is an interface specification by which server and application communicate.\nThe application provides a function which the server calls for each request:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">application</span><span class=\"p\">(</span><span class=\"n\">environ</span><span class=\"p\">,</span> <span class=\"n\">start_response</span><span class=\"p\">):</span>\n    <span class=\"p\">...</span>\n</code></pre></div></div>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">environ</code> is a Python dictionary containing the CGI-defined environment variables plus a few extras.</li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">start_response</code> is a callback by which the application returns the HTTP headers.</p>\n\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">start_response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">response_headers</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n  </li>\n  <li><code class=\"language-plaintext highlighter-rouge\">status</code> is an HTTP status string (e.g., “200 OK”)</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">response_headers</code> is a list of 2-tuples, the HTTP headers in key-value format</li>\n</ul>\n\n<p>The application function then returns an iterable of body chunks, that need to be bytes, e.g. <code class=\"language-plaintext highlighter-rouge\">[b\"&lt;html&gt;Hello, world!&lt;/html&gt;\"]</code>.\nSo the simplest WSGI application can be:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">application</span><span class=\"p\">(</span><span class=\"n\">environ</span><span class=\"p\">,</span> <span class=\"n\">start_response</span><span class=\"p\">):</span>\n    <span class=\"n\">start_response</span><span class=\"p\">(</span><span class=\"s\">\"200 OK\"</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s\">\"&lt;html&gt;Hello, world!&lt;/html&gt;\"</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<h2 id=\"gunicorn\">Gunicorn</h2>\n\n<p>Normally during development you use <code class=\"language-plaintext highlighter-rouge\">python manage.py runserver</code> to start a web server, but it is not the recommended way in production<sup>[<a href=\"https://docs.djangoproject.com/en/dev/ref/django-admin/#runserver\">1</a>]</sup>.\nBasically it is also a WSGI application that has some additional features such as reloading on code changes, but it has not gone through security audits or performance tests.</p>\n\n<p>Gunicorn stands for <strong>‘Green Unicorn’</strong> and is a Python WSGI HTTP Server for UNIX. \nIt has no dependencies and can be installed with <em>pip</em> or <em>poetry</em>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>poetry add gunicorn\n</code></pre></div></div>\n\n<p>Assuming you have a project structure like this:</p>\n\n<div class=\"language-plaintext tree-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.\n├── manage.py\n└── project\n    ├── __init__.py\n    ├── asgi.py\n    ├── settings.py\n    ├── urls.py\n    └── wsgi.py\n</code></pre></div></div>\n\n<p>you can run</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gunicorn project.wsgi:application\n</code></pre></div></div>\n\n<p>inside your project directory and it will spawn two processes that you can see when you call <code class=\"language-plaintext highlighter-rouge\">ps aux | grep gunicorn</code>. \nOne of them is the parent process that controlls all the workers, the other one is the process for the worker. By default it will only spawn one worker and listen to HTTP requests on <code class=\"language-plaintext highlighter-rouge\">127.0.0.1:8000</code>.</p>\n\n<h2 id=\"configure-gunicorn\">Configure Gunicorn</h2>\n\n<p>Gunicorn detects if there is any file called <code class=\"language-plaintext highlighter-rouge\">gunicorn.conf.py</code> inside the directory where it is executed, or you can specify a different path with the <code class=\"language-plaintext highlighter-rouge\">-c</code> flag.\nThe simplest way is to place it next to your manage.py file:</p>\n\n<div class=\"language-plaintext tree-content highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.\n├── gunicorn.conf.py    &lt;--- create here\n├── manage.py\n└── project\n    ├── __init__.py\n    ├── asgi.py\n    ├── settings.py\n    ├── urls.py\n    └── wsgi.py\n</code></pre></div></div>\n\n<h3 id=\"multiple-workers\">Multiple workers</h3>\n\n<p>You can spawn multiple gunicorn processes that will serve your application to make use of the computing power of your server, based on the number of CPUs the machine has.\nTo find out the number of processors on your UNIX machine, you can execute <a href=\"https://stackoverflow.com/questions/6481005/how-to-obtain-the-number-of-cpus-cores-in-linux-from-the-command-line\"><code class=\"language-plaintext highlighter-rouge\">grep -c ^processor /proc/cpuinfo</code></a>.\nGunicorn suggests to run <code class=\"language-plaintext highlighter-rouge\">2-4 x $(NUM_CORES)</code> of workers<sup>[<a href=\"https://docs.gunicorn.org/en/stable/settings.html#workers\">2</a>]</sup>.\nThe reasoning behind it is that, while one of the processes is occupied with handling I/O or waiting for a response from the database, the other one can take over and handle a new request.</p>\n\n<p>Here is how the <code class=\"language-plaintext highlighter-rouge\">gunicorn.conf.py</code> file might look like:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n\n<span class=\"n\">workers</span> <span class=\"o\">=</span> <span class=\"n\">multiprocessing</span><span class=\"p\">.</span><span class=\"n\">cpu_count</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n</code></pre></div></div>\n\n<h3 id=\"listen-to-different-ips\">Listen to different IPs</h3>\n\n<p>By default the Gunicorn process will listen for http request on <code class=\"language-plaintext highlighter-rouge\">127.0.0.1:8000</code>.\nYou can configure Gunicorn to listen to different ports, or even to a public IP address.\nYou can easily test this by finding out your computer’s IP address inside your local network with <code class=\"language-plaintext highlighter-rouge\">ifconfig</code>  and set the bind address in the <code class=\"language-plaintext highlighter-rouge\">gunicorn.conf.py</code> file like this:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bind</span> <span class=\"o\">=</span> <span class=\"s\">\"192.168.x.y:8000\"</span>\n</code></pre></div></div>\n\n<p>and navigate from your phone to your computer with this address. \nPorts smaller than 1024 require additional configuration.</p>\n\n<p>In case you plan to use a proxy server like Nginx on the same machine, you might consider using a socket for proxying requests to your Gunicorn server.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bind</span> <span class=\"o\">=</span> <span class=\"s\">\"unix:/path/to/myproject.sock\"</span>\n</code></pre></div></div>\n\n<p>This has slight performance advantages, since they can avoid some checks and operations (like routing)<sup>[<a href=\"https://serverfault.com/questions/124517/what-is-the-difference-between-unix-sockets-and-tcp-ip-sockets/124518#124518\">3</a>]</sup>.</p>\n\n<p>You can even specify multiple bind addresses as a list, which is especially useful if you want to serve your application through <em>HTTPS</em>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bind</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">\"192.168.x.y:80\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"192.168.x.y:443\"</span>\n<span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>Serving requests will require an SSL certificate, which deserves another post to be discussed in detail.</p>\n\n<h2 id=\"run-gunicorn-as-a-background-process\">Run Gunicorn as a background process</h2>\n\n<p>To run the <em>Gunicorn</em> process in the background, you need to configure <em>Supervisor</em> or <em>Systemd</em>.\nThere are plenty articles online that explain how to configure both of them with <em>Gunicorn</em>, but after doing the reasearch I consider <em>Supervisor</em> to be the more versatile and simpler one to configure, even though <em>Systemd</em> is probably already installed on your Linux distribution.</p>\n\n<p>In <a href=\"/production%20deployment/2023/06/29/supervisor.html\">the next post</a> I describe how to run Gunicorn as a background process with both <em>Supervisor</em> <strong>and</strong> <em>Systemd</em>, so you should go ahead and make your own decision which one you like more.</p>\n\n<h2 id=\"further-reading\">Further Reading</h2>\n<ul>\n  <li><a href=\"https://docs.gunicorn.org/en/stable/index.html\">docs.gunicorn.org</a>: <em>Gunicorn</em> documentation</li>\n  <li><a href=\"https://www.fullstackpython.com/wsgi-servers.html\">WSGI Servers</a>: A more detailed explanation on WSGI servers and other Gunicorn alternatives</li>\n  <li>More WSGI learning resources: <a href=\"https://wsgi.readthedocs.io/en/latest/\">wsgi.readthedocs.io</a></li>\n</ul>\n\n\n        </div>\n\n        \n\n        \n\n        <nav class=\"page-pagination\" role=\"navigation\">\n  \n    <a class=\"page-previous\" href=\"/production%20deployment/2023/06/18/sqlite.html\">\n      <h4 class=\"page-pagination-label\">Previous</h4>\n      <span class=\"page-pagination-title\">\n        <i class=\"fas fa-arrow-left\"></i> SQLite in production\n\n      </span>\n    </a>\n  \n\n  \n    <a class=\"page-next\" href=\"/production%20deployment/2023/06/29/supervisor.html\">\n      <h4 class=\"page-pagination-label\">Next</h4>\n      <span class=\"page-pagination-title\">\n        Manage background processes with Supervisor or Systemd\n <i class=\"fas fa-arrow-right\"></i>\n      </span>\n    </a>\n  \n</nav>\n\n      </div>\n    </div>\n  </article>\n</main>\n\n\n    <footer id=\"footer\" class=\"site-footer\">\n  <!-- start custom footer snippets -->\n\n<!-- end custom footer snippets -->\n<div class=\"copyright\">\n    \n      <p>&copy; 2023 Minimalist Django. Powered by <a href=\"https://jekyllrb.com\" rel=\"nofollow\">Jekyll</a> &amp; <a href=\"https://github.com/mmistakes/so-simple-theme\" rel=\"nofollow\">So Simple</a>.</p>\n    \n  </div>\n</footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n  <script src=\"/assets/js/main.min.js\"></script>\n  <script src=\"https://use.fontawesome.com/releases/v5.0.12/js/all.js\"></script>\n\n\n  </body>\n\n</html>\n","relative_path":"_posts/2023-06-21-gunicorn.md","date":"2023-06-23 00:00:00 +0000","id":"/production%20deployment/2023/06/23/gunicorn","excerpt":"How to run your Django application through a WSGI server like Gunicorn","draft":false,"layout":"post","published":true,"author":"victor","slug":"gunicorn","ext":".md"},"path":"_posts/2023-06-14-sqlite.md","output":"<!DOCTYPE html>\n<!--\n    So Simple Jekyll Theme 3.2.0\n    Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes\n    Free for personal and commercial use under the MIT license\n    https://github.com/mmistakes/so-simple-theme/blob/master/LICENSE\n-->\n<html lang=\"en-US\" class=\"no-js\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  \n  \n\n  \n    \n    <!-- Begin Jekyll SEO tag v2.8.0 -->\n<title>SQLite in production | Minimalist Django</title>\n<meta name=\"generator\" content=\"Jekyll v4.2.2\" />\n<meta property=\"og:title\" content=\"SQLite in production\" />\n<meta name=\"author\" content=\"Victor Movileanu\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta name=\"description\" content=\"How SQLite can be used in production\" />\n<meta property=\"og:description\" content=\"How SQLite can be used in production\" />\n<link rel=\"canonical\" href=\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\" />\n<meta property=\"og:url\" content=\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\" />\n<meta property=\"og:site_name\" content=\"Minimalist Django\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-06-18T00:00:00+00:00\" />\n<meta name=\"twitter:card\" content=\"summary\" />\n<meta property=\"twitter:title\" content=\"SQLite in production\" />\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"author\":{\"@type\":\"Person\",\"name\":\"Victor Movileanu\"},\"dateModified\":\"2023-06-18T00:00:00+00:00\",\"datePublished\":\"2023-06-18T00:00:00+00:00\",\"description\":\"How SQLite can be used in production\",\"headline\":\"SQLite in production\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\"},\"publisher\":{\"@type\":\"Organization\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://minimalistdjango.com/images/django-rocket.svg\"},\"name\":\"Victor Movileanu\"},\"url\":\"https://minimalistdjango.com/production%20deployment/2023/06/18/sqlite.html\"}</script>\n<!-- End Jekyll SEO tag -->\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-PP61HM8LXR\"></script>\n<script>\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-PP61HM8LXR');\n</script>\n\n  \n\n  <script>\n    /* Cut the mustard */\n    if ( 'querySelector' in document && 'addEventListener' in window ) {\n      document.documentElement.className = document.documentElement.className.replace(/\\bno-js\\b/g, '') + 'js';\n    }\n  </script>\n\n  <link rel=\"stylesheet\" href=\"/assets/css/main.css\">\n  <link rel=\"stylesheet\" href=\"/assets/css/skins/default.css\">\n  <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Minimalist Django\" href=\"/feed.xml\">\n<!-- start custom head snippets -->\n\n<!-- insert favicons. use http://realfavicongenerator.net/ -->\n\n<!-- end custom head snippets -->\n\n</head>\n\n\n  <body class=\"layout--post  sqlite-in-production\">\n    <nav class=\"skip-links\">\n  <h2 class=\"screen-reader-text\">Skip links</h2>\n  <ul>\n    <li><a href=\"#primary-nav\" class=\"screen-reader-shortcut\">Skip to primary navigation</a></li>\n    <li><a href=\"#main\" class=\"screen-reader-shortcut\">Skip to content</a></li>\n    <li><a href=\"#footer\" class=\"screen-reader-shortcut\">Skip to footer</a></li>\n  </ul>\n</nav>\n\n    \n  <div class=\"navigation-wrapper\">\n    <a href=\"#menu-toggle\" id=\"menu-toggle\">Menu</a>\n    <nav id=\"primary-nav\" class=\"site-nav animated drop\">\n      <ul><li><a href=\"/\">Home</a></li><li><a href=\"/categories/\">Categories</a></li><li><a href=\"/tags/\">Tags</a></li><li><a href=\"/about/\">About</a></li></ul>\n    </nav>\n  </div><!-- /.navigation-wrapper -->\n\n\n    <header class=\"masthead\">\n  <div class=\"wrap\">\n    \n      <a href=\"/\" class=\"site-logo\" rel=\"home\" title=\"Minimalist Django\">\n        <img src=\"/images/django-rocket.svg\" class=\"site-logo-img animated fadeInDown\" alt=\"Minimalist Django\">\n      </a>\n    \n    \n    \n      \n        <div class=\"site-title animated fadeIn\"><a href=\"/\">Minimalist Django</a></div>\n      \n      <p class=\"site-description animated fadeIn\" itemprop=\"description\">The minimalist way of web development</p>\n    \n  </div>\n</header><!-- /.masthead -->\n\n\n    <main id=\"main\" class=\"main-content\" aria-label=\"Content\">\n  <article class=\"h-entry\">\n    \n\n    <div class=\"page-wrapper\">\n      <header class=\"page-header\">\n        \n        \n          <h1 id=\"page-title\" class=\"page-title p-name\">SQLite in production\n</h1>\n        \n      </header>\n\n      <div class=\"page-sidebar\">\n        <div class=\"page-author h-card p-author\"><img src=\"/images/me.jpg\" class=\"author-avatar u-photo\" alt=\"Victor Movileanu\"><div class=\"author-info\"><div class=\"author-name\">\n        <span class=\"p-name\">Victor Movileanu</span>\n      </div><ul class=\"author-links\"><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://twitter.com/ViggieSmalls5\"><i class=\"fab fa-twitter-square fa-lg\" title=\"Twitter\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://instagram.com/vickym.rulez\"><i class=\"fab fa-instagram fa-lg\" title=\"Instagram\"></i></a>\n          </li><li class=\"author-link\">\n            <a class=\"u-url\" rel=\"me\" href=\"https://github.com/movileanuv\"><i class=\"fab fa-github-square fa-lg\" title=\"GitHub\"></i></a>\n          </li></ul>\n    <time class=\"page-date dt-published\" datetime=\"2023-06-18T00:00:00+00:00\"><a class=\"u-url\" href=\"\">June 18, 2023</a>\n</time>\n\n  </div>\n</div>\n\n        \n  <h3 class=\"page-taxonomies-title\">Categories</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">Production deployment</li>\n  </ul>\n\n\n        \n  <h3 class=\"page-taxonomies-title\">Tags</h3>\n  <ul class=\"page-taxonomies\"><li class=\"page-taxonomy\">SQLite</li><li class=\"page-taxonomy\">databases</li><li class=\"page-taxonomy\">DjangoCon</li>\n  </ul>\n\n\n      </div>\n\n      <div class=\"page-content\">\n        <div class=\"e-content\">\n          <p>People say <em>SQLite</em> is a database that is unsuitable for production use because of low performance, inability to handle\nmultiple concurrent writes, and other misconceptions.\nThis article is inspired by a talk at <a href=\"https://youtu.be/yTicYJDT1zE\"><em>DjangoCon 2023</em></a>  and an episode of <a href=\"https://changelog.com/podcast/433\"><em>The Changelog</em></a>.</p>\n\n<iframe class=\"youtube-iframe\" src=\"https://www.youtube.com/embed/yTicYJDT1zE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n\n<h2 id=\"video-summary\">Video summary</h2>\n<ul>\n  <li>SQLite is already in production. You can already see how many applications use SQLite on your computer with this command:\n    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  find / <span class=\"se\">\\(</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.db\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite\"</span> <span class=\"nt\">-o</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"*.sqlite3\"</span> <span class=\"se\">\\)</span> <span class=\"nt\">-type</span> f <span class=\"nt\">-exec</span> file <span class=\"o\">{}</span> <span class=\"se\">\\;</span> 2&gt;/dev/null | <span class=\"nb\">grep </span>SQLite\n</code></pre></div>    </div>\n  </li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=682\">11:20</a> it is a serverless database, which means you don’t need to configure an extra host, manage access by your application server, etc.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=866\">14:25</a> No performance loss because of network latency</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=931\">15:31</a> No N + 1 Query problems</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1051\">17:31</a> Concurrent writes are not a problem if you turn <a href=\"https://www.sqlite.org/wal.html\">Write-Ahead Logging</a> for your SQLite database. For this, you can execute <code class=\"language-plaintext highlighter-rouge\">sqlite3 db.sqlite3 'PRAGMA journal_mode=wal;'</code> in your shell.</li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1142\">19:02</a> Speed up writes even more by reducing the <a href=\"https://www.sqlite.org/pragma.html#pragma_synchronous\">synchronous level</a></li>\n  <li><a href=\"https://youtu.be/yTicYJDT1zE?t=1253\">20:53</a> You can easily back up the SQLite database with <a href=\"https://litestream.io/\">Litestream</a></li>\n</ul>\n\n<h2 id=\"set-up-django-to-run-with-sqlite\">Set up Django to run with SQLite</h2>\n\n<p>When creating a new Django project, it comes with following default setting for <code class=\"language-plaintext highlighter-rouge\">DATABASES</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"ENGINE\"</span><span class=\"p\">:</span> <span class=\"s\">\"django.db.backends.sqlite3\"</span><span class=\"p\">,</span>\n        <span class=\"s\">\"NAME\"</span><span class=\"p\">:</span> <span class=\"n\">BASE_DIR</span> <span class=\"o\">/</span> <span class=\"s\">\"db.sqlite3\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You can also use <a href=\"https://github.com/jazzband/dj-database-url/\"><code class=\"language-plaintext highlighter-rouge\">dj-database-url</code></a> to configure your <code class=\"language-plaintext highlighter-rouge\">DATABASES</code> setting. In this case, the <code class=\"language-plaintext highlighter-rouge\">DATABASE_URL</code> might look like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>DATABASE_URL=sqlite:///path/to/your/database/file.sqlite3\n</code></pre></div></div>\n\n<p>Now, before you start your django project for the first time, which automatically creates a SQLite database for you, you should create it yourself first, by running:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlite3 db.sqlite3 <span class=\"s1\">'PRAGMA journal_mode=wal; PRAGMA busy_timeout = 5000;'</span>\n</code></pre></div></div>\n\n<p>The PRAGMA synchronous setting is a little bit more tricky, since it does not apply to the database, <a href=\"https://stackoverflow.com/questions/36308801/sqlite3-pragma-synchronous-not-persistent\">but to the database connection</a>.\nHence, you have to change this setting <a href=\"https://stackoverflow.com/a/6843199/5540654\">for all connections opened by the Django app</a>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.signals</span> <span class=\"kn\">import</span> <span class=\"n\">connection_created</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">activate_foreign_keys</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">vendor</span> <span class=\"o\">==</span> <span class=\"s\">'sqlite'</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n        <span class=\"n\">cursor</span><span class=\"p\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s\">'PRAGMA synchronous=1;'</span><span class=\"p\">)</span>\n\n<span class=\"n\">connection_created</span><span class=\"p\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">activate_foreign_keys</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"how-to-configure-litestream-to-back-up-your-database-to-s3\">How to configure Litestream to back up your Database to S3</h2>\n\n<ul>\n  <li><a href=\"https://litestream.io/install/\">Install</a></li>\n  <li><a href=\"https://litestream.io/guides/s3/\">Replicating to Amazon S3</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Running as a Systemd service</a></li>\n  <li><a href=\"https://litestream.io/guides/systemd/\">Tips &amp; Caveats</a></li>\n</ul>\n\n<h2 id=\"further-reading\">Further reading</h2>\n<ul>\n  <li>https://tailscale.com/blog/database-for-2022/</li>\n  <li>https://blog.expensify.com/2018/01/08/scaling-sqlite-to-4m-qps-on-a-single-server/</li>\n  <li>https://simonwillison.net/2022/Oct/23/datasette-gunicorn/</li>\n  <li>https://github.com/tomdyson/django-sqlite-load-tests</li>\n</ul>\n\n\n        </div>\n\n        \n\n        \n\n        <nav class=\"page-pagination\" role=\"navigation\">\n  \n    <a class=\"page-previous\" href=\"/development/2023/06/14/set-up-a-django-project.html\">\n      <h4 class=\"page-pagination-label\">Previous</h4>\n      <span class=\"page-pagination-title\">\n        <i class=\"fas fa-arrow-left\"></i> How to set up a Django project\n\n      </span>\n    </a>\n  \n\n  \n    <a class=\"page-next\" href=\"/production%20deployment/2023/06/23/gunicorn.html\">\n      <h4 class=\"page-pagination-label\">Next</h4>\n      <span class=\"page-pagination-title\">\n        Gunicorn from scratch\n <i class=\"fas fa-arrow-right\"></i>\n      </span>\n    </a>\n  \n</nav>\n\n      </div>\n    </div>\n  </article>\n</main>\n\n\n    <footer id=\"footer\" class=\"site-footer\">\n  <!-- start custom footer snippets -->\n\n<!-- end custom footer snippets -->\n<div class=\"copyright\">\n    \n      <p>&copy; 2023 Minimalist Django. Powered by <a href=\"https://jekyllrb.com\" rel=\"nofollow\">Jekyll</a> &amp; <a href=\"https://github.com/mmistakes/so-simple-theme\" rel=\"nofollow\">So Simple</a>.</p>\n    \n  </div>\n</footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n  <script src=\"/assets/js/main.min.js\"></script>\n  <script src=\"https://use.fontawesome.com/releases/v5.0.12/js/all.js\"></script>\n\n\n  </body>\n\n</html>\n","relative_path":"_posts/2023-06-14-sqlite.md","date":"2023-06-18 00:00:00 +0000","id":"/production%20deployment/2023/06/18/sqlite","excerpt":"How SQLite can be used in production","draft":false,"layout":"post","published":true,"author":"victor","slug":"sqlite","ext":".md"},
        "date": "2023-06-18 00:00:00 +0000",
        "date_humanized": "June 18, 2023"
      }]
